{"config": {"lang": ["en"], "separator": "[\\s\\-]+", "pipeline": ["stopWordFilter"]}, "docs": [{"location": "", "title": "Introduction", "text": "<p><code>harborapi</code> is a Python client for the Harbor REST API v2.0.</p>"}, {"location": "#features", "title": "Features", "text": "<ul> <li>Async API</li> <li>Fully typed</li> <li>Data validation with Pydantic</li> <li>HTTP handled by HTTPX</li> <li>Extensive test coverage powered by Hypothesis</li> </ul>"}, {"location": "#installation", "title": "Installation", "text": "<pre><code>pip install harborapi\n</code></pre>"}, {"location": "endpoints/", "title": "Endpoints Overview", "text": "<p>This section contains API documentation for the methods implementing the different Harbor API endpoints.</p> <p>The methods listed can be called on an instance of the <code>HarborAsyncClient</code> class:</p> <pre><code>from harborapi import HarborAsyncClient\n\nclient = HarborAsyncClient(...)\n\nasync def main() -&gt; None:\n    projects = await client.get_projects()\n    repos = await client.get_repositories()\n\n    # Resource creation requires a model object\n    from harborapi.models import ProjectReq\n    await client.create_project(\n        ProjectReq(\n            project_name=\"my-project\",\n            public=False,\n        ),\n    )\n\n    # etc...\n</code></pre> <p>See Recipes for more examples on how to use the methods.</p>"}, {"location": "endpoints/#implemented-endpoints", "title": "Implemented Endpoints", "text": "<p>Check the GitHub README for the most up to date overview of the implemented endpoints.</p>"}, {"location": "endpoints/artifacts/", "title": "Artifacts", "text": ""}, {"location": "endpoints/artifacts/#harborapi.client.HarborAsyncClient.get_artifact", "title": "<code>get_artifact(project_name, repository_name, reference, page=1, page_size=10, with_tag=True, with_label=False, with_scan_overview=False, with_signature=False, with_immutable_status=False, with_accessory=False, with_sbom_overview=False, mime_type=DEFAULT_MIME_TYPES)</code>  <code>async</code>", "text": "<p>Get an artifact.</p> <p>Parameters:</p> Name Type Description Default <code>project_name</code> <code>str</code> <p>The name of the project</p> required <code>repository_name</code> <code>str</code> <p>The name of the repository</p> required <code>reference</code> <code>str</code> <p>The reference of the artifact, can be digest or tag</p> required <code>page</code> <code>int</code> <p>The page of results to return</p> <code>1</code> <code>page_size</code> <code>int</code> <p>The number of results to return per page</p> <code>10</code> <code>with_tag</code> <code>bool</code> <p>Whether to include the tags of the artifact in the response</p> <code>True</code> <code>with_label</code> <code>bool</code> <p>Whether to include the labels of the artifact in the response</p> <code>False</code> <code>with_scan_overview</code> <code>bool</code> <p>Whether to include the scan overview of the artifact in the response</p> <code>False</code> <code>with_signature</code> <code>bool</code> <p>Whether the signature is included inside the tags of the returning artifact. Only works when setting <code>with_tag==True</code>.</p> <code>False</code> <code>with_immutable_status</code> <code>bool</code> <p>Whether the immutable status is included inside the tags of the returning artifact.</p> <code>False</code> <code>with_accessory</code> <code>bool</code> <p>Whether the accessories are included of the returning artifact.</p> <code>False</code> <code>with_sbom_overview</code> <code>bool</code> <p>Whether the sbom overview is included of the returning artifact.</p> <code>False</code> <code>mime_type</code> <code>str</code> <p>A comma-separated lists of MIME types for the scan report or scan summary. The first mime type will be used when the report found for it. Currently the mime type supports:</p> <pre><code>* application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0\n* application/vnd.security.vulnerability.report; version=1.1\n</code></pre> <code>DEFAULT_MIME_TYPES</code> <p>Returns:</p> Type Description <code>Artifact</code> <p>An artifact.</p>"}, {"location": "endpoints/artifacts/#harborapi.client.HarborAsyncClient.copy_artifact", "title": "<code>copy_artifact(project_name, repository_name, source)</code>  <code>async</code>", "text": "<p>Copy an artifact.</p> <p>Parameters:</p> Name Type Description Default <code>project_name</code> <code>str</code> <p>Name of new artifact's project</p> required <code>repository_name</code> <code>str</code> <p>Name of new artifact's repository</p> required <code>source</code> <code>str</code> <p>The source artifact to copy from in the form of <code>\"project/repository:tag\"</code> or <code>\"project/repository@digest\"</code></p> required <p>Returns:</p> Type Description <code>str</code> <p>The location of the new artifact</p>"}, {"location": "endpoints/artifacts/#harborapi.client.HarborAsyncClient.delete_artifact", "title": "<code>delete_artifact(project_name, repository_name, reference, missing_ok=None)</code>  <code>async</code>", "text": "<p>Delete an artifact.</p> <p>Parameters:</p> Name Type Description Default <code>project_name</code> <code>str</code> <p>The name of the project</p> required <code>repository_name</code> <code>str</code> <p>The name of the repository</p> required <code>reference</code> <code>str</code> <p>The reference of the artifact, can be digest or tag</p> required <code>missing_ok</code> <code>Optional[bool]</code> <p>DEPRECATED: Whether to ignore 404 error when deleting the artifact</p> <code>None</code>"}, {"location": "endpoints/artifacts/#harborapi.client.HarborAsyncClient.get_artifact_vulnerability_reports", "title": "<code>get_artifact_vulnerability_reports(project_name, repository_name, reference, mime_type=DEFAULT_MIME_TYPES)</code>  <code>async</code>", "text": "<p>Get the vulnerability report(s) for an artifact.</p> <p>Parameters:</p> Name Type Description Default <code>project_name</code> <code>str</code> <p>The name of the project</p> required <code>repository_name</code> <code>str</code> <p>The name of the repository</p> required <code>reference</code> <code>str</code> <p>The reference of the artifact, can be digest or tag</p> required <code>mime_type</code> <code>Union[str, Sequence[str]]</code> <p>MIME type or list of MIME types for the scan report or scan summary.</p> <code>DEFAULT_MIME_TYPES</code> <p>Returns:</p> Type Description <code>FirstDict[str, HarborVulnerabilityReport]</code> <p>A dict of vulnerability reports keyed by MIME type. Supports the <code>first()</code> method to get the first report.</p>"}, {"location": "endpoints/artifacts/#harborapi.client.HarborAsyncClient.get_artifact_build_history", "title": "<code>get_artifact_build_history(project_name, repository_name, reference, limit=None)</code>  <code>async</code>", "text": "<p>Get the build history for an artifact.</p> <p>Parameters:</p> Name Type Description Default <code>project_name</code> <code>str</code> <p>The name of the project</p> required <code>repository_name</code> <code>str</code> <p>The name of the repository</p> required <code>reference</code> <code>str</code> <p>The reference of the artifact, can be digest or tag</p> required <code>limit</code> <code>Optional[int]</code> <p>The maximum number of build history entries to return</p> <code>None</code> <p>Returns:</p> Type Description <code>List[BuildHistoryEntry]</code> <p>The build history for the artifact</p>"}, {"location": "endpoints/artifacts/#harborapi.client.HarborAsyncClient.get_artifact_accessories", "title": "<code>get_artifact_accessories(project_name, repository_name, reference, query=None, sort=None, page=1, page_size=10, limit=None, **kwargs)</code>  <code>async</code>", "text": "<p>Get the tags for an artifact.</p> <p>Parameters:</p> Name Type Description Default <code>project_name</code> <code>str</code> <p>The name of the project</p> required <code>repository_name</code> <code>str</code> <p>The name of the repository</p> required <code>reference</code> <code>str</code> <p>The reference of the artifact, can be digest or tag</p> required <code>query</code> <code>Optional[str]</code> <p>A query string to filter the accessories</p> <p>Supported query patterns are:</p> <pre><code>* exact match(`\"k=v\"`)\n* fuzzy match(`\"k=~v\"`)\n* range(`\"k=[min~max]\"`)\n* list with union releationship(`\"k={v1 v2 v3}\"`)\n* list with intersection relationship(`\"k=(v1 v2 v3)\"`).\n</code></pre> <p>The value of range and list can be:</p> <pre><code>* string(enclosed by `\"` or `'`)\n* integer\n* time(in format `\"2020-04-09 02:36:00\"`)\n</code></pre> <p>All of these query patterns should be put in the query string and separated by <code>\",\"</code>. e.g. <code>\"k1=v1,k2=~v2,k3=[min~max]\"</code></p> <code>None</code> <code>sort</code> <code>Optional[str]</code> <p>The sort order of the tags.</p> <code>None</code> <code>page</code> <code>int</code> <p>The page of results to return</p> <code>1</code> <code>page_size</code> <code>int</code> <p>The number of results to return per page</p> <code>10</code> <code>limit</code> <code>Optional[int]</code> <p>The maximum number of results to return.</p> <code>None</code> <p>Returns:</p> Type Description <code>List[Accessory]</code> <p>A list of Accessory objects for the artifact.</p>"}, {"location": "endpoints/artifacts/#harborapi.client.HarborAsyncClient.get_artifact_tags", "title": "<code>get_artifact_tags(project_name, repository_name, reference, query=None, sort=None, page=1, page_size=10, limit=None, with_signature=False, with_immutable_status=False, **kwargs)</code>  <code>async</code>", "text": "<p>Get the tags for an artifact.</p> <p>Parameters:</p> Name Type Description Default <code>project_name</code> <code>str</code> <p>The name of the project</p> required <code>repository_name</code> <code>str</code> <p>The name of the repository</p> required <code>reference</code> <code>str</code> <p>The reference of the artifact, can be digest or tag</p> required <code>query</code> <code>Optional[str]</code> <p>A query string to filter the tags</p> <p>Supported query patterns are:</p> <pre><code>* exact match(`\"k=v\"`)\n* fuzzy match(`\"k=~v\"`)\n* range(`\"k=[min~max]\"`)\n* list with union releationship(`\"k={v1 v2 v3}\"`)\n* list with intersection relationship(`\"k=(v1 v2 v3)\"`).\n</code></pre> <p>The value of range and list can be:</p> <pre><code>* string(enclosed by `\"` or `'`)\n* integer\n* time(in format `\"2020-04-09 02:36:00\"`)\n</code></pre> <p>All of these query patterns should be put in the query string and separated by <code>\",\"</code>. e.g. <code>\"k1=v1,k2=~v2,k3=[min~max]\"</code></p> <code>None</code> <code>sort</code> <code>Optional[str]</code> <p>The sort order of the tags. TODO: document this parameter</p> <code>None</code> <code>page</code> <code>int</code> <p>The page of results to return</p> <code>1</code> <code>page_size</code> <code>int</code> <p>The number of results to return per page</p> <code>10</code> <code>limit</code> <code>Optional[int]</code> <p>The maximum number of results to return.</p> <code>None</code> <code>with_signature</code> <code>bool</code> <p>Whether to include the signature of the tag in the response</p> <code>False</code> <code>with_immutable_status</code> <code>bool</code> <p>Whether to include the immutable status of the tag in the response</p> <code>False</code> <p>Returns:</p> Type Description <code>List[Tag]</code> <p>A list of Tag objects for the artifact.</p>"}, {"location": "endpoints/artifacts/#harborapi.client.HarborAsyncClient.create_artifact_tag", "title": "<code>create_artifact_tag(project_name, repository_name, reference, tag)</code>  <code>async</code>", "text": "<p>Create a tag for an artifact.</p> <p>Parameters:</p> Name Type Description Default <code>project_name</code> <code>str</code> <p>The name of the project</p> required <code>repository_name</code> <code>str</code> <p>The name of the repository</p> required <code>reference</code> <code>str</code> <p>The reference of the artifact, can be digest or tag</p> required <code>tag</code> <code>Tag</code> <p>The tag to create</p> required <p>Returns:</p> Type Description <code>str</code> <p>The location of the created tag</p>"}, {"location": "endpoints/artifacts/#harborapi.client.HarborAsyncClient.delete_artifact_tag", "title": "<code>delete_artifact_tag(project_name, repository_name, reference, tag_name, missing_ok=None)</code>  <code>async</code>", "text": "<p>Delete a tag for an artifact.</p> <p>Parameters:</p> Name Type Description Default <code>project_name</code> <code>str</code> <p>The name of the project</p> required <code>repository_name</code> <code>str</code> <p>The name of the repository</p> required <code>reference</code> <code>str</code> <p>The reference of the artifact, can be digest or tag</p> required <code>tag_name</code> <code>str</code> <p>The name of the tag to delete</p> required"}, {"location": "endpoints/artifacts/#harborapi.client.HarborAsyncClient.add_artifact_label", "title": "<code>add_artifact_label(project_name, repository_name, reference, label)</code>  <code>async</code>", "text": "<p>Add a label to an artifact.</p> <p>Parameters:</p> Name Type Description Default <code>project_name</code> <code>str</code> <p>The name of the project</p> required <code>repository_name</code> <code>str</code> <p>The name of the repository</p> required <code>reference</code> <code>str</code> <p>The reference of the artifact, can be digest or tag</p> required <code>label</code> <code>Label</code> <p>The label to add</p> required"}, {"location": "endpoints/artifacts/#harborapi.client.HarborAsyncClient.delete_artifact_label", "title": "<code>delete_artifact_label(project_name, repository_name, reference, label_id, missing_ok=None)</code>  <code>async</code>", "text": "<p>Delete an artifact.</p> <p>Parameters:</p> Name Type Description Default <code>project_name</code> <code>str</code> <p>The name of the project</p> required <code>repository_name</code> <code>str</code> <p>The name of the repository</p> required <code>reference</code> <code>str</code> <p>The reference of the artifact, can be digest or tag</p> required <code>label_id</code> <code>int</code> <p>The id of the label to delete</p> required <code>missing_ok</code> <code>Optional[bool]</code> <p>DEPRECATED: Whether to ignore 404 error when deleting the label</p> <code>None</code>"}, {"location": "endpoints/artifacts/#harborapi.client.HarborAsyncClient.get_artifacts", "title": "<code>get_artifacts(project_name, repository_name, query=None, sort=None, page=1, page_size=10, limit=None, with_tag=True, with_label=False, with_scan_overview=False, with_sbom_overview=False, with_signature=False, with_immutable_status=False, with_accessory=False, mime_type=DEFAULT_MIME_TYPES, **kwargs)</code>  <code>async</code>", "text": "<p>Get the artifacts in a repository.</p> <p>Parameters:</p> Name Type Description Default <code>project_name</code> <code>str</code> <p>The name of the project</p> required <code>repository_name</code> <code>str</code> <p>The name of the repository</p> required <code>query</code> <code>Optional[str]</code> <p>A query string to filter the artifacts</p> <p>Except the basic properties, the other supported queries includes:</p> <pre><code>* `\"tags=*\"` to list only tagged artifacts\n* `\"tags=nil\"` to list only untagged artifacts\n* `\"tags=~v\"` to list artifacts whose tag fuzzy matches \"v\"\n* `\"tags=v\"` to list artifact whose tag exactly matches \"v\"\n* `\"labels=(id1, id2)\"` to list artifacts that both labels with id1 and id2 are added to\n</code></pre> <p>The value of range and list can be:</p> <pre><code>* string(enclosed by `\"` or `'`)\n* integer\n* time(in format `\"2020-04-09 02:36:00\"`)\n</code></pre> <p>All of these query patterns should be put in the query string and separated by <code>\",\"</code>. e.g. <code>\"k1=v1,k2=~v2,k3=[min~max]\"</code></p> <code>None</code> <code>sort</code> <code>Optional[str]</code> <p>The sort order of the artifacts.</p> <code>None</code> <code>page</code> <code>int</code> <p>The page of results to return</p> <code>1</code> <code>page_size</code> <code>int</code> <p>The number of results to return per page</p> <code>10</code> <code>limit</code> <code>Optional[int]</code> <p>The maximum number of results to return.</p> <code>None</code> <code>with_tag</code> <code>bool</code> <p>Whether to include the tags of the artifact in the response</p> <code>True</code> <code>with_label</code> <code>bool</code> <p>Whether to include the labels of the artifact in the response</p> <code>False</code> <code>with_scan_overview</code> <code>bool</code> <p>Whether to include the scan overview of the artifact in the response</p> <code>False</code> <code>with_sbom_overview</code> <code>bool</code> <p>Whether to include the SBOM overview of the artifacts</p> <code>False</code> <code>with_signature</code> <code>bool</code> <p>Whether the signature is included inside the tags of the returning artifacts. Only works when setting <code>with_tag==True</code>.</p> <code>False</code> <code>with_immutable_status</code> <code>bool</code> <p>Whether the immutable status is included inside the tags of the returning artifacts.</p> <code>False</code> <code>with_accessory</code> <code>bool</code> <p>Whether the accessories are included of the returning artifacts.</p> <code>False</code> <code>mime_type</code> <code>Union[str, Sequence[str]]</code> <p>MIME types for the scan report or scan summary. The first mime type will be used when a report is found for it. Can be a list of MIME types or a single MIME type.</p> <code>DEFAULT_MIME_TYPES</code> <p>Returns:</p> Type Description <code>List[Artifact]</code> <p>A list of artifacts in the repository matching the query.</p>"}, {"location": "endpoints/artifacts/#harborapi.client.HarborAsyncClient.get_artifact_vulnerabilities", "title": "<code>get_artifact_vulnerabilities(project_name, repository_name, reference, mime_type='application/vnd.security.vulnerability.report; version=1.1')</code>  <code>async</code>", "text": "<p>Get the vulnerabilities for an artifact.</p> <p>Warning</p> <p>This method is deprecated. Use get_artifact_vulnerability_reports instead.</p> <p>Parameters:</p> Name Type Description Default <code>project_name</code> <code>str</code> <p>The name of the project</p> required <code>repository_name</code> <code>str</code> <p>The name of the repository</p> required <code>reference</code> <code>str</code> <p>The reference of the artifact, can be digest or tag</p> required <code>mime_type</code> <code>str</code> <p>A comma-separated lists of MIME types for the scan report or scan summary.</p> <code>'application/vnd.security.vulnerability.report; version=1.1'</code> <p>Returns:</p> Type Description <code>HarborVulnerabilityReport</code> <p>The vulnerabilities for the artifact, or None if the artifact is not found</p>"}, {"location": "endpoints/auditlogs/", "title": "Audit Logs", "text": ""}, {"location": "endpoints/auditlogs/#harborapi.client.HarborAsyncClient.get_audit_logs", "title": "<code>get_audit_logs(query=None, sort=None, page=1, page_size=10, limit=None, **kwargs)</code>  <code>async</code>", "text": "<p>Get a list of audit logs for the projects the user is a member of.</p> <p>Note</p> <p>The audit log can be massive, so setting a <code>limit</code> is highly recommended.</p> <p>Parameters:</p> Name Type Description Default <code>query</code> <code>Optional[str]</code> <p>Query string to query resources.</p> <p>Supported query patterns are:</p> <pre><code>* exact match(`\"k=v\"`)\n* fuzzy match(`\"k=~v\"`)\n* range(`\"k=[min~max]\"`)\n* list with union releationship(`\"k={v1 v2 v3}\"`)\n* list with intersection relationship(`\"k=(v1 v2 v3)\"`).\n</code></pre> <p>The value of range and list can be:</p> <pre><code>* string(enclosed by `\"` or `'`)\n* integer\n* time(in format `\"2020-04-09 02:36:00\"`)\n</code></pre> <p>All of these query patterns should be put in the query string and separated by <code>\",\"</code>. e.g. <code>\"k1=v1,k2=~v2,k3=[min~max]\"</code></p> <code>None</code> <code>sort</code> <code>Optional[str]</code> <p>Sort the resource list in ascending or descending order. e.g. sort by field1 in ascending order and field2 in descending order with <code>\"sort=field1,-field2\"</code></p> <code>None</code> <code>page</code> <code>int</code> <p>The page number to fetch resources from.</p> <code>1</code> <code>page_size</code> <code>int</code> <p>The number of resources to fetch per page.</p> <code>10</code> <code>limit</code> <code>Optional[int]</code> <p>The maximum number of audit logs to retrieve.</p> <code>None</code> <p>Returns:</p> Type Description <code>List[AuditLog]</code> <p>The list of audit logs.</p>"}, {"location": "endpoints/configure/", "title": "Configure", "text": ""}, {"location": "endpoints/configure/#harborapi.client.HarborAsyncClient.get_config", "title": "<code>get_config()</code>  <code>async</code>", "text": "<p>Get the system configuration.</p> <p>Attention</p> <p>Requires admin privileges or a privileged Robot account.</p> <p>Returns:</p> Type Description <code>ConfigurationsResponse</code> <p>The system configuration.</p>"}, {"location": "endpoints/configure/#harborapi.client.HarborAsyncClient.update_config", "title": "<code>update_config(config)</code>  <code>async</code>", "text": "<p>Fully or partially update the system configuration.</p> <p>Attention</p> <p>Requires admin privileges or a privileged Robot account.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>Configurations</code> <p>The configuration map can contain a subset of the attributes of the schema, which are to be updated.</p> required"}, {"location": "endpoints/cveallowlist/", "title": "CVE Allowlist", "text": "<p>Manage the system CVE allowlist.</p>"}, {"location": "endpoints/cveallowlist/#harborapi.client.HarborAsyncClient.get_cve_allowlist", "title": "<code>get_cve_allowlist()</code>  <code>async</code>", "text": "<p>Gets the current CVE allowlist.</p> <p>Returns:</p> Type Description <code>CVEAllowlist</code> <p>The current CVE allowlist.</p>"}, {"location": "endpoints/cveallowlist/#harborapi.client.HarborAsyncClient.update_cve_allowlist", "title": "<code>update_cve_allowlist(allowlist)</code>  <code>async</code>", "text": "<p>Overwrites the existing CVE allowlist with a new one.</p> <p>Parameters:</p> Name Type Description Default <code>allowlist</code> <code>CVEAllowlist</code> <p>The new CVE allowlist.</p> required"}, {"location": "endpoints/gc/", "title": "Garbage Collection", "text": ""}, {"location": "endpoints/gc/#harborapi.client.HarborAsyncClient.get_gc_schedule", "title": "<code>get_gc_schedule()</code>  <code>async</code>", "text": "<p>Get Garbage Collection schedule.</p> <p>Returns:</p> Type Description <code>Schedule</code> <p>The gc's schedule.</p>"}, {"location": "endpoints/gc/#harborapi.client.HarborAsyncClient.create_gc_schedule", "title": "<code>create_gc_schedule(schedule)</code>  <code>async</code>", "text": "<p>Create a Garbage Collection schedule.</p> <p>Parameters:</p> Name Type Description Default <code>schedule</code> <code>Schedule</code> <p>The schedule to create</p> required <p>Returns:</p> Type Description <code>str</code> <p>The location of the created schedule.</p>"}, {"location": "endpoints/gc/#harborapi.client.HarborAsyncClient.update_gc_schedule", "title": "<code>update_gc_schedule(schedule)</code>  <code>async</code>", "text": "<p>Update the Garbage Collection schedule.</p> <p>Parameters:</p> Name Type Description Default <code>schedule</code> <code>Schedule</code> <p>The new schedule to set</p> required"}, {"location": "endpoints/gc/#harborapi.client.HarborAsyncClient.get_gc_jobs", "title": "<code>get_gc_jobs(query=None, sort=None, page=1, page_size=10, limit=None)</code>  <code>async</code>", "text": "<p>Get Garbage Collection history for all jobs, optionally filtered by query.</p> <p>Parameters:</p> Name Type Description Default <code>query</code> <code>Optional[str]</code> <p>A query string to filter the Garbage Collection results logs.</p> <p>Supported query patterns are:</p> <pre><code>* exact match(`\"k=v\"`)\n* fuzzy match(`\"k=~v\"`)\n* range(`\"k=[min~max]\"`)\n* list with union releationship(`\"k={v1 v2 v3}\"`)\n* list with intersection relationship(`\"k=(v1 v2 v3)\"`).\n</code></pre> <p>The value of range and list can be:</p> <pre><code>* string(enclosed by `\"` or `'`)\n* integer\n* time(in format `\"2020-04-09 02:36:00\"`)\n</code></pre> <p>All of these query patterns should be put in the query string and separated by <code>\",\"</code>. e.g. <code>\"k1=v1,k2=~v2,k3=[min~max]\"</code></p> <code>None</code> <code>sort</code> <code>Optional[str]</code> <p>The sort order of the logs.</p> <code>None</code> <code>page</code> <code>int</code> <p>The page of results to return</p> <code>1</code> <code>page_size</code> <code>int</code> <p>The number of results to return per page</p> <code>10</code> <code>limit</code> <code>Optional[int]</code> <p>The maximum number of results to return.</p> <code>None</code> <p>Returns:</p> Type Description <code>List[GCHistory]</code> <p>List of Garbage Collection logs.</p>"}, {"location": "endpoints/gc/#harborapi.client.HarborAsyncClient.get_gc_job", "title": "<code>get_gc_job(gc_id)</code>  <code>async</code>", "text": "<p>Get a specific Garbage Collection job.</p> <p>Parameters:</p> Name Type Description Default <code>gc_id</code> <code>int</code> <p>The ID of the Garbage Collection job to get information about.</p> required <p>Returns:</p> Type Description <code>GCHistory</code> <p>Information about the Garbage Collection job.</p>"}, {"location": "endpoints/gc/#harborapi.client.HarborAsyncClient.get_gc_log", "title": "<code>get_gc_log(gc_id, as_list=True)</code>  <code>async</code>", "text": "<p>Get log output for a specific Garbage Collection job.</p> <p>Results are returned as a list of lines, or as a single string if <code>as_list</code> is False.</p> <p>Parameters:</p> Name Type Description Default <code>gc_id</code> <code>int</code> <p>The ID of the Garbage Collection job to get the log for</p> required <code>as_list</code> <code>bool</code> <p>If <code>True</code>, return the log as a list of lines, otherwise as single string.</p> <code>True</code> <p>Returns:</p> Type Description <code>Union[List[str], str]</code> <p>The log output for the Garbage Collection job.</p>"}, {"location": "endpoints/health/", "title": "Health Check", "text": ""}, {"location": "endpoints/health/#harborapi.client.HarborAsyncClient.health_check", "title": "<code>health_check()</code>  <code>async</code>", "text": "<p>Gets the health status of the Harbor server.</p> <p>Returns:</p> Type Description <code>OverallHealthStatus</code> <p>The health status of the Harbor server.</p>"}, {"location": "endpoints/icon/", "title": "Icon", "text": ""}, {"location": "endpoints/icon/#harborapi.client.HarborAsyncClient.get_icon", "title": "<code>get_icon(digest)</code>  <code>async</code>", "text": "<p>Get the icon with the specified digest.</p> <p>Parameters:</p> Name Type Description Default <code>digest</code> <code>str</code> <p>The digest of the icon to get.</p> required <p>Returns:</p> Type Description <code>Icon</code> <p>The icon.</p>"}, {"location": "endpoints/immutable/", "title": "Immutable", "text": ""}, {"location": "endpoints/immutable/#harborapi.client.HarborAsyncClient.get_project_immutable_tag_rules", "title": "<code>get_project_immutable_tag_rules(project_name_or_id, query=None, sort=None, page=1, page_size=10, limit=None)</code>  <code>async</code>", "text": "<p>Get the immutable tag rules for a project.</p> <p>Parameters:</p> Name Type Description Default <code>project_name_or_id</code> <code>Union[str, int]</code> <p>The name or ID of the project. String arguments are treated as project names. Integer arguments are treated as project IDs.</p> required <code>query</code> <code>Optional[str]</code> <p>A query string to filter the immutable tag rules</p> <code>None</code> <code>sort</code> <code>Optional[str]</code> <p>The sort order of the rules</p> <code>None</code> <code>page</code> <code>int</code> <p>The page of results to return</p> <code>1</code> <code>page_size</code> <code>int</code> <p>The number of results to return per page</p> <code>10</code> <code>limit</code> <code>Optional[int]</code> <p>The maximum number of results to return</p> <code>None</code> <p>Returns:</p> Type Description <code>List[ImmutableRule]</code> <p>The immutable tag rules for the project.</p>"}, {"location": "endpoints/immutable/#harborapi.client.HarborAsyncClient.create_project_immutable_tag_rule", "title": "<code>create_project_immutable_tag_rule(project_name_or_id, rule)</code>  <code>async</code>", "text": "<p>Create an immutable tag rule for a project.</p> <p>Parameters:</p> Name Type Description Default <code>project_name_or_id</code> <code>Union[str, int]</code> <p>The name or ID of the project. String arguments are treated as project names. Integer arguments are treated as project IDs.</p> required <code>rule</code> <code>ImmutableRule</code> <p>The immutable tag rule to create.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The location of the created immutable tag rule.</p>"}, {"location": "endpoints/immutable/#harborapi.client.HarborAsyncClient.update_project_immutable_tag_rule", "title": "<code>update_project_immutable_tag_rule(project_name_or_id, immutable_rule_id, rule)</code>  <code>async</code>", "text": "<p>Update an immutable tag rule for a project.</p> <p>Parameters:</p> Name Type Description Default <code>project_name_or_id</code> <code>Union[str, int]</code> <p>The name or ID of the project. String arguments are treated as project names. Integer arguments are treated as project IDs.</p> required <code>immutable_rule_id</code> <code>int</code> <p>The ID of the immutable tag rule.</p> required <code>rule</code> <code>ImmutableRule</code> <p>The updated immutable tag rule.</p> required"}, {"location": "endpoints/immutable/#harborapi.client.HarborAsyncClient.enable_project_immutable_tagrule", "title": "<code>enable_project_immutable_tagrule(project_name_or_id, immutable_rule_id, enabled=True)</code>  <code>async</code>", "text": "<p>Enable or disable an immutable tag rule for a project.</p> <p>Parameters:</p> Name Type Description Default <code>project_name_or_id</code> <code>Union[str, int]</code> <p>The name or ID of the project. String arguments are treated as project names. Integer arguments are treated as project IDs.</p> required <code>immutable_rule_id</code> <code>int</code> <p>The ID of the immutable tag rule.</p> required <code>enabled</code> <code>bool</code> <p>Whether to enable or disable the rule.</p> <code>True</code>"}, {"location": "endpoints/immutable/#harborapi.client.HarborAsyncClient.delete_project_immutable_tag_rule", "title": "<code>delete_project_immutable_tag_rule(project_name_or_id, immutable_rule_id)</code>  <code>async</code>", "text": "<p>Delete an immutable tag rule for a project.</p> <p>Parameters:</p> Name Type Description Default <code>project_name_or_id</code> <code>Union[str, int]</code> <p>The name or ID of the project. String arguments are treated as project names. Integer arguments are treated as project IDs.</p> required <code>immutable_rule_id</code> <code>int</code> <p>The ID of the immutable tag rule.</p> required"}, {"location": "endpoints/labels/", "title": "Labels", "text": ""}, {"location": "endpoints/labels/#harborapi.client.HarborAsyncClient.get_label", "title": "<code>get_label(label_id)</code>  <code>async</code>", "text": "<p>Get a specific label.</p> <p>Parameters:</p> Name Type Description Default <code>label_id</code> <code>int</code> <p>The ID of the label to get.</p> required <p>Returns:</p> Type Description <code>Label</code> <p>The label.</p>"}, {"location": "endpoints/labels/#harborapi.client.HarborAsyncClient.create_label", "title": "<code>create_label(label)</code>  <code>async</code>", "text": "<p>Create a label.</p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>Label</code> <p>The label to create. The fields <code>id</code>, <code>creation_time</code> and <code>update_time</code> are ignored.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The location of the label.</p>"}, {"location": "endpoints/labels/#harborapi.client.HarborAsyncClient.delete_label", "title": "<code>delete_label(label_id)</code>  <code>async</code>", "text": "<p>Delete a label.</p> <p>Parameters:</p> Name Type Description Default <code>label_id</code> <code>int</code> <p>The ID of the label to delete.</p> required"}, {"location": "endpoints/labels/#harborapi.client.HarborAsyncClient.get_labels", "title": "<code>get_labels(query=None, sort=None, page=1, page_size=10, name=None, scope=None, project_id=None, limit=None)</code>  <code>async</code>", "text": "<p>Get a list of labels.</p> <p>Parameters:</p> Name Type Description Default <code>query</code> <code>Optional[str]</code> <p>The query string to filter by.</p> <code>None</code> <code>sort</code> <code>Optional[str]</code> <p>The sort order of the results.</p> <code>None</code> <code>page</code> <code>int</code> <p>The page of results to return.</p> <code>1</code> <code>page_size</code> <code>int</code> <p>The number of results to return per page.</p> <code>10</code> <code>name</code> <code>Optional[str]</code> <p>The name of the label to filter by.</p> <code>None</code> <code>scope</code> <code>Optional[str]</code> <p>The scope of the label to filter by. Valid values are <code>\"g\"</code> and <code>\"p\"</code>. <code>\"g\"</code> for global labels and <code>\"p\"</code> for project labels.</p> <code>None</code> <code>project_id</code> <code>Optional[int]</code> <p>The ID of the project to filter by. Required when scope is <code>\"p\"</code>.</p> <code>None</code> <code>limit</code> <code>Optional[int]</code> <p>The maximum number of results to return.</p> <code>None</code> <p>Returns:</p> Type Description <code>List[Label]</code> <p>The list of labels.</p>"}, {"location": "endpoints/ldap/", "title": "LDAP", "text": ""}, {"location": "endpoints/ldap/#harborapi.client.HarborAsyncClient.ping_ldap", "title": "<code>ping_ldap(configuration=None)</code>  <code>async</code>", "text": "<p>Pings the LDAP service with a configuration. If the configuration is empty, the current configuration is loaded.</p> <p>Note</p> <p>The original documentation for this endpoint has extremely broken english, and it's unclear what its purpose is.</p> Original documentation <p>This endpoint ping the available ldap service for test related configuration parameters.</p> <p>param <code>ldapconf</code>: ldap configuration. support input ldap service configuration. If it is a empty request, will load current configuration from the system</p> <p>Parameters:</p> Name Type Description Default <code>configuration</code> <code>Optional[LdapConf]</code> <p>The configuration to use for the ping. Uses current system configuration if <code>None</code>.</p> <code>None</code> <p>Returns:</p> Type Description <code>LdapPingResult</code> <p>The result of the ping</p>"}, {"location": "endpoints/ldap/#harborapi.client.HarborAsyncClient.search_ldap_groups", "title": "<code>search_ldap_groups(group_name=None, group_dn=None, limit=None)</code>  <code>async</code>", "text": "<p>Search for LDAP groups with a name or DN.</p> <p>Parameters:</p> Name Type Description Default <code>group_name</code> <code>str</code> <p>The name of the LDAP group to search for.</p> <code>None</code> <code>group_dn</code> <code>str</code> <p>The DN of the LDAP group to search for.</p> <code>None</code> <code>limit</code> <code>Optional[int]</code> <p>The maximum number of results to return.</p> <code>None</code> <p>Returns:</p> Type Description <code>List[UserGroup]</code> <p>The list of LDAP groups that match the search.</p>"}, {"location": "endpoints/ldap/#harborapi.client.HarborAsyncClient.search_ldap_users", "title": "<code>search_ldap_users(username, limit=None)</code>  <code>async</code>", "text": "<p>Search for LDAP users with a given username.</p> <p>Parameters:</p> Name Type Description Default <code>username</code> <code>str</code> <p>The username to search for.</p> required <code>limit</code> <code>Optional[int]</code> <p>The maximum number of results to return.</p> <code>None</code> <p>Returns:</p> Type Description <code>List[LdapUser]</code> <p>The list of LDAP users that match the search.</p>"}, {"location": "endpoints/ldap/#harborapi.client.HarborAsyncClient.import_ldap_users", "title": "<code>import_ldap_users(user_ids)</code>  <code>async</code>", "text": "<p>Import LDAP users with the given IDs.</p> <p>In case of failure, check the resulting exception's <code>errors</code> attribute for more information on which users failed to import.</p> <p>Parameters:</p> Name Type Description Default <code>user_ids</code> <code>List[str]</code> <p>A list of strings representing the IDs of the users to import. The system attempts to determine the remaining user information based on each user's ID.</p> required"}, {"location": "endpoints/oidc/", "title": "OIDC", "text": ""}, {"location": "endpoints/oidc/#harborapi.client.HarborAsyncClient.test_oidc", "title": "<code>test_oidc(oidcreq)</code>  <code>async</code>", "text": "<p>Tests an OIDC endpoint. Can only be called by system admin.</p> <p>Raises <code>StatusError</code> if endpoint is unreachable.</p> <p>Parameters:</p> Name Type Description Default <code>oidcreq</code> <code>OIDCTestReq</code> <p>The OIDC test request.</p> required"}, {"location": "endpoints/permissions/", "title": "Permissions", "text": ""}, {"location": "endpoints/permissions/#harborapi.client.HarborAsyncClient.get_permissions", "title": "<code>get_permissions()</code>  <code>async</code>", "text": "<p>Get system and project level permissions.</p> <p>Attention</p> <p>Requires admin privileges or a privileged Robot account.</p> <p>Returns:</p> Type Description <code>Permissions</code> <p>The system and project level permissions.</p>"}, {"location": "endpoints/ping/", "title": "Ping", "text": ""}, {"location": "endpoints/ping/#harborapi.client.HarborAsyncClient.ping", "title": "<code>ping()</code>  <code>async</code>", "text": "<p>Pings the Harbor server to check if it is alive.</p> <p>Returns:</p> Type Description <code>str</code> <p>Text response from the server.</p>"}, {"location": "endpoints/projectmetadata/", "title": "Project Metadata", "text": ""}, {"location": "endpoints/projectmetadata/#harborapi.client.HarborAsyncClient.get_project_metadata", "title": "<code>get_project_metadata(project_name_or_id)</code>  <code>async</code>", "text": "<p>Get the metadata of a specific project.</p> <p>Parameters:</p> Name Type Description Default <code>project_name_or_id</code> <code>str</code> <p>The name or ID of the project to get metadata from. String arguments are treated as project names. Integer arguments are treated as project IDs.</p> required <p>Returns:</p> Type Description <code>ProjectMetadata</code> <p>The metadata of the project.</p>"}, {"location": "endpoints/projectmetadata/#harborapi.client.HarborAsyncClient.set_project_metadata", "title": "<code>set_project_metadata(project_name_or_id, metadata)</code>  <code>async</code>", "text": "<p>Add metadata for a project.</p> <p>Parameters:</p> Name Type Description Default <code>project_name_or_id</code> <code>str</code> <p>The name or ID of the project to add metadata to. String arguments are treated as project names. Integer arguments are treated as project IDs.</p> required <code>metadata</code> <code>ProjectMetadata</code> <p>The metadata to add to the project. Supports adding arbitrary fields</p> required"}, {"location": "endpoints/projectmetadata/#harborapi.client.HarborAsyncClient.get_project_metadata_entry", "title": "<code>get_project_metadata_entry(project_name_or_id, metadata_name)</code>  <code>async</code>", "text": "<p>Get a specific metadata for a project.</p> <p>Parameters:</p> Name Type Description Default <code>project_name_or_id</code> <code>str</code> <p>The name or ID of the project to get metadata from. String arguments are treated as project names. Integer arguments are treated as project IDs.</p> required <code>metadata_name</code> <code>str</code> <p>The name of the metadata to get.</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The metadata with the given name.</p>"}, {"location": "endpoints/projectmetadata/#harborapi.client.HarborAsyncClient.update_project_metadata_entry", "title": "<code>update_project_metadata_entry(project_name_or_id, metadata_name, metadata)</code>  <code>async</code>", "text": "<p>Update a specific metadata entry for a project.</p> <p>Possibly incorrect implementation</p> <p>It's unclear what the request body should be for this endpoint. The API docs specifies that it should be a dict, but not its structure. We assume the dict is of the form: <pre><code>{\n    \"&lt;metadata_name&gt;\": \"&lt;metadata_value&gt;\",\n}\n</code></pre></p> <p>Validation</p> <p>To validate the metadata client-side before sending it, pass in <code>ProjectMetadata(field_to_set=value).model_dump(exclude_unset=True)</code> as the <code>metadata</code> argument. This will ensure that the metadata is valid according to the current version of the API spec that this client is using.</p> <p>Parameters:</p> Name Type Description Default <code>project_name_or_id</code> <code>str</code> <p>The name or ID of the project to update metadata for. String arguments are treated as project names. Integer arguments are treated as project IDs.</p> required <code>metadata_name</code> <code>str</code> <p>The name of the metadata to update.</p> required <code>metadata</code> <code>Union[ProjectMetadata, Dict[str, Any]]</code> <p>The metadata to update for the project. Can be a ProjectMetadata object with the relevant field set to the desired value, or a dict where the key is the metadata name and the value is the metadata value.</p> required"}, {"location": "endpoints/projectmetadata/#harborapi.client.HarborAsyncClient.delete_project_metadata_entry", "title": "<code>delete_project_metadata_entry(project_name_or_id, metadata_name)</code>  <code>async</code>", "text": "<p>Delete a specific field in a project's metadata.</p> <p>Parameters:</p> Name Type Description Default <code>project_name_or_id</code> <code>str</code> <p>The name or ID of the project to delete metadata for. String arguments are treated as project names. Integer arguments are treated as project IDs.</p> required <code>metadata_name</code> <code>str</code> <p>The name of the metadata field to delete.</p> required"}, {"location": "endpoints/projects/", "title": "Projects", "text": ""}, {"location": "endpoints/projects/#harborapi.client.HarborAsyncClient.get_project", "title": "<code>get_project(project_name_or_id)</code>  <code>async</code>", "text": "<p>Fetch a project given its name or ID.</p> <p>Parameters:</p> Name Type Description Default <code>project_name_or_id</code> <code>Union[str, int]</code> <p>The name or ID of the project String arguments are treated as project names. Integer arguments are treated as project IDs.</p> required <p>Returns:</p> Type Description <code>Project</code> <p>The project with the given name or ID.</p>"}, {"location": "endpoints/projects/#harborapi.client.HarborAsyncClient.create_project", "title": "<code>create_project(project)</code>  <code>async</code>", "text": "<p>Create a new project. Returns location of the created project.</p> <p>Parameters:</p> Name Type Description Default <code>project</code> <code>ProjectReq</code> <p>The project to create</p> required <p>Returns:</p> Type Description <code>str</code> <p>The location of the created project.</p>"}, {"location": "endpoints/projects/#harborapi.client.HarborAsyncClient.update_project", "title": "<code>update_project(project_name_or_id, project)</code>  <code>async</code>", "text": "<p>Update a project.</p> <p>Parameters:</p> Name Type Description Default <code>project_name_or_id</code> <code>Union[str, int]</code> <p>The name or ID of the project String arguments are treated as project names. Integer arguments are treated as project IDs.</p> required <code>project</code> <code>ProjectReq</code> <p>The updated project</p> required"}, {"location": "endpoints/projects/#harborapi.client.HarborAsyncClient.delete_project", "title": "<code>delete_project(project_name_or_id, missing_ok=None)</code>  <code>async</code>", "text": "<p>Delete a project given its name or ID.</p> <p>Parameters:</p> Name Type Description Default <code>project_name_or_id</code> <code>Union[str, int]</code> <p>The name or ID of the project String arguments are treated as project names. Integer arguments are treated as project IDs.</p> required <code>missing_ok</code> <code>Optional[bool]</code> <p>If true, ignore 404 error when the project is not found.</p> <code>None</code>"}, {"location": "endpoints/projects/#harborapi.client.HarborAsyncClient.get_projects", "title": "<code>get_projects(query=None, sort=None, name=None, public=None, owner=None, with_detail=True, page=1, page_size=10, limit=None, **kwargs)</code>  <code>async</code>", "text": "<p>Get all projects, optionally filtered by query.</p> <p>Parameters:</p> Name Type Description Default <code>query</code> <code>Optional[str]</code> <p>Query string to query resources.</p> <p>Supported query patterns are:</p> <pre><code>* exact match(`\"k=v\"`)\n* fuzzy match(`\"k=~v\"`)\n* range(`\"k=[min~max]\"`)\n* list with union releationship(`\"k={v1 v2 v3}\"`)\n* list with intersection relationship(`\"k=(v1 v2 v3)\"`).\n</code></pre> <p>The value of range and list can be:</p> <pre><code>* string(enclosed by `\"` or `'`)\n* integer\n* time(in format `\"2020-04-09 02:36:00\"`)\n</code></pre> <p>All of these query patterns should be put in the query string and separated by <code>\",\"</code>. e.g. <code>\"k1=v1,k2=~v2,k3=[min~max]\"</code></p> <code>None</code> <code>sort</code> <code>Optional[str]</code> <p>The sort order of the projects.</p> <code>None</code> <code>name</code> <code>Optional[str]</code> <p>The name of the project.</p> <code>None</code> <code>public</code> <code>Optional[bool]</code> <p>Only fetch public projects.</p> <code>None</code> <code>owner</code> <code>Optional[str]</code> <p>The owner of the project.</p> <code>None</code> <code>with_detail</code> <code>bool</code> <p>Return detailed information about the project.</p> <code>True</code> <code>page</code> <code>int</code> <p>The page of results to return</p> <code>1</code> <code>page_size</code> <code>int</code> <p>The number of results to return per page</p> <code>10</code> <code>limit</code> <code>Optional[int]</code> <p>The maximum number of results to return</p> <code>None</code> <p>Returns:</p> Type Description <code>List[Project]</code> <p>The list of projects</p>"}, {"location": "endpoints/projects/#harborapi.client.HarborAsyncClient.get_project_logs", "title": "<code>get_project_logs(project_name, query=None, sort=None, page=1, page_size=10, limit=None, **kwargs)</code>  <code>async</code>", "text": "<p>Get the audit logs of the specified project.</p> <p>Parameters:</p> Name Type Description Default <code>project_name</code> <code>str</code> <p>The name of the project</p> required <code>query</code> <code>Optional[str]</code> <p>Query string to filter the logs.</p> <p>Supported query patterns are:</p> <pre><code>* exact match(`\"k=v\"`)\n* fuzzy match(`\"k=~v\"`)\n* range(`\"k=[min~max]\"`)\n* list with union releationship(`\"k={v1 v2 v3}\"`)\n* list with intersection relationship(`\"k=(v1 v2 v3)\"`).\n</code></pre> <p>The value of range and list can be:</p> <pre><code>* string(enclosed by `\"` or `'`)\n* integer\n* time(in format `\"2020-04-09 02:36:00\"`)\n</code></pre> <p>All of these query patterns should be put in the query string and separated by <code>\",\"</code>. e.g. <code>\"k1=v1,k2=~v2,k3=[min~max]\"</code></p> <code>None</code> <code>sort</code> <code>Optional[str]</code> <p>The sort order of the artifacts.</p> <code>None</code> <code>page</code> <code>int</code> <p>The page of results to return</p> <code>1</code> <code>page_size</code> <code>int</code> <p>The number of results to return per page</p> <code>10</code> <code>limit</code> <code>Optional[int]</code> <p>The maximum number of results to return</p> <code>None</code>"}, {"location": "endpoints/projects/#harborapi.client.HarborAsyncClient.get_project_summary", "title": "<code>get_project_summary(project_name_or_id)</code>  <code>async</code>", "text": "<p>Get the summary of a project.</p> <p>Parameters:</p> Name Type Description Default <code>project_name_or_id</code> <code>Union[str, int]</code> <p>The name or ID of the project String arguments are treated as project names. Integer arguments are treated as project IDs.</p> required <p>Returns:</p> Type Description <code>ProjectSummary</code> <p>The summary of a project.</p>"}, {"location": "endpoints/projects/#harborapi.client.HarborAsyncClient.project_exists", "title": "<code>project_exists(project_name)</code>  <code>async</code>", "text": "<p>Check if a project exists.</p> <p>Parameters:</p> Name Type Description Default <code>project_name</code> <code>str</code> <p>The name of the project</p> required"}, {"location": "endpoints/projects/#harborapi.client.HarborAsyncClient.set_project_scanner", "title": "<code>set_project_scanner(project_name_or_id, scanner_uuid)</code>  <code>async</code>", "text": "<p>Set one of the system configured scanner registration as the indepndent scanner of the specified project.</p> <p>Parameters:</p> Name Type Description Default <code>project_name_or_id</code> <code>Union[str, int]</code> <p>The name or ID of the project String arguments are treated as project names. Integer arguments are treated as project IDs.</p> <p>Strings arguments set the <code>\"X-Is-Resource-Name\"</code> header to <code>true</code>.</p> required <code>scanner_uuid</code> <code>str</code> <p>The UUID of the scanner to set as the independent scanner of the project</p> required"}, {"location": "endpoints/projects/#harborapi.client.HarborAsyncClient.get_project_scanner", "title": "<code>get_project_scanner(project_name_or_id)</code>  <code>async</code>", "text": "<p>Get the scanner registration of the specified project. If no scanner registration is configured for the specified project, the system default scanner registration will be returned.</p> <p>Parameters:</p> Name Type Description Default <code>project_name_or_id</code> <code>Union[str, int]</code> <p>The name or ID of the project Integer arguments are treated as project IDs. String arguments are treated as project names. Strings arguments set the <code>\"X-Is-Resource-Name\"</code> header to <code>true</code>.</p> required <p>Returns:</p> Type Description <code>ScannerRegistration</code> <p>The scanner registration of the specified project</p>"}, {"location": "endpoints/projects/#harborapi.client.HarborAsyncClient.get_project_scanner_candidates", "title": "<code>get_project_scanner_candidates(project_name_or_id, query=None, sort=None, page=1, page_size=10, limit=None)</code>  <code>async</code>", "text": "<p>Get the scanner candidates for a project.</p> <p>Parameters:</p> Name Type Description Default <code>project_name_or_id</code> <code>Union[str, int]</code> <p>The name or ID of the project String arguments are treated as project names. Integer arguments are treated as project IDs.</p> required <code>query</code> <code>Optional[str]</code> <p>Query string to query resources.</p> <p>Supported query patterns are:</p> <pre><code>* exact match(`\"k=v\"`)\n* fuzzy match(`\"k=~v\"`)\n* range(`\"k=[min~max]\"`)\n* list with union releationship(`\"k={v1 v2 v3}\"`)\n* list with intersection relationship(`\"k=(v1 v2 v3)\"`).\n</code></pre> <p>The value of range and list can be:</p> <pre><code>* string(enclosed by `\"` or `'`)\n* integer\n* time(in format `\"2020-04-09 02:36:00\"`)\n</code></pre> <p>All of these query patterns should be put in the query string and separated by <code>\",\"</code>. e.g. <code>\"k1=v1,k2=~v2,k3=[min~max]\"</code></p> <code>None</code> <code>sort</code> <code>Optional[str]</code> <p>The sort order of the scanners.</p> <code>None</code> <code>page</code> <code>int</code> <p>The page of results to return</p> <code>1</code> <code>page_size</code> <code>int</code> <p>The number of results to return per page</p> <code>10</code> <code>limit</code> <code>Optional[int]</code> <p>The maximum number of results to return</p> <code>None</code> <p>Returns:</p> Type Description <code>List[ScannerRegistration]</code> <p>The list of scanner candidates</p>"}, {"location": "endpoints/projects/#harborapi.client.HarborAsyncClient.get_project_deletable", "title": "<code>get_project_deletable(project_name_or_id)</code>  <code>async</code>", "text": "<p>Get the deletable status of a project.</p> <p>Parameters:</p> Name Type Description Default <code>project_name_or_id</code> <code>Union[str, int]</code> <p>The name or ID of the project String arguments are treated as project names. Integer arguments are treated as project IDs.</p> required <p>Returns:</p> Type Description <code>ProjectDeletable</code> <p>The deletable status of a project. If <code>.deletable</code> is <code>None</code>, the project is not deletable. This is an implementation detail, and might change in the future.</p>"}, {"location": "endpoints/projects/#harborapi.client.HarborAsyncClient.get_project_member", "title": "<code>get_project_member(project_name_or_id, member_id)</code>  <code>async</code>", "text": "<p>Get a project member given its ID.</p> <p>Parameters:</p> Name Type Description Default <code>project_name_or_id</code> <code>Union[str, int]</code> <p>The name or ID of the project String arguments are treated as project names. Integer arguments are treated as project IDs.</p> required <code>member_id</code> <code>int</code> <p>ID of the project member to fetch.</p> required <p>Returns:</p> Type Description <code>ProjectMemberEntity</code> <p>The member of the project with the given ID.</p>"}, {"location": "endpoints/projects/#harborapi.client.HarborAsyncClient.add_project_member", "title": "<code>add_project_member(project_name_or_id, member)</code>  <code>async</code>", "text": "<p>Warning</p> <p>Advanced users only. This method is not recommended for general use. Only use this method if you need full control over the <code>ProjectMember</code> model that is sent to the API.</p> <p>It is recommended to use <code>add_project_member_{user, group}</code> instead.</p> Description <p>Add a user or group as a member of a project.</p> <p>One of <code>member_group</code> or <code>member_user</code> fields of the <code>ProjectMember</code> instance must be set. A <code>member_user</code> needs to define <code>user_id</code> or <code>username</code>, and adds a user as a member of the project. A <code>member_group</code> needs to define <code>id</code> or <code>ldap_group_dn</code>, and adds a group as a member of the project.</p> <p>Note</p> <p>The description above is the author of this library's interpretation of the API documentation. See below for the original description.</p> Original Description from API <p>Create project member relationship, the member can be one of the user_member and group_member, The user_member need to specify user_id or username. If the user already exist in harbor DB, specify the user_id, If does not exist in harbor DB, it will SearchAndOnBoard the user. The group_member need to specify id or ldap_group_dn. If the group already exist in harbor DB. specify the user group's id, If does not exist, it will SearchAndOnBoard the group.</p> <p>Parameters:</p> Name Type Description Default <code>project_name_or_id</code> <code>Union[str, int]</code> <p>The name or ID of the project String arguments are treated as project names. Integer arguments are treated as project IDs.</p> required <code>member</code> <code>ProjectMember</code> <p>The user or group to add as a member of the project.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The location of the new member.</p>"}, {"location": "endpoints/projects/#harborapi.client.HarborAsyncClient.add_project_member_user", "title": "<code>add_project_member_user(project_name_or_id, username_or_id, role_id)</code>  <code>async</code>", "text": "<p>Add a user as a member of a project.</p> <p>Prefer user IDs for existing users.</p> <p>Parameters:</p> Name Type Description Default <code>project_name_or_id</code> <code>Union[str, int]</code> <p>The name or ID of the project String arguments are treated as project names. Integer arguments are treated as project IDs.</p> required <code>username_or_id</code> <code>Union[str, int]</code> <p>The name or ID of the user String arguments are treated as user names. Integer arguments are treated as user IDs.</p> required <code>role_id</code> <code>int</code> <p>The role of the user. Set <code>role_id</code> to 1 for projectAdmin, 2 for developer, 3 for guest, 4 for maintainer.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The URL of the new project member</p>"}, {"location": "endpoints/projects/#harborapi.client.HarborAsyncClient.add_project_member_group", "title": "<code>add_project_member_group(project_name_or_id, ldap_group_dn_or_id, role_id)</code>  <code>async</code>", "text": "<p>Add a group as a member of a project.</p> <p>Prefer group IDs for existing groups.</p> <p>Parameters:</p> Name Type Description Default <code>project_name_or_id</code> <code>Union[str, int]</code> <p>The name or ID of the project String arguments are treated as project names. Integer arguments are treated as project IDs.</p> required <code>ldap_group_dn_or_id</code> <code>Union[str, int]</code> <p>The LDAP group DN or ID of the group. String arguments are treated as LDAP group DNs. Integer arguments are treated as group IDs.</p> required <code>role_id</code> <code>int</code> <p>The role the users in the group will have. Set <code>role_id</code> to 1 for projectAdmin, 2 for developer, 3 for guest, 4 for maintainer.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The URL of the new project member</p>"}, {"location": "endpoints/projects/#harborapi.client.HarborAsyncClient.update_project_member_role", "title": "<code>update_project_member_role(project_name_or_id, member_id, role)</code>  <code>async</code>", "text": "<p>Update the role of a project member.</p> <p>Parameters:</p> Name Type Description Default <code>project_name_or_id</code> <code>Union[str, int]</code> <p>The name or ID of the project String arguments are treated as project names. Integer arguments are treated as project IDs.</p> required <code>member_id</code> <code>int</code> <p>The ID of the member to update</p> required <code>role</code> <code>Union[RoleRequest, int]</code> <p>The new role of the member. Set <code>role_id</code> to 1 for projectAdmin, 2 for developer, 3 for guest, 4 for maintainer. Can be specified as an integer value or a <code>RoleRequest</code> object.</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; await client.update_project_member_role(\"myproject\", 1, role=1)\n&gt;&gt;&gt; await client.update_project_member_role(\"myproject\", 1, role=RoleRequest(role_id=1))\n</code></pre>"}, {"location": "endpoints/projects/#harborapi.client.HarborAsyncClient.remove_project_member", "title": "<code>remove_project_member(project_name_or_id, member_id)</code>  <code>async</code>", "text": "<p>Remove a member from a project.</p> <p>Parameters:</p> Name Type Description Default <code>project_name_or_id</code> <code>Union[str, int]</code> <p>The name or ID of the project String arguments are treated as project names. Integer arguments are treated as project IDs.</p> required <code>member_id</code> <code>int</code> <p>The ID of the member to remove. This is a member ID, not a user or group ID.</p> required"}, {"location": "endpoints/projects/#harborapi.client.HarborAsyncClient.get_project_members", "title": "<code>get_project_members(project_name_or_id, entity_name=None, page=1, page_size=10, limit=None)</code>  <code>async</code>", "text": "<p>Parameters:</p> Name Type Description Default <code>project_name_or_id</code> <code>Union[str, int]</code> <p>Name or ID of project to list members for. String arguments are treated as project names. Integer arguments are treated as project IDs.</p> required <code>entity_name</code> <code>Optional[str]</code> <p>Entity name to search for.</p> <code>None</code> <code>page</code> <code>int</code> <p>The page number to start iterating from, by default 1</p> <code>1</code> <code>page_size</code> <code>int</code> <p>Number of results to retrieve per page, by default 10</p> <code>10</code> <code>limit</code> <code>Optional[int]</code> <p>The maximum number of webhook jobs to return.</p> <code>None</code> <p>Returns:</p> Type Description <code>List[ProjectMemberEntity]</code> <p>A list of project members.</p>"}, {"location": "endpoints/purge/", "title": "Purge", "text": ""}, {"location": "endpoints/purge/#harborapi.client.HarborAsyncClient.get_purge_job", "title": "<code>get_purge_job(purge_id)</code>  <code>async</code>", "text": "<p>Get purge job status.</p> <p>Parameters:</p> Name Type Description Default <code>purge_id</code> <code>int</code> <p>The ID of the purge job to get status for.</p> required <p>Returns:</p> Type Description <code>ExecHistory</code> <p>The audit log rotation job status.</p>"}, {"location": "endpoints/purge/#harborapi.client.HarborAsyncClient.stop_purge_job", "title": "<code>stop_purge_job(purge_id)</code>  <code>async</code>", "text": "<p>Stop a purge job.</p> <p>Parameters:</p> Name Type Description Default <code>purge_id</code> <code>int</code> <p>The ID of the purge job to stop.</p> required"}, {"location": "endpoints/purge/#harborapi.client.HarborAsyncClient.get_purge_job_log", "title": "<code>get_purge_job_log(purge_id)</code>  <code>async</code>", "text": "<p>Get the the log of a purge job.</p> <p>Parameters:</p> Name Type Description Default <code>purge_id</code> <code>int</code> <p>The ID of the log rotation to get.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The log rotation log</p>"}, {"location": "endpoints/purge/#harborapi.client.HarborAsyncClient.get_purge_job_schedule", "title": "<code>get_purge_job_schedule()</code>  <code>async</code>", "text": "<p>Get the current purge job schedule.</p> <p>Returns:</p> Type Description <code>ExecHistory</code> <p>The purge audit log schedule.</p>"}, {"location": "endpoints/purge/#harborapi.client.HarborAsyncClient.create_purge_job_schedule", "title": "<code>create_purge_job_schedule(schedule)</code>  <code>async</code>", "text": "<p>Create a purge job schedule.</p> <p>Examples:</p> <p>Create a new schedule based on the official sample values for a schedule:</p> <pre><code>from harborapi.models import Schedule, ScheduleObj\n\nSchedule(\n    parameters={\n        \"audit_retention_hour\": 168,\n        \"dry_run\": True,\n        \"include_operations\": \"create,delete,pull\",\n    },\n    schedule=ScheduleObj(\n        cron=\"0 0 * * *\",\n        type=\"Hourly\",\n    ),\n)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>schedule</code> <code>Schedule</code> <p>The new schedule to use.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The location of the new purge job schedule.</p>"}, {"location": "endpoints/purge/#harborapi.client.HarborAsyncClient.update_purge_job_schedule", "title": "<code>update_purge_job_schedule(schedule)</code>  <code>async</code>", "text": "<p>Update the schedule for a purge job.</p> <p>Parameters:</p> Name Type Description Default <code>schedule</code> <code>Schedule</code> <p>The new schedule to use.</p> required"}, {"location": "endpoints/purge/#harborapi.client.HarborAsyncClient.get_purge_job_history", "title": "<code>get_purge_job_history(query=None, sort=None, page=1, page_size=10, limit=None)</code>  <code>async</code>", "text": "<p>Get previous purge job results.</p> <p>Parameters:</p> Name Type Description Default <code>page</code> <code>int</code> <p>The page number to start iterating from, by default 1</p> <code>1</code> <code>page_size</code> <code>int</code> <p>Number of results to retrieve per page, by default 10</p> <code>10</code> <code>sort</code> <code>Optional[str]</code> <p>Comma-separated string of fields to sort by. Prefix with <code>-</code> to sort descending. E.g. <code>\"update_time,-event_type\"</code></p> <code>None</code> <code>query</code> <code>Optional[str]</code> <p>Comma-separated string of query patterns to filter by. The query pattern is in the format of <code>\"k=v\"</code>.</p> <p>The value of query can be:</p> <pre><code>* string(enclosed by `\"` or `'`)\n* integer\n* time(in format `\"2020-04-09 02:36:00\"`)\n</code></pre> <p>All of these query patterns should be put in the query string and separated by <code>\",\"</code>. e.g. <code>\"k1=v1,k2=~v2,k3=[min~max]\"</code></p> <code>None</code> <code>limit</code> <code>Optional[int]</code> <p>The maximum number of purge jobs to return.</p> <code>None</code> <p>Returns:</p> Type Description <code>List[ExecHistory]</code> <p>A list of purge jobs jobs matching the query.</p>"}, {"location": "endpoints/quota/", "title": "Quota", "text": ""}, {"location": "endpoints/quota/#harborapi.client.HarborAsyncClient.get_quota", "title": "<code>get_quota(id)</code>  <code>async</code>", "text": "<p>Get a quota by id.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>The id of the quota to get.</p> required <p>Returns:</p> Type Description <code>Quota</code> <p>The quota</p>"}, {"location": "endpoints/quota/#harborapi.client.HarborAsyncClient.update_quota", "title": "<code>update_quota(id, quota)</code>  <code>async</code>", "text": "<p>Update a quota.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>The id of the quota to update.</p> required <code>quota</code> <code>QuotaUpdateReq</code> <p>The new quota values. <code>QuotaUpdateReq.hard</code> allows assignment of any attribute with an <code>int</code> value.</p> <p>Example: <pre><code>QuotaUpdateReq(\n    hard={\"storage\": 100000, \"other_property\": 1234}\n)\n</code></pre></p> required"}, {"location": "endpoints/quota/#harborapi.client.HarborAsyncClient.get_quotas", "title": "<code>get_quotas(reference=None, reference_id=None, sort=None, page=1, page_size=10, limit=None, **kwargs)</code>  <code>async</code>", "text": "<p>Get quotas.</p> <p>Parameters:</p> Name Type Description Default <code>reference</code> <code>str</code> <p>The reference type of the quota. TODO: document what these values can be.</p> <code>None</code> <code>reference_id</code> <code>str</code> <p>The reference id of the quota</p> <code>None</code> <code>sort</code> <code>str</code> <p>Sort method. Valid values include:</p> <pre><code>- `\"hard.resource_name\"`\n- `\"-hard.resource_name\"`\n- `\"used.resource_name\"`\n- `\"-used.resource_name\"`\n</code></pre> <p><code>-</code> denotes descending order</p> <p><code>resource_name</code> should be the real resource name of the quota</p> <code>None</code> <code>page</code> <code>int</code> <p>The page number to retrieve resources from.</p> <code>1</code> <code>page_size</code> <code>int</code> <p>The number of resources to retrieve per page.</p> <code>10</code> <code>limit</code> <code>int</code> <p>The maximum number of quotas to retrieve.</p> <code>None</code> <p>Returns:</p> Type Description <code>List[Quota]</code> <p>The quotas</p>"}, {"location": "endpoints/registries/", "title": "Registries", "text": ""}, {"location": "endpoints/registries/#harborapi.client.HarborAsyncClient.get_registry", "title": "<code>get_registry(id)</code>  <code>async</code>", "text": "<p>Get a registry.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>The ID of the registry</p> required <p>Returns:</p> Type Description <code>Registry</code> <p>The registry</p>"}, {"location": "endpoints/registries/#harborapi.client.HarborAsyncClient.create_registry", "title": "<code>create_registry(registry)</code>  <code>async</code>", "text": "<p>Create a new registry.</p> <p>Parameters:</p> Name Type Description Default <code>registry</code> <code>Registry</code> <p>The new registry values.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The location of the created registry.</p>"}, {"location": "endpoints/registries/#harborapi.client.HarborAsyncClient.update_registry", "title": "<code>update_registry(id, registry)</code>  <code>async</code>", "text": "<p>Update a registry.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>The ID of the registry</p> required <code>registry</code> <code>RegistryUpdate</code> <p>The updated registry values.</p> required"}, {"location": "endpoints/registries/#harborapi.client.HarborAsyncClient.delete_registry", "title": "<code>delete_registry(id, missing_ok=None)</code>  <code>async</code>", "text": "<p>Delete a registry.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>The ID of the registry</p> required <code>missing_ok</code> <code>Optional[bool]</code> <p>DEPRECATED: If True, don't raise an exception if the registry doesn't exist.</p> <code>None</code>"}, {"location": "endpoints/registries/#harborapi.client.HarborAsyncClient.get_registry_info", "title": "<code>get_registry_info(id)</code>  <code>async</code>", "text": "<p>Get the info of a registry.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>The ID of the registry</p> required <p>Returns:</p> Type Description <code>RegistryInfo</code> <p>The info of a registry</p>"}, {"location": "endpoints/registries/#harborapi.client.HarborAsyncClient.get_registry_adapters", "title": "<code>get_registry_adapters(limit=None)</code>  <code>async</code>", "text": "<p>Get the list of available registry adapters.</p> <p>Parameters:</p> Name Type Description Default <code>limit</code> <code>Optional[int]</code> <p>The maximum number of results to return.</p> <code>None</code> <p>Returns:</p> Type Description <code>List[str]</code> <p>The list of available registry adapters</p>"}, {"location": "endpoints/registries/#harborapi.client.HarborAsyncClient.get_registry_providers", "title": "<code>get_registry_providers()</code>  <code>async</code>", "text": "<p>Get all registered registry provider information.</p> <p>Returns:</p> Type Description <code>RegistryProviders</code> <p>An overview of the registered registry providers.</p>"}, {"location": "endpoints/registries/#harborapi.client.HarborAsyncClient.check_registry_status", "title": "<code>check_registry_status(ping)</code>  <code>async</code>", "text": "<p>Check the status of the registry.</p> <p>Parameters:</p> Name Type Description Default <code>ping</code> <code>RegistryPing</code> <p>The ping request</p> required"}, {"location": "endpoints/registries/#harborapi.client.HarborAsyncClient.get_registries", "title": "<code>get_registries(query=None, sort=None, page=1, page_size=10, limit=None, name=None, **kwargs)</code>  <code>async</code>", "text": "<p>Get all registries.</p> <p>Parameters:</p> Name Type Description Default <code>query</code> <code>Optional[str]</code> <p>A query string to filter the registries.</p> <p>Supported query patterns are:</p> <pre><code>* exact match(`\"k=v\"`)\n* fuzzy match(`\"k=~v\"`)\n* range(`\"k=[min~max]\"`)\n* list with union releationship(`\"k={v1 v2 v3}\"`)\n* list with intersection relationship(`\"k=(v1 v2 v3)\"`).\n</code></pre> <p>The value of range and list can be:</p> <pre><code>* string(enclosed by `\"` or `'`)\n* integer\n* time(in format `\"2020-04-09 02:36:00\"`)\n</code></pre> <p>All of these query patterns should be put in the query string and separated by <code>\",\"</code>. e.g. <code>\"k1=v1,k2=~v2,k3=[min~max]\"</code></p> <code>None</code> <code>sort</code> <code>Optional[str]</code> <p>The sort order of the artifacts.</p> <code>None</code> <code>page</code> <code>int</code> <p>The page of results to return</p> <code>1</code> <code>page_size</code> <code>int</code> <p>The number of results to return per page</p> <code>10</code> <code>limit</code> <code>Optional[int]</code> <p>The maximum number of results to return. If not specified, all</p> <code>None</code> <code>name</code> <code>Optional[str]</code> <p>The name of the registry (deprecated, use <code>query</code> instead)</p> <code>None</code> <p>Returns:</p> Type Description <code>List[Registry]</code> <p>A list of Registry objects.</p>"}, {"location": "endpoints/replication/", "title": "Replication", "text": ""}, {"location": "endpoints/replication/#harborapi.client.HarborAsyncClient.get_replication", "title": "<code>get_replication(execution_id)</code>  <code>async</code>", "text": "<p>Get a replication execution by ID.</p> <p>Parameters:</p> Name Type Description Default <code>execution_id</code> <code>int</code> <p>The ID of the replication execution to get.</p> required <p>Returns:</p> Type Description <code>ReplicationExecution</code> <p>The replication execution.</p>"}, {"location": "endpoints/replication/#harborapi.client.HarborAsyncClient.start_replication", "title": "<code>start_replication(policy_id)</code>  <code>async</code>", "text": "<p>Start a replication execution.</p> <p>Parameters:</p> Name Type Description Default <code>policy_id</code> <code>int</code> <p>The ID of the policy to start an execution for.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The location of the replication execution.</p>"}, {"location": "endpoints/replication/#harborapi.client.HarborAsyncClient.stop_replication", "title": "<code>stop_replication(execution_id)</code>  <code>async</code>", "text": "<p>Stop a replication execution</p> <p>Parameters:</p> Name Type Description Default <code>execution_id</code> <code>int</code> <p>The execution ID to stop.</p> required"}, {"location": "endpoints/replication/#harborapi.client.HarborAsyncClient.get_replications", "title": "<code>get_replications(sort=None, policy_id=None, status=None, trigger=None, page=1, page_size=10, limit=None)</code>  <code>async</code>", "text": "<p>Get a list of replication executions.</p> <p>Parameters:</p> Name Type Description Default <code>sort</code> <code>Optional[str]</code> <p>The sort order of the results.</p> <code>None</code> <code>policy_id</code> <code>Optional[int]</code> <p>The ID of the policy to filter by.</p> <code>None</code> <code>status</code> <code>Optional[str]</code> <p>The status of the executions to filter by.</p> <code>None</code> <code>trigger</code> <code>Optional[str]</code> <p>The trigger of the executions to filter by.</p> <code>None</code> <code>page</code> <code>int</code> <p>The page of results to return.</p> <code>1</code> <code>page_size</code> <code>int</code> <p>The number of results to return per page.</p> <code>10</code> <code>limit</code> <code>Optional[int]</code> <p>The maximum number of results to return.</p> <code>None</code> <p>Returns:</p> Type Description <code>List[ReplicationExecution]</code> <p>The list of replication executions.</p>"}, {"location": "endpoints/replication/#harborapi.client.HarborAsyncClient.get_replication_tasks", "title": "<code>get_replication_tasks(execution_id, status=None, resource_type=None, sort=None, page=1, page_size=10, limit=None)</code>  <code>async</code>", "text": "<p>Get a list of replication tasks for a specific execution.</p> <p>Parameters:</p> Name Type Description Default <code>execution_id</code> <code>int</code> <p>The ID of the replication execution to get tasks for.</p> required <code>sort</code> <code>Optional[str]</code> <p>The sort order of the results.</p> <code>None</code> <code>page</code> <code>int</code> <p>The page of results to return.</p> <code>1</code> <code>page_size</code> <code>int</code> <p>The number of results to return per page.</p> <code>10</code> <code>status</code> <code>Optional[str]</code> <p>The status of the tasks to filter by.</p> <code>None</code> <code>resource_type</code> <code>Optional[str]</code> <p>The resource type of the tasks to filter by.</p> <code>None</code> <p>Returns:</p> Type Description <code>List[ReplicationTask]</code> <p>The list of replication tasks.</p>"}, {"location": "endpoints/replication/#harborapi.client.HarborAsyncClient.get_replication_task_log", "title": "<code>get_replication_task_log(execution_id, task_id)</code>  <code>async</code>", "text": "<p>Get the log of a replication task.</p> <p>Parameters:</p> Name Type Description Default <code>execution_id</code> <code>int</code> <p>The ID of the execution the task belongs to.</p> required <code>task_id</code> <code>int</code> <p>The ID of the task to get the log for.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The log of the task.</p>"}, {"location": "endpoints/replication/#harborapi.client.HarborAsyncClient.get_replication_policy", "title": "<code>get_replication_policy(policy_id)</code>  <code>async</code>", "text": "<p>Get a specific replication policy.</p> <p>Parameters:</p> Name Type Description Default <code>policy_id</code> <code>int</code> <p>The ID of the policy to get.</p> required <p>Returns:</p> Type Description <code>ReplicationPolicy</code> <p>The replication policy.</p>"}, {"location": "endpoints/replication/#harborapi.client.HarborAsyncClient.create_replication_policy", "title": "<code>create_replication_policy(policy)</code>  <code>async</code>", "text": "<p>Create a replication policy.</p> <p>Parameters:</p> Name Type Description Default <code>policy</code> <code>ReplicationPolicy</code> <p>The policy to create.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The location of the created policy.</p>"}, {"location": "endpoints/replication/#harborapi.client.HarborAsyncClient.update_replication_policy", "title": "<code>update_replication_policy(policy_id, policy)</code>  <code>async</code>", "text": "<p>Update a replication policy.</p> <p>Parameters:</p> Name Type Description Default <code>policy_id</code> <code>int</code> <p>The ID of the policy to update.</p> required <code>policy</code> <code>ReplicationPolicy</code> <p>The updated policy.</p> required"}, {"location": "endpoints/replication/#harborapi.client.HarborAsyncClient.delete_replication_policy", "title": "<code>delete_replication_policy(policy_id)</code>  <code>async</code>", "text": "<p>Delete a replication policy.</p> <p>Parameters:</p> Name Type Description Default <code>policy_id</code> <code>int</code> <p>The ID of the policy to delete.</p> required"}, {"location": "endpoints/replication/#harborapi.client.HarborAsyncClient.get_replication_policies", "title": "<code>get_replication_policies(query=None, sort=None, page=1, page_size=10, name=None, limit=None)</code>  <code>async</code>", "text": "<p>Get a list of replication policies.</p> <p>Parameters:</p> Name Type Description Default <code>query</code> <code>Optional[str]</code> <p>Query string to filter the logs.</p> <p>Supported query patterns are:</p> <pre><code>* exact match(`\"k=v\"`)\n* fuzzy match(`\"k=~v\"`)\n* range(`\"k=[min~max]\"`)\n* list with union releationship(`\"k={v1 v2 v3}\"`)\n* list with intersection relationship(`\"k=(v1 v2 v3)\"`).\n</code></pre> <p>The value of range and list can be:</p> <pre><code>* string(enclosed by `\"` or `'`)\n* integer\n* time(in format `\"2020-04-09 02:36:00\"`)\n</code></pre> <p>All of these query patterns should be put in the query string and separated by <code>\",\"</code>. e.g. <code>\"k1=v1,k2=~v2,k3=[min~max]\"</code></p> <code>None</code> <code>sort</code> <code>Optional[str]</code> <p>The sort order of the results.</p> <code>None</code> <code>page</code> <code>int</code> <p>The page of results to return.</p> <code>1</code> <code>page_size</code> <code>int</code> <p>The number of results to return per page.</p> <code>10</code> <code>name</code> <code>Optional[str]</code> <p>(DEPRECATED: use <code>query</code>) The name of the policy to filter by.</p> <code>None</code> <code>limit</code> <code>Optional[int]</code> <p>The maximum number of results to return.</p> <code>None</code> <p>Returns:</p> Type Description <code>List[ReplicationPolicy]</code> <p>The list of replication policies.</p>"}, {"location": "endpoints/repositories/", "title": "Repositories", "text": ""}, {"location": "endpoints/repositories/#harborapi.client.HarborAsyncClient.get_repository", "title": "<code>get_repository(project_name, repository_name)</code>  <code>async</code>", "text": "<p>Get a repository.</p> <p>Parameters:</p> Name Type Description Default <code>project_name</code> <code>str</code> <p>The name of the project the repository belongs to.</p> required <code>repository_name</code> <code>str</code> <p>The name of the repository.</p> required <p>Returns:</p> Type Description <code>Repository</code> <p>The repository.</p>"}, {"location": "endpoints/repositories/#harborapi.client.HarborAsyncClient.update_repository", "title": "<code>update_repository(project_name, repository_name, repository)</code>  <code>async</code>", "text": "<p>Update a repository.</p> <p>Parameters:</p> Name Type Description Default <code>project_name</code> <code>str</code> <p>The name of the project the repository belongs to.</p> required <code>repository_name</code> <code>str</code> <p>The name of the repository.</p> required <code>repository</code> <code>Repository</code> <p>The new repository values.</p> required"}, {"location": "endpoints/repositories/#harborapi.client.HarborAsyncClient.delete_repository", "title": "<code>delete_repository(project_name, repository_name, missing_ok=None)</code>  <code>async</code>", "text": "<p>Delete a repository.</p> <p>Parameters:</p> Name Type Description Default <code>project_name</code> <code>str</code> <p>The name of the project the repository belongs to.</p> required <code>repository_name</code> <code>str</code> <p>The name of the repository.</p> required <code>missing_ok</code> <code>Optional[bool]</code> <p>DEPRECATED: If true, Do not raise an error if the repository does not exist.</p> <code>None</code>"}, {"location": "endpoints/repositories/#harborapi.client.HarborAsyncClient.get_repositories", "title": "<code>get_repositories(project_name=None, query=None, sort=None, page=1, page_size=10, limit=None, **kwargs)</code>  <code>async</code>", "text": "<p>Get a list of all repositories, optionally only in a specific project.</p> <p>Parameters:</p> Name Type Description Default <code>project_name</code> <code>Optional[str]</code> <p>The name of the project to retrieve repositories from. If None, retrieve repositories from all projects.</p> <code>None</code> <code>query</code> <code>str</code> <p>The query string to filter the repositories.</p> <p>Supported query patterns are:</p> <pre><code>* exact match(`\"k=v\"`)\n* fuzzy match(`\"k=~v\"`)\n* range(`\"k=[min~max]\"`)\n* list with union releationship(`\"k={v1 v2 v3}\"`)\n* list with intersection relationship(`\"k=(v1 v2 v3)\"`).\n</code></pre> <p>The value of range and list can be:</p> <pre><code>* string(enclosed by `\"` or `'`)\n* integer\n* time(in format `\"2020-04-09 02:36:00\"`)\n</code></pre> <p>All of these query patterns should be put in the query string and separated by <code>\",\"</code>. e.g. <code>\"k1=v1,k2=~v2,k3=[min~max]\"</code></p> <code>None</code> <code>sort</code> <code>str</code> <p>The sort method. TODO: add boilerplate sort documentation</p> <code>None</code> <code>page</code> <code>int</code> <p>The page of results to return</p> <code>1</code> <code>page_size</code> <code>int</code> <p>The number of results to return per page</p> <code>10</code> <code>limit</code> <code>Optional[int]</code> <p>The maximum number of results to return.</p> <code>None</code> <p>Returns:</p> Type Description <code>List[Repository]</code> <p>A list of repositories matching the query.</p>"}, {"location": "endpoints/retention/", "title": "Retention", "text": ""}, {"location": "endpoints/retention/#harborapi.client.HarborAsyncClient.get_project_retention_id", "title": "<code>get_project_retention_id(project_name_or_id)</code>  <code>async</code>", "text": "<p>Get the retention policy ID for a project.</p> <p>API Spec Inconsistency</p> <p>The retention policy ID field for a project is marked as a string in the API spec, but the retention endpoints expect an integer ID. This method will always return an integer. If the project has a retention ID that cannot be converted to int, the method raises a HarborAPIException</p> <p>Parameters:</p> Name Type Description Default <code>project_name_or_id</code> <code>Union[str, int]</code> <p>The name or ID of the project. String arguments are treated as project names. Integer arguments are treated as project IDs.</p> required <p>Returns:</p> Type Description <code>int</code> <p>The retention policy ID for the project.</p> <p>Raises:</p> Type Description <code>NotFound</code> <p>If the project does not have a retention policy ID.</p>"}, {"location": "endpoints/retention/#harborapi.client.HarborAsyncClient.get_retention_policy", "title": "<code>get_retention_policy(retention_id)</code>  <code>async</code>", "text": "<p>Get a retention policy.</p> <p>Parameters:</p> Name Type Description Default <code>retention_id</code> <code>int</code> <p>The ID of the retention policy.</p> required <p>Returns:</p> Type Description <code>RetentionPolicy</code> <p>The retention policy.</p>"}, {"location": "endpoints/retention/#harborapi.client.HarborAsyncClient.create_retention_policy", "title": "<code>create_retention_policy(policy)</code>  <code>async</code>", "text": "<p>Creates a new retention policy. Returns location of the created policy.</p> <p>Parameters:</p> Name Type Description Default <code>policy</code> <code>RetentionPolicy</code> <p>The retention policy to create.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The location of the created retention policy.</p>"}, {"location": "endpoints/retention/#harborapi.client.HarborAsyncClient.update_retention_policy", "title": "<code>update_retention_policy(retention_id, retention)</code>  <code>async</code>", "text": "<p>Update a retention policy.</p> <p>Parameters:</p> Name Type Description Default <code>retention_id</code> <code>int</code> <p>The ID of the retention policy.</p> required <code>retention</code> <code>RetentionPolicy</code> <p>The retention policy to update.</p> required"}, {"location": "endpoints/retention/#harborapi.client.HarborAsyncClient.delete_retention_policy", "title": "<code>delete_retention_policy(retention_id)</code>  <code>async</code>", "text": "<p>Delete a retention policy.</p> <p>Danger</p> <p>As of Harbor v2.8.0-89ef156d, using this API endpoint will cause a project to break. The endpoint deletes the retention policy for the project but doesn't update the project metadata to reflect this change. This results in an internal server error when attempting to access the project in the Web UI. Additionally, the metadata field will prevent creating a new retention policy for the project in the Web UI. This bug likely affects all versions of Harbor.</p> <p>Delete the <code>\"retention_id\"</code> metadata field to fix the project:</p> <p><pre><code>await client.delete_project_metadata_entry(\"&lt;project&gt;\", \"retention_id\")\n</code></pre> In general, it is recommended to clear the retention rules for a project instead of deleting the policy itself.</p> <p>Parameters:</p> Name Type Description Default <code>retention_id</code> <code>int</code> <p>The ID of the retention policy.</p> required"}, {"location": "endpoints/retention/#harborapi.client.HarborAsyncClient.get_retention_tasks", "title": "<code>get_retention_tasks(retention_id, execution_id, page=None, page_size=None, limit=None)</code>  <code>async</code>", "text": "<p>Get the retention tasks.</p> <p>Parameters:</p> Name Type Description Default <code>retention_id</code> <code>int</code> <p>The ID of the retention policy.</p> required <code>execution_id</code> <code>int</code> <p>The ID of the retention execution.</p> required <code>page</code> <code>Optional[int]</code> <p>The page number.</p> <code>None</code> <code>page_size</code> <code>Optional[int]</code> <p>The page size.</p> <code>None</code> <code>limit</code> <code>Optional[int]</code> <p>The maximum number of tasks to return.</p> <code>None</code> <p>Returns:</p> Type Description <code>List[RetentionExecutionTask]</code> <p>The retention tasks.</p>"}, {"location": "endpoints/retention/#harborapi.client.HarborAsyncClient.get_retention_metadata", "title": "<code>get_retention_metadata()</code>  <code>async</code>", "text": "<p>Get the retention metadata.</p> <p>Returns:</p> Type Description <code>RetentionMetadata</code> <p>The retention metadata.</p>"}, {"location": "endpoints/retention/#harborapi.client.HarborAsyncClient.get_retention_execution_task_log", "title": "<code>get_retention_execution_task_log(retention_id, execution_id, task_id)</code>  <code>async</code>", "text": "<p>Get the log for a retention execution task.</p> <p>Parameters:</p> Name Type Description Default <code>retention_id</code> <code>int</code> <p>The id of the retention policy.</p> required <code>execution_id</code> <code>int</code> <p>The id of the retention execution.</p> required <code>task_id</code> <code>int</code> <p>The id of the retention task.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The log for the task.</p>"}, {"location": "endpoints/retention/#harborapi.client.HarborAsyncClient.get_retention_executions", "title": "<code>get_retention_executions(retention_id, page=1, page_size=10, limit=None)</code>  <code>async</code>", "text": "<p>Get the retention executions for a policy.</p> <p>Parameters:</p> Name Type Description Default <code>retention_id</code> <code>int</code> <p>The id of the retention policy.</p> required <code>page</code> <code>int</code> <p>The page number to return.</p> <code>1</code> <code>page_size</code> <code>int</code> <p>The number of items to return per page.</p> <code>10</code> <code>limit</code> <code>Optional[int]</code> <p>The maximum number of items to return.</p> <code>None</code> <p>Returns:</p> Type Description <code>List[RetentionExecution]</code> <p>The retention executions for the policy.</p>"}, {"location": "endpoints/retention/#harborapi.client.HarborAsyncClient.start_retention_execution", "title": "<code>start_retention_execution(retention_id, dry_run=False)</code>  <code>async</code>", "text": "<p>Start a retention job for a policy.</p> <p>Parameters:</p> Name Type Description Default <code>retention_id</code> <code>int</code> <p>The id of the retention policy.</p> required <code>dry_run</code> <code>bool</code> <p>Whether to run the retention job in in dry-run mode.</p> <code>False</code> <p>Returns:</p> Type Description <code>str</code> <p>The id of the execution.</p>"}, {"location": "endpoints/retention/#harborapi.client.HarborAsyncClient.stop_retention_execution", "title": "<code>stop_retention_execution(retention_id, execution_id)</code>  <code>async</code>", "text": "<p>Stop a retention execution.</p> <p>Parameters:</p> Name Type Description Default <code>retention_id</code> <code>int</code> <p>The id of the retention policy.</p> required <code>execution_id</code> <code>int</code> <p>The id of the retention execution.</p> required"}, {"location": "endpoints/robots/", "title": "Robots", "text": ""}, {"location": "endpoints/robots/#harborapi.client.HarborAsyncClient.get_robot", "title": "<code>get_robot(robot_id)</code>  <code>async</code>", "text": "<p>Fetch a robot account by its ID.</p> <p>Parameters:</p> Name Type Description Default <code>robot_id</code> <code>int</code> <p>The ID of the robot account to get.</p> required <p>Returns:</p> Type Description <code>Robot</code> <p>Information about the robot account.</p>"}, {"location": "endpoints/robots/#harborapi.client.HarborAsyncClient.create_robot", "title": "<code>create_robot(robot, path=None, overwrite=False)</code>  <code>async</code>", "text": "<p>Create a new robot account.</p> <p>Attention</p> <p>This action requires a sysadmin account to perform.</p> <p>Parameters:</p> Name Type Description Default <code>robot</code> <code>RobotCreate</code> <p>The definition for the robot account to create.</p> required <code>path</code> <code>Optional[Union[str, Path]]</code> <p>Optional path to save the robot credentials to.</p> <code>None</code> <code>overwrite</code> <code>bool</code> <p>If True, overwrite the existing credentials file. Has no effect if <code>path</code> is <code>None</code>.</p> <code>False</code> <p>Returns:</p> Type Description <code>RobotCreated</code> <p>Information about the created robot account.</p>"}, {"location": "endpoints/robots/#harborapi.client.HarborAsyncClient.update_robot", "title": "<code>update_robot(robot_id, robot)</code>  <code>async</code>", "text": "<p>Update a robot account.</p> <p>Parameters:</p> Name Type Description Default <code>robot_id</code> <code>int</code> <p>The ID of the robot account to update.</p> required <code>robot</code> <code>Robot</code> <p>The new definition for the robot account.</p> required"}, {"location": "endpoints/robots/#harborapi.client.HarborAsyncClient.refresh_robot_secret", "title": "<code>refresh_robot_secret(robot_id, secret)</code>  <code>async</code>", "text": "<p>Refresh the secret of a robot account.</p> <p>Parameters:</p> Name Type Description Default <code>robot_id</code> <code>int</code> <p>The ID of the robot account to refresh.</p> required <code>secret</code> <code>str</code> <p>The secret of the robot account.</p> required <p>Returns:</p> Type Description <code>RobotSec</code> <p>The updated Robot secret.</p>"}, {"location": "endpoints/robots/#harborapi.client.HarborAsyncClient.delete_robot", "title": "<code>delete_robot(robot_id, missing_ok=None)</code>  <code>async</code>", "text": "<p>Delete a robot account.</p> <p>Parameters:</p> Name Type Description Default <code>robot_id</code> <code>int</code> <p>The ID of the robot account to delete.</p> required <code>missing_ok</code> <code>Optional[bool]</code> <p>DEPRECATED: Do not raise an error if the robot account does not exist.</p> <code>None</code>"}, {"location": "endpoints/robots/#harborapi.client.HarborAsyncClient.get_robots", "title": "<code>get_robots(query=None, sort=None, page=1, page_size=10, limit=None)</code>  <code>async</code>", "text": "<p>Get all robot accounts, optionally filtered by query.</p> <p>Parameters:</p> Name Type Description Default <code>query</code> <code>Optional[str]</code> <p>A query string to filter the resources.</p> <p>Except the basic properties, the other supported queries includes:</p> <pre><code>* `\"tags=*\"` to list only tagged resources\n* `\"tags=nil\"` to list only untagged resources\n* `\"tags=~v\"` to list resources whose tag fuzzy matches \"v\"\n* `\"tags=v\"` to list artifact whose tag exactly matches \"v\"\n* `\"labels=(id1, id2)\"` to list resources that both labels with id1 and id2 are added to\n</code></pre> <p>The value of range and list can be:</p> <pre><code>* string(enclosed by `\"` or `'`)\n* integer\n* time(in format `\"2020-04-09 02:36:00\"`)\n</code></pre> <p>All of these query patterns should be put in the query string and separated by <code>\",\"</code>. e.g. <code>\"k1=v1,k2=~v2,k3=[min~max]\"</code></p> <code>None</code> <code>sort</code> <code>Optional[str]</code> <p>The sort order of the artifacts.</p> <code>None</code> <code>page</code> <code>int</code> <p>The page of results to return</p> <code>1</code> <code>page_size</code> <code>int</code> <p>The number of results to return per page</p> <code>10</code> <code>limit</code> <code>Optional[int]</code> <p>The maximum number of results to return.</p> <code>None</code> <p>Returns:</p> Type Description <code>List[Robot]</code> <p>A list of registered robot accounts matching the query.</p>"}, {"location": "endpoints/robotv1/", "title": "Robot V1", "text": ""}, {"location": "endpoints/robotv1/#harborapi.client.HarborAsyncClient.get_robots_v1", "title": "<code>get_robots_v1(project_name_or_id, query=None, sort=None, page=1, page_size=10, limit=None)</code>  <code>async</code>", "text": "<p>Get all robot v1 accounts for the specified project.</p> <p>Parameters:</p> Name Type Description Default <code>project_name_or_id</code> <code>Union[str, int]</code> <p>The name or ID of the project. String arguments are treated as project names. Integer arguments are treated as project IDs.</p> required <code>query</code> <code>Optional[str]</code> <p>A query string to filter the robots</p> <code>None</code> <code>sort</code> <code>Optional[str]</code> <p>The sort order of the robots</p> <code>None</code> <code>page</code> <code>int</code> <p>The page of results to return</p> <code>1</code> <code>page_size</code> <code>int</code> <p>The number of results to return per page</p> <code>10</code> <code>limit</code> <code>Optional[int]</code> <p>The maximum number of results to return</p> <code>None</code> <p>Returns:</p> Type Description <code>List[Robot]</code> <p>The robot v1 accounts for the project.</p>"}, {"location": "endpoints/robotv1/#harborapi.client.HarborAsyncClient.create_robot_v1", "title": "<code>create_robot_v1(project_name_or_id, robot)</code>  <code>async</code>", "text": "<p>Create a robot v1 account for the specified project.</p> <p>Parameters:</p> Name Type Description Default <code>project_name_or_id</code> <code>Union[str, int]</code> <p>The name or ID of the project. String arguments are treated as project names. Integer arguments are treated as project IDs.</p> required <code>robot</code> <code>RobotCreateV1</code> <p>The robot v1 account to create.</p> required <p>Returns:</p> Type Description <code>RobotCreated</code> <p>The created robot v1 account.</p>"}, {"location": "endpoints/robotv1/#harborapi.client.HarborAsyncClient.get_robot_v1", "title": "<code>get_robot_v1(project_name_or_id, robot_id)</code>  <code>async</code>", "text": "<p>Get a robot v1 account for the specified project.</p> <p>Parameters:</p> Name Type Description Default <code>project_name_or_id</code> <code>Union[str, int]</code> <p>The name or ID of the project. String arguments are treated as project names. Integer arguments are treated as project IDs.</p> required <code>robot_id</code> <code>int</code> <p>The ID of the robot v1 account to get.</p> required <p>Returns:</p> Type Description <code>Robot</code> <p>The robot v1 account.</p>"}, {"location": "endpoints/robotv1/#harborapi.client.HarborAsyncClient.update_robot_v1", "title": "<code>update_robot_v1(project_name_or_id, robot_id, robot)</code>  <code>async</code>", "text": "<p>Update a robot v1 account for the specified project.</p> <p>Parameters:</p> Name Type Description Default <code>project_name_or_id</code> <code>Union[str, int]</code> <p>The name or ID of the project. String arguments are treated as project names. Integer arguments are treated as project IDs.</p> required <code>robot_id</code> <code>int</code> <p>The ID of the robot v1 account to update.</p> required <code>robot</code> <code>Robot</code> <p>The updated robot v1 account.</p> required"}, {"location": "endpoints/robotv1/#harborapi.client.HarborAsyncClient.delete_robot_v1", "title": "<code>delete_robot_v1(project_name_or_id, robot_id)</code>  <code>async</code>", "text": "<p>Delete a robot v1 account for the specified project.</p> <p>Parameters:</p> Name Type Description Default <code>project_name_or_id</code> <code>Union[str, int]</code> <p>The name or ID of the project. String arguments are treated as project names. Integer arguments are treated as project IDs.</p> required <code>robot_id</code> <code>int</code> <p>The ID of the robot v1 account to delete.</p> required"}, {"location": "endpoints/scan/", "title": "Scan", "text": ""}, {"location": "endpoints/scan/#harborapi.client.HarborAsyncClient.scan_artifact", "title": "<code>scan_artifact(project_name, repository_name, reference)</code>  <code>async</code>", "text": "<p>Scan an artifact.</p> <p>Parameters:</p> Name Type Description Default <code>project_name</code> <code>str</code> <p>The name of the project</p> required <code>repository_name</code> <code>str</code> <p>The name of the repository</p> required <code>reference</code> <code>str</code> <p>The reference of the artifact, can be digest or tag</p> required"}, {"location": "endpoints/scan/#harborapi.client.HarborAsyncClient.stop_artifact_scan", "title": "<code>stop_artifact_scan(project_name, repository_name, reference)</code>  <code>async</code>", "text": "<p>Stop a scan for a particular artifact.</p> <p>Parameters:</p> Name Type Description Default <code>project_name</code> <code>str</code> <p>The name of the project</p> required <code>repository_name</code> <code>str</code> <p>The name of the repository</p> required <code>reference</code> <code>str</code> <p>The reference of the artifact, can be digest or tag</p> required"}, {"location": "endpoints/scan/#harborapi.client.HarborAsyncClient.get_artifact_scan_report_log", "title": "<code>get_artifact_scan_report_log(project_name, repository_name, reference, report_id)</code>  <code>async</code>", "text": "<p>Get the log of a scan report.</p> <p>Parameters:</p> Name Type Description Default <code>project_name</code> <code>str</code> <p>The name of the project</p> required <code>repository_name</code> <code>str</code> <p>The name of the repository</p> required <code>reference</code> <code>str</code> <p>The reference of the artifact, can be digest or tag</p> required <code>report_id</code> <code>str</code> <p>The ID of the scan report</p> required <p>Returns:</p> Type Description <code>str</code> <p>The log of a scan report</p>"}, {"location": "endpoints/scanall/", "title": "Scan All", "text": ""}, {"location": "endpoints/scanall/#harborapi.client.HarborAsyncClient.get_scan_all_schedule", "title": "<code>get_scan_all_schedule()</code>  <code>async</code>", "text": "<p>Get the schedule for a Scan All job.</p> <p>Returns:</p> Type Description <code>Schedule</code> <p>The schedule for the Scan All job.</p>"}, {"location": "endpoints/scanall/#harborapi.client.HarborAsyncClient.create_scan_all_schedule", "title": "<code>create_scan_all_schedule(schedule)</code>  <code>async</code>", "text": "<p>Create a new scan all job schedule. Returns location of the created schedule.</p> <p>Parameters:</p> Name Type Description Default <code>schedule</code> <code>Schedule</code> <p>The schedule to create</p> required <p>Returns:</p> Type Description <code>str</code> <p>The location of the created schedule</p>"}, {"location": "endpoints/scanall/#harborapi.client.HarborAsyncClient.update_scan_all_schedule", "title": "<code>update_scan_all_schedule(schedule)</code>  <code>async</code>", "text": "<p>Update the schedule for a Scan All job.</p> <p>Parameters:</p> Name Type Description Default <code>schedule</code> <code>Schedule</code> <p>The new schedule for the Scan All job</p> required"}, {"location": "endpoints/scanall/#harborapi.client.HarborAsyncClient.get_scan_all_metrics", "title": "<code>get_scan_all_metrics()</code>  <code>async</code>", "text": "<p>Get metrics for a Scan All job.</p> <p>Returns:</p> Type Description <code>Stats</code> <p>The metrics for the Scan All job.</p>"}, {"location": "endpoints/scanall/#harborapi.client.HarborAsyncClient.stop_scan_all_job", "title": "<code>stop_scan_all_job()</code>  <code>async</code>", "text": "<p>Stop a Scan All job.</p>"}, {"location": "endpoints/scanexport/", "title": "Scan Data Export", "text": ""}, {"location": "endpoints/scanexport/#harborapi.client.HarborAsyncClient.get_scan_export", "title": "<code>get_scan_export(execution_id)</code>  <code>async</code>", "text": "<p>Get the specific scan data export execution.</p> <p>Parameters:</p> Name Type Description Default <code>execution_id</code> <code>int</code> <p>The ID of the scan data export execution to get.</p> required <p>Returns:</p> Type Description <code>ScanDataExportExecution</code> <p>The scan data export execution.</p>"}, {"location": "endpoints/scanexport/#harborapi.client.HarborAsyncClient.get_scan_exports", "title": "<code>get_scan_exports()</code>  <code>async</code>", "text": "<p>Get a list of scan data export execution jobs for the current user.</p> <p>Returns:</p> Type Description <code>ScanDataExportExecutionList</code> <p>A list of scan data export execution jobs for the current user.</p>"}, {"location": "endpoints/scanexport/#harborapi.client.HarborAsyncClient.export_scan_data", "title": "<code>export_scan_data(criteria, scan_type='application/vnd.security.vulnerability.report; version=1.1')</code>  <code>async</code>", "text": "<p>Start an export scan data job for selected projects.</p> <p>Parameters:</p> Name Type Description Default <code>criteria</code> <code>ScanDataExportRequest</code> <p>The criteria to use for the scan data export. Unset fields are not considered for the criteria. Read the field descriptions carefully, because it is a HOT MESS!</p> required <code>scan_type</code> <code>str</code> <p>The type of scan data to export. UNDOCUMENTED IN SPEC. Some info can be found here: https://goharbor.io/blog/harbor-2.6/#:~:text=Accessing%20CSV%20Export%20Programmatically. The default value should be sufficient for the main use case (exporting the vulnerability report).</p> <code>'application/vnd.security.vulnerability.report; version=1.1'</code> <p>Returns:</p> Type Description <code>ScanDataExportJob</code> <p>The ID of the scan data export job.</p>"}, {"location": "endpoints/scanexport/#harborapi.client.HarborAsyncClient.download_scan_export", "title": "<code>download_scan_export(execution_id)</code>  <code>async</code>", "text": "<p>Download the scan data export file.</p> <p>Parameters:</p> Name Type Description Default <code>execution_id</code> <code>int</code> <p>The ID of the scan data export execution to download.</p> required <p>Returns:</p> Type Description <code>FileResponse</code> <p>The scan data export file.</p>"}, {"location": "endpoints/scanners/", "title": "Scanners", "text": ""}, {"location": "endpoints/scanners/#harborapi.client.HarborAsyncClient.get_scanner", "title": "<code>get_scanner(registration_id)</code>  <code>async</code>", "text": "<p>Fetch a scanner by ID.</p> <p>Parameters:</p> Name Type Description Default <code>registration_id</code> <code>Union[int, str]</code> <p>The ID of the scanner to fetch.</p> required <p>Returns:</p> Type Description <code>ScannerRegistration</code> <p>The scanner.</p>"}, {"location": "endpoints/scanners/#harborapi.client.HarborAsyncClient.create_scanner", "title": "<code>create_scanner(scanner)</code>  <code>async</code>", "text": "<p>Creates a new scanner. Returns location of the created scanner.</p> <p>Parameters:</p> Name Type Description Default <code>scanner</code> <code>ScannerRegistrationReq</code> <p>The scanner to create.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The location of the created scanner.</p>"}, {"location": "endpoints/scanners/#harborapi.client.HarborAsyncClient.update_scanner", "title": "<code>update_scanner(registration_id, scanner)</code>  <code>async</code>", "text": "<p>Update a scanner.</p> <p>Parameters:</p> Name Type Description Default <code>registration_id</code> <code>Union[int, str]</code> <p>The ID of the scanner to update.</p> required <code>scanner</code> <code>ScannerRegistrationReq</code> <p>The updated scanner definition.</p> required"}, {"location": "endpoints/scanners/#harborapi.client.HarborAsyncClient.delete_scanner", "title": "<code>delete_scanner(registration_id, missing_ok=None)</code>  <code>async</code>", "text": "<p>Delete a scanner by ID.</p> <p>Parameters:</p> Name Type Description Default <code>registration_id</code> <code>Union[int, str]</code> <p>The ID of the scanner to delete.</p> required <code>missing_ok</code> <code>Optional[bool]</code> <p>DEPRECATED: Whether to ignore 404 error when deleting the scanner.</p> <code>None</code> <p>Returns:</p> Type Description <code>Optional[ScannerRegistration]</code> <p>The scanner, or None if the scanner is not found and <code>missing_ok</code> is True.</p> <p>Raises:</p> Type Description <code>HarborAPIException</code> <p>Successful deletion request that returns an empty response.</p>"}, {"location": "endpoints/scanners/#harborapi.client.HarborAsyncClient.get_scanners", "title": "<code>get_scanners(query=None, sort=None, page=1, page_size=10, limit=None)</code>  <code>async</code>", "text": "<p>Get a list of scanners.</p> <p>Parameters:</p> Name Type Description Default <code>query</code> <code>Optional[str]</code> <p>A query string to filter the scanners.</p> <p>Supported query patterns are:</p> <pre><code>* exact match(`\"k=v\"`)\n* fuzzy match(`\"k=~v\"`)\n* range(`\"k=[min~max]\"`)\n* list with union releationship(`\"k={v1 v2 v3}\"`)\n* list with intersection relationship(`\"k=(v1 v2 v3)\"`).\n</code></pre> <p>The value of range and list can be:</p> <pre><code>* string(enclosed by `\"` or `'`)\n* integer\n* time(in format `\"2020-04-09 02:36:00\"`)\n</code></pre> <p>All of these query patterns should be put in the query string and separated by <code>\",\"</code>. e.g. <code>\"k1=v1,k2=~v2,k3=[min~max]\"</code></p> <code>None</code> <code>sort</code> <code>Optional[str]</code> <p>The sort order of the scanners.</p> <code>None</code> <code>page</code> <code>int</code> <p>The page of results to return</p> <code>1</code> <code>page_size</code> <code>int</code> <p>The number of results to return per page</p> <code>10</code> <code>limit</code> <code>Optional[int]</code> <p>The maximum number of results to return</p> <code>None</code> <p>Returns:</p> Type Description <code>List[ScannerRegistration]</code> <p>description</p>"}, {"location": "endpoints/scanners/#harborapi.client.HarborAsyncClient.set_default_scanner", "title": "<code>set_default_scanner(registration_id, is_default=True)</code>  <code>async</code>", "text": "<p>Set a scanner as the default scanner.</p> <p>Parameters:</p> Name Type Description Default <code>registration_id</code> <code>Union[int, str]</code> <p>The ID of the scanner to set as the default.</p> required <code>is_default</code> <code>bool</code> <p>Whether to set the scanner as the default, by default <code>True</code>. Set to <code>False</code> to unset the scanner as the default.</p> <code>True</code>"}, {"location": "endpoints/scanners/#harborapi.client.HarborAsyncClient.ping_scanner_adapter", "title": "<code>ping_scanner_adapter(settings)</code>  <code>async</code>", "text": "<p>Ping a scanner adapter.</p> <p>Parameters:</p> Name Type Description Default <code>settings</code> <code>ScannerRegistrationSettings</code> <p>The settings of the scanner adapter.</p> required"}, {"location": "endpoints/search/", "title": "Search", "text": ""}, {"location": "endpoints/search/#harborapi.client.HarborAsyncClient.search", "title": "<code>search(query)</code>  <code>async</code>", "text": "<p>Search for information about the projects and repositories the user has access to.</p> <p>Parameters:</p> Name Type Description Default <code>query</code> <code>str</code> <p>Project and/or repository name to search for.</p> required <p>Returns:</p> Type Description <code>Search</code> <p>The search results.</p>"}, {"location": "endpoints/statistics/", "title": "Statistics", "text": ""}, {"location": "endpoints/statistics/#harborapi.client.HarborAsyncClient.get_statistics", "title": "<code>get_statistics()</code>  <code>async</code>", "text": "<p>Get statistics on the Harbor server.</p> <p>Returns:</p> Type Description <code>Statistic</code> <p>The statistics on the Harbor server</p>"}, {"location": "endpoints/systeminfo/", "title": "System Info", "text": ""}, {"location": "endpoints/systeminfo/#harborapi.client.HarborAsyncClient.get_system_info", "title": "<code>get_system_info()</code>  <code>async</code>", "text": "<p>Get general info about the system.</p> <p>Returns:</p> Type Description <code>GeneralInfo</code> <p>The general info about the system</p>"}, {"location": "endpoints/systeminfo/#harborapi.client.HarborAsyncClient.get_system_volume_info", "title": "<code>get_system_volume_info()</code>  <code>async</code>", "text": "<p>Get info about the system's volumes.</p> <p>Returns:</p> Type Description <code>SystemInfo</code> <p>Information about the system's volumes.</p>"}, {"location": "endpoints/systeminfo/#harborapi.client.HarborAsyncClient.get_system_certificate", "title": "<code>get_system_certificate()</code>  <code>async</code>", "text": "<p>Get the certificate for the system as a bytes object. Raises 404 error if the certificate file can't be found. Check the error message for more details.</p> <p>Returns:</p> Type Description <code>FileResponse</code> <p>The file response containing the certificate.</p>"}, {"location": "endpoints/usergroups/", "title": "User Groups", "text": ""}, {"location": "endpoints/usergroups/#harborapi.client.HarborAsyncClient.get_usergroup", "title": "<code>get_usergroup(group_id)</code>  <code>async</code>", "text": "<p>Get a user group by ID.</p> <p>Parameters:</p> Name Type Description Default <code>group_id</code> <code>int</code> <p>The group ID to get.</p> required <p>Returns:</p> Type Description <code>UserGroup</code> <p>The user group.</p>"}, {"location": "endpoints/usergroups/#harborapi.client.HarborAsyncClient.create_usergroup", "title": "<code>create_usergroup(usergroup)</code>  <code>async</code>", "text": "<p>Create a new user group. Returns location of the created user group.</p> <p>Parameters:</p> Name Type Description Default <code>usergroup</code> <code>UserGroup</code> <p>The user group to create</p> required <p>Returns:</p> Type Description <code>str</code> <p>The location of the created user group</p>"}, {"location": "endpoints/usergroups/#harborapi.client.HarborAsyncClient.update_usergroup", "title": "<code>update_usergroup(group_id, usergroup)</code>  <code>async</code>", "text": "<p>Update group information.</p> <p>Parameters:</p> Name Type Description Default <code>group_id</code> <code>int</code> <p>The group ID to update.</p> required <code>usergroup</code> <code>UserGroup</code> <p>The new definition for the usergroup.</p> required"}, {"location": "endpoints/usergroups/#harborapi.client.HarborAsyncClient.delete_usergroup", "title": "<code>delete_usergroup(group_id, missing_ok=None)</code>  <code>async</code>", "text": "<p>Delete a user group.</p> <p>Parameters:</p> Name Type Description Default <code>group_id</code> <code>int</code> <p>The group ID to delete.</p> required <code>missing_ok</code> <code>Optional[bool]</code> <p>DEPRECATED: If <code>True</code>, Do not raise an error if the group does not exist.</p> <code>None</code>"}, {"location": "endpoints/usergroups/#harborapi.client.HarborAsyncClient.get_usergroups", "title": "<code>get_usergroups(group_name=None, ldap_group_dn=None, page=1, page_size=10, limit=None)</code>  <code>async</code>", "text": "<p>Get all user groups.</p> <p>Parameters:</p> Name Type Description Default <code>group_name</code> <code>Optional[str]</code> <p>The group name to search for (fuzzy matching).</p> <code>None</code> <code>ldap_group_dn</code> <code>Optional[str]</code> <p>The LDAP group DN to search with.</p> <code>None</code> <code>page</code> <code>int</code> <p>The page of results to return</p> <code>1</code> <code>page_size</code> <code>int</code> <p>The number of results to return per page</p> <code>10</code> <code>limit</code> <code>Optional[int]</code> <p>The maximum number of results to return</p> <code>None</code> <p>Returns:</p> Type Description <code>List[UserGroup]</code> <p>List of user groups.</p>"}, {"location": "endpoints/usergroups/#harborapi.client.HarborAsyncClient.search_usergroups", "title": "<code>search_usergroups(group_name, page=1, page_size=10, limit=None)</code>  <code>async</code>", "text": "<p>Search for user groups by group name.</p> <p>Parameters:</p> Name Type Description Default <code>group_name</code> <code>str</code> <p>The group name to search for.</p> required <code>page</code> <code>int</code> <p>The page of results to return</p> <code>1</code> <code>page_size</code> <code>int</code> <p>The number of results to return per page</p> <code>10</code> <code>limit</code> <code>Optional[int]</code> <p>The maximum number of results to return.</p> <code>None</code> <p>Returns:</p> Type Description <code>List[UserGroupSearchItem]</code> <p>List of user groups.</p>"}, {"location": "endpoints/users/", "title": "Users", "text": ""}, {"location": "endpoints/users/#harborapi.client.HarborAsyncClient.get_user", "title": "<code>get_user(user_id)</code>  <code>async</code>", "text": "<p>Get information about a user.</p> <p>Parameters:</p> Name Type Description Default <code>user_id</code> <code>int</code> <p>The ID of the user to get information about</p> required <p>Returns:</p> Type Description <code>UserResp</code> <p>Information about the user.</p>"}, {"location": "endpoints/users/#harborapi.client.HarborAsyncClient.get_user_by_username", "title": "<code>get_user_by_username(username)</code>  <code>async</code>", "text": "<p>Get information about a user by username.</p> <p>This is a convenience method for searching for a user by username and then getting the full user information with its ID.</p> <p>See:</p> <ul> <li>search_users_by_username</li> <li>get_user</li> </ul> <p>Parameters:</p> Name Type Description Default <code>username</code> <code>str</code> <p>The username of the user to get information about</p> required <p>Returns:</p> Type Description <code>UserResp</code> <p>Information about the user.</p>"}, {"location": "endpoints/users/#harborapi.client.HarborAsyncClient.create_user", "title": "<code>create_user(user)</code>  <code>async</code>", "text": "<p>Create a new user. Can only be used when the authentication mode is for local DB, when self registration is disabled.</p> <p>Parameters:</p> Name Type Description Default <code>user</code> <code>UserCreationReq</code> <p>The user to create</p> required <p>Returns:</p> Type Description <code>str</code> <p>The location of the created user</p>"}, {"location": "endpoints/users/#harborapi.client.HarborAsyncClient.update_user", "title": "<code>update_user(user_id, user)</code>  <code>async</code>", "text": "<p>Update a user's profile.</p> <p>Parameters:</p> Name Type Description Default <code>user_id</code> <code>int</code> <p>The ID of the user to update</p> required <code>user</code> <code>UserProfile</code> <p>The user profile to update</p> required"}, {"location": "endpoints/users/#harborapi.client.HarborAsyncClient.delete_user", "title": "<code>delete_user(user_id, missing_ok=None)</code>  <code>async</code>", "text": "<p>Delete a user.</p> <p>Parameters:</p> Name Type Description Default <code>user_id</code> <code>int</code> <p>The ID of the user to delete</p> required <code>missing_ok</code> <code>Optional[bool]</code> <p>DEPRECATED: Do not raise an error if the user does not exist.</p> <code>None</code>"}, {"location": "endpoints/users/#harborapi.client.HarborAsyncClient.get_users", "title": "<code>get_users(query=None, sort=None, page=1, page_size=10, limit=None)</code>  <code>async</code>", "text": "<p>Get all users.</p> <p>Parameters:</p> Name Type Description Default <code>query</code> <code>Optional[str]</code> <p>Query string to filter the users.</p> <p>Supported query patterns are:</p> <pre><code>* exact match(`\"k=v\"`)\n* fuzzy match(`\"k=~v\"`)\n* range(`\"k=[min~max]\"`)\n* list with union releationship(`\"k={v1 v2 v3}\"`)\n* list with intersection relationship(`\"k=(v1 v2 v3)\"`).\n</code></pre> <p>The value of range and list can be:</p> <pre><code>* string(enclosed by `\"` or `'`)\n* integer\n* time(in format `\"2020-04-09 02:36:00\"`)\n</code></pre> <p>All of these query patterns should be put in the query string and separated by <code>\",\"</code>. e.g. <code>\"k1=v1,k2=~v2,k3=[min~max]\"</code></p> <code>None</code> <code>sort</code> <code>Optional[str]</code> <p>Comma-separated string of fields to sort by. Prefix with <code>-</code> to sort descending. E.g. <code>\"username,-email\"</code></p> <code>None</code> <code>page</code> <code>int</code> <p>The page number to retrieve</p> <code>1</code> <code>page_size</code> <code>int</code> <p>The number of users to retrieve per page</p> <code>10</code> <code>limit</code> <code>Optional[int]</code> <p>The maximum number of users to retrieve.</p> <code>None</code> <p>Returns:</p> Type Description <code>List[UserResp]</code> <p>A list of users.</p>"}, {"location": "endpoints/users/#harborapi.client.HarborAsyncClient.search_users_by_username", "title": "<code>search_users_by_username(username, page=1, page_size=100, limit=None, **kwargs)</code>  <code>async</code>", "text": "<p>Search for users by username.</p> <p>Parameters:</p> Name Type Description Default <code>username</code> <code>str</code> <p>The username to search for</p> required <code>page</code> <code>int</code> <p>The page of results to return</p> <code>1</code> <code>page_size</code> <code>int</code> <p>The number of results to return per page</p> <code>100</code> <code>limit</code> <code>Optional[int]</code> <p>The maximum number of results to return.</p> <code>None</code>"}, {"location": "endpoints/users/#harborapi.client.HarborAsyncClient.set_user_admin", "title": "<code>set_user_admin(user_id, is_admin)</code>  <code>async</code>", "text": "<p>Set a user's admin status.</p> <p>Parameters:</p> Name Type Description Default <code>user_id</code> <code>int</code> <p>The ID of the user to set the admin status for</p> required <code>is_admin</code> <code>bool</code> <p>Whether the user should be an admin or not</p> required"}, {"location": "endpoints/users/#harborapi.client.HarborAsyncClient.set_user_password", "title": "<code>set_user_password(user_id, new_password, old_password=None)</code>  <code>async</code>", "text": "<p>Set a user's password. Admin users can change any user's password. Non-admin users can only change their own password.</p> <p>Parameters:</p> Name Type Description Default <code>user_id</code> <code>int</code> <p>The ID of the user to set the password for</p> required <code>new_password</code> <code>str</code> <p>The new password to set for the user</p> required <code>old_password</code> <code>str</code> <p>The old password for the user, not required if API user is admin.</p> <code>None</code> <p>Raises:</p> Type Description <code>BadRequest</code> <p>Raised for any of the following reasons:</p> <pre><code>* Invalid user ID\n* Password does not meet requirement\n* Old password is incorrect\n</code></pre>"}, {"location": "endpoints/users/#harborapi.client.HarborAsyncClient.set_user_cli_secret", "title": "<code>set_user_cli_secret(user_id, secret)</code>  <code>async</code>", "text": "<p>Set the CLI secret for a user.</p> <p>Parameters:</p> Name Type Description Default <code>user_id</code> <code>int</code> <p>The ID of the user to set the secret for</p> required <code>secret</code> <code>str</code> <p>The secret to set for the user</p> required <p>Raises:</p> Type Description <code>BadRequest</code> <p>Invalid user ID. Or user is not onboarded via OIDC authentication. Or the secret does not meet the standard. (This is a Harbor API implementation detail.)</p>"}, {"location": "endpoints/users/#harborapi.client.HarborAsyncClient.get_current_user", "title": "<code>get_current_user()</code>  <code>async</code>", "text": "<p>Get information about the current user.</p> <p>Returns:</p> Type Description <code>UserResp</code> <p>Information about the current user.</p>"}, {"location": "endpoints/users/#harborapi.client.HarborAsyncClient.get_current_user_permissions", "title": "<code>get_current_user_permissions(scope=None, relative=False)</code>  <code>async</code>", "text": "<p>Get current user permissions.</p> <p>Parameters:</p> Name Type Description Default <code>scope</code> <code>Optional[str]</code> <p>The scope for the permission</p> <code>None</code> <code>relative</code> <code>bool</code> <p>Display resource paths relative to the scope. Has no effect if <code>scope</code> is not specified</p> <code>False</code> <p>Returns:</p> Type Description <code>List[Permission]</code> <p>A list of Permission objects for the current user.</p>"}, {"location": "endpoints/webhooks/", "title": "Webhooks", "text": ""}, {"location": "endpoints/webhooks/#harborapi.client.HarborAsyncClient.get_webhook_jobs", "title": "<code>get_webhook_jobs(project_name_or_id, policy_id, status=None, query=None, sort=None, page=1, page_size=10, limit=None)</code>  <code>async</code>", "text": "<p>List project webhook jobs for a given policy.</p> <p>Parameters:</p> Name Type Description Default <code>project_name_or_id</code> <code>Union[str, int]</code> <p>The name or ID of the project to list webhook jobs for. String arguments are treated as project names. Integer arguments are treated as project IDs.</p> required <code>policy_id</code> <code>int</code> <p>The ID of the policy to list webhook jobs for.</p> required <code>status</code> <code>Optional[List[str]]</code> <p>A list of job statuses to filter by.</p> <code>None</code> <code>query</code> <code>Optional[str]</code> <p>Query string to filter the logs.</p> <p>Supported query patterns are:</p> <pre><code>* exact match(`\"k=v\"`)\n* fuzzy match(`\"k=~v\"`)\n* range(`\"k=[min~max]\"`)\n* list with union releationship(`\"k={v1 v2 v3}\"`)\n* list with intersection relationship(`\"k=(v1 v2 v3)\"`).\n</code></pre> <p>The value of range and list can be:</p> <pre><code>* string(enclosed by `\"` or `'`)\n* integer\n* time(in format `\"2020-04-09 02:36:00\"`)\n</code></pre> <p>All of these query patterns should be put in the query string and separated by <code>\",\"</code>. e.g. <code>\"k1=v1,k2=~v2,k3=[min~max]\"</code></p> <code>None</code> <code>sort</code> <code>Optional[str]</code> <p>Comma-separated string of fields to sort by. Prefix with <code>-</code> to sort descending. E.g. <code>\"update_time,-event_type\"</code></p> <code>None</code> <code>page</code> <code>int</code> <p>The page number to start iterating from, by default 1</p> <code>1</code> <code>page_size</code> <code>int</code> <p>Number of results to retrieve per page, by default 10</p> <code>10</code> <code>limit</code> <code>Optional[int]</code> <p>The maximum number of webhook jobs to return.</p> <code>None</code> <p>Returns:</p> Type Description <code>List[WebhookJob]</code> <p>A list of webhook jobs matching the query.</p>"}, {"location": "endpoints/webhooks/#harborapi.client.HarborAsyncClient.get_webhook_policies", "title": "<code>get_webhook_policies(project_name_or_id, query=None, sort=None, page=1, page_size=10, limit=None)</code>  <code>async</code>", "text": ""}, {"location": "endpoints/webhooks/#harborapi.client.HarborAsyncClient.get_webhook_policy", "title": "<code>get_webhook_policy(project_name_or_id, webhook_policy_id)</code>  <code>async</code>", "text": "<p>Get webhook policy of a project.</p> <p>Parameters:</p> Name Type Description Default <code>project_name_or_id</code> <code>Union[str, int]</code> <p>The name or ID of the project String arguments are treated as project names. Integer arguments are treated as project IDs.</p> required <code>webhook_policy_id</code> <code>int</code> <p>The ID of the webhook policy</p> required <p>Returns:</p> Type Description <code>WebhookPolicy</code> <p>The webhook policy of a project.</p>"}, {"location": "endpoints/webhooks/#harborapi.client.HarborAsyncClient.create_webhook_policy", "title": "<code>create_webhook_policy(project_name_or_id, policy)</code>  <code>async</code>", "text": "<p>Create webhook policy of a project.</p> <p>Parameters:</p> Name Type Description Default <code>project_name_or_id</code> <code>Union[str, int]</code> <p>The name or ID of the project String arguments are treated as project names. Integer arguments are treated as project IDs.</p> required <code>policy</code> <code>WebhookPolicy</code> <p>The webhook policy to create</p> required <p>Returns:</p> Type Description <code>str</code> <p>The location of the created webhook policy</p>"}, {"location": "endpoints/webhooks/#harborapi.client.HarborAsyncClient.update_webhook_policy", "title": "<code>update_webhook_policy(project_name_or_id, webhook_policy_id, policy)</code>  <code>async</code>", "text": "<p>Update webhook policy of a project.</p> <p>Parameters:</p> Name Type Description Default <code>project_name_or_id</code> <code>Union[str, int]</code> <p>The name or ID of the project String arguments are treated as project names. Integer arguments are treated as project IDs.</p> required <code>webhook_policy_id</code> <code>int</code> <p>The ID of the webhook policy</p> required <code>policy</code> <code>WebhookPolicy</code> <p>The new webhook policy definition.</p> required"}, {"location": "endpoints/webhooks/#harborapi.client.HarborAsyncClient.delete_webhook_policy", "title": "<code>delete_webhook_policy(project_name_or_id, webhook_policy_id)</code>  <code>async</code>", "text": "<p>Delete webhook policy of a project.</p> <p>Parameters:</p> Name Type Description Default <code>project_name_or_id</code> <code>Union[str, int]</code> <p>The name or ID of the project String arguments are treated as project names. Integer arguments are treated as project IDs.</p> required <code>webhook_policy_id</code> <code>int</code> <p>The ID of the webhook policy</p> required"}, {"location": "endpoints/webhooks/#harborapi.client.HarborAsyncClient.get_webhook_policy_last_trigger", "title": "<code>get_webhook_policy_last_trigger(project_name_or_id, limit=None)</code>  <code>async</code>", "text": "<p>Get a list of the last webhook policy triggers.</p> <p>Parameters:</p> Name Type Description Default <code>project_name_or_id</code> <code>Union[str, int]</code> <p>The name or ID of the project String arguments are treated as project names. Integer arguments are treated as project IDs.</p> required <code>limit</code> <code>Optional[int]</code> <p>The maximum number of triggers to return.</p> <code>None</code> <p>Returns:</p> Type Description <code>List[WebhookLastTrigger]</code> <p>A list of the last webhook policy triggers.</p>"}, {"location": "endpoints/webhooks/#harborapi.client.HarborAsyncClient.get_webhook_supported_events", "title": "<code>get_webhook_supported_events(project_name_or_id)</code>  <code>async</code>", "text": "<p>Get supported event types and notify types of webhooks for a project.</p> <p>Parameters:</p> Name Type Description Default <code>project_name_or_id</code> <code>Union[str, int]</code> <p>The name or ID of the project String arguments are treated as project names. Integer arguments are treated as project IDs.</p> required <p>Returns:</p> Type Description <code>SupportedWebhookEventTypes</code> <p>The supported event types and notify types of webhooks for a project.</p>"}, {"location": "recipes/", "title": "Recipes", "text": "<p>This section contains recipes for common tasks across several Harbor API endpoints. They demonstrate how to create, read, update and delete resources.</p> <p>If a specific method is not documented in a recipe here, you can likely deduce how to use it by checking a recipe that performs a similar task and looking at the documentation for the method in the Endpoints Overview.</p>"}, {"location": "recipes/artifacts/delete-artifact/", "title": "Delete artifact", "text": "<p>We can delete an artifact using <code>delete_artifact</code>. The method takes a project name, repository name, and a tag or digest.</p> <pre><code>import asyncio\nfrom harborapi import HarborAsyncClient\n\nclient = HarborAsyncClient(...)\n\n\nasync def main() -&gt; None:\n    await client.delete_artifact(\"library\", \"hello-world\", \"latest\")\n    # or\n    await client.delete_artifact(\"library\", \"hello-world\", \"sha256:123456abcdef...\")\n\n\nasyncio.run(main())\n</code></pre>"}, {"location": "recipes/artifacts/get-artifact-scan-overview/", "title": "Get artifact scan overview", "text": "<p>We can fetch the scan overview for an artifact using the <code>with_scan_overview</code> argument. This will include a brief overview of the scan results for the artifact. To fetch the full vulnerability report (a separate API call), see the Get artifact vulnerability report recipe.</p> <pre><code>import asyncio\nfrom harborapi import HarborAsyncClient\n\nclient = HarborAsyncClient(...)\n\nasync def main() -&gt; None:\n    artifact = await client.get_artifact(\n        \"library\",\n        \"hello-world\",\n        \"latest\",\n        with_scan_overview=True,\n    )\n    print(artifact.scan_overview)\n\n\nasyncio.run(main())\n</code></pre> <p>This will populate the <code>scan_overview</code> field of the artifact with a mapping of the different scan overviews available for the artifact, each key being a MIME-type and each value being a <code>NativeReportSummary</code> object.</p> <pre><code>print(list(artifact.scan_overview))\n# ['application/vnd.security.vulnerability.report; version=1.1']\nprint(artifact.scan_overview[\"application/vnd.security.vulnerability.report; version=1.1\"])\n# NativeReportSummary(report_id=\"foo123\", ...)\n</code></pre> <p>In almost every case, only a single scan overview will be available for the artifact. In those cases, we can use the <code>scan</code> attribute to access the first <code>NativeReportSummary</code> object found in the <code>scan_overview</code> mapping.</p> <pre><code>print(artifact.scan)\n# NativeReportSummary(report_id=\"foo123\", ...)\n</code></pre> <p>Check the <code>NativeReportSummary</code> API reference for all available fields. For example, we can get the status, severity, and ID of the scan overview:</p> <pre><code>print(\"Status:\", artifact.scan.scan_status)\n# 'Success'\nprint(\"Severity:\", artifact.scan.severity)\n# 'Critical'\nprint(\"Report ID:\", artifact.scan.report_id)\n# 'foo123'\n</code></pre> <p>The <code>scan.summary</code> field is a <code>VulnerabilitySummary</code> object, which we can use to get a summary of the number of vulnerabilities found:</p> <pre><code>print(\"Critical:\", artifact.scan.summary.critical)\nprint(\"High:\", artifact.scan.summary.high)\nprint(\"Medium:\", artifact.scan.summary.medium)\nprint(\"Low:\", artifact.scan.summary.low)\nprint(\"Unknown:\", artifact.scan.summary.unknown)\nprint(\"Total:\", artifact.scan.summary.total)\nprint(\"Fixable:\", artifact.scan.summary.critical)\n</code></pre>"}, {"location": "recipes/artifacts/get-artifact-scan-overview/#specific-mime-type-scan-overview", "title": "Specific MIME type scan overview", "text": "<p>If we want to fetch the scan overview given a specific MIME-type, we can use the <code>mime_type</code> argument:</p> <pre><code>artifact = await client.get_artifact(\n        \"library\",\n        \"hello-world\",\n        \"latest\",\n        with_scan_overview=True,\n        mime_type=\"application/vnd.security.vulnerability.report; version=1.1\",\n)\nscan = artifact.scan_overview[\"application/vnd.security.vulnerability.report; version=1.1\"]\n</code></pre>"}, {"location": "recipes/artifacts/get-artifact-vulnerabilities/", "title": "Get artifact vulnerability reports", "text": "<p>We can fetch the vulnerability report(s) for an artifact using <code>get_artifact_vulnerability_reports</code>. It returns a dict of <code>HarborVulnerabilityReport</code> objects indexed by MIME type. If no reports are found, the dict will be empty.</p> <p>A <code>HarborVulnerabilityReport</code> is more comprehensive than the <code>NativeReportSummary</code> returned by <code>get_artifact(..., with_scan_overview=True)</code>. It contains detailed information about the vulnerabilities found in the artifact.</p>"}, {"location": "recipes/artifacts/get-artifact-vulnerabilities/#example", "title": "Example", "text": "<pre><code>import asyncio\nfrom harborapi import HarborAsyncClient\n\nclient = HarborAsyncClient(...)\n\n\nasync def main() -&gt; None:\n    report = await client.get_artifact_vulnerabilities(\n        \"library\",\n        \"hello-world\",\n        \"latest\",\n    )\n    for mime_type, report in reports.items():\n        print(mime_type)\n        for vulnerability in report.vulnerabilities:\n            print(\n                vulnerability.id,\n                vulnerability.severity,\n                vulnerability.package,\n            )\n\nasyncio.run(main())\n</code></pre> <p>The dict returned by the method is a <code>FirstDict</code> object, which is a subclass of Python's built-in <code>dict</code> that provides a <code>first()</code> method to get the first value in the dict. We often only have a single vulnerability report for an artifact, so we can use the <code>first()</code> method to get the report directly:</p> <pre><code>report = await client.get_artifact_vulnerabilities(\n    \"library\",\n    \"hello-world\",\n    \"latest\",\n)\nreport = report.first()\n</code></pre>"}, {"location": "recipes/artifacts/get-artifact-vulnerabilities/#filtering-vulnerabilities", "title": "Filtering vulnerabilities", "text": "<p>The <code>HarborVulnerabilityReport</code> class provides a simple interface for filtering the vulnerabilities by severity. For example, if we only want to see vulnerabilities with a <code>Severity</code> of <code>critical</code> we can access the <code>HarborVulnerabilityReport.critical</code> attribute, which is a property that returns a list of <code>VulnerabilityItem</code> objects:</p> <pre><code>for vulnerability in report.critical:\n    print(vulnerability.id)\n</code></pre> <p>Similarly, we can also get low, medium, and high severity vulnerabilities, as well as fixable and unfixable vulnerabilities:</p> <pre><code>for vulnerability in report.low:...\nfor vulnerability in report.medium:...\nfor vulnerability in report.high:...\nfor vulnerability in report.critical: ...\nfor vulnerability in report.fixable: ...\nfor vulnerability in report.unfixable: ...\n</code></pre> <p>Each <code>VulnerabilityItem</code> contains information about a vulnerability that affects the artifact. This includes information such as id, severity, package, version, description, links and more.</p> <pre><code>for vulnerability in report.vulnerabilities:\n    print(\n        vulnerability.id,\n        vulnerability.severity,\n        vulnerability.package,\n        vulnerability.description,\n        vulnerability.version,\n    )\n    if vulnerability.links:\n        for link in vulnerability.links:\n            print(\"\\t\", link)\n</code></pre>"}, {"location": "recipes/artifacts/get-artifact-vulnerabilities/#the-mime_type-parameter", "title": "The <code>mime_type</code> parameter", "text": "<p>We can pass in a list of MIME types or a single MIME type to the <code>mime_type</code> parameter. The returned dict will only contain the vulnerability reports for the specified MIME types.</p> <pre><code>reports = await client.get_artifact_vulnerabilities(\n    ...,\n    mime_type=[\n        \"application/vnd.security.vulnerability.report; version=1.1\",\n        \"application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0\",\n    ],\n)\nfor mime_type, report in reports.items():\n    print(report)\n\n# OR\n\nreports = await client.get_artifact_vulnerabilities(\n    ...,\n    mime_type=\"application/vnd.security.vulnerability.report; version=1.1\",\n)\nreports.get(\"application/vnd.security.vulnerability.report; version=1.1\")\n</code></pre> <p>Remember, the Artifact might not have a vulnerability report for the specified MIME type. In that case, the dict will be empty.</p> <pre><code>reports = await client.get_artifact_vulnerabilities(\n    ...,\n    mime_type=[\"Lots\", \"Of\", \"Mime\", \"Types\"],\n)\nif not reports:\n    print(\"No vulnerability reports found for the specified MIME types.\")\n</code></pre>"}, {"location": "recipes/artifacts/get-artifact/", "title": "Get artifact", "text": "<p>We can fetch a single artifact using <code>get_artifact</code>. The method takes a project name, repositry name and a tag or digest. It returns an <code>Artifact</code> object.</p> <pre><code>import asyncio\nfrom harborapi import HarborAsyncClient\n\nclient = HarborAsyncClient(...)\n\n\nasync def main() -&gt; None:\n    artifact = await client.get_artifact(\"library\", \"hello-world\", \"latest\")\n    # or\n    artifact = await client.get_artifact(\n        \"library\", \"hello-world\", \"sha256:123456abcdef...\"\n    )\n\n\nasyncio.run(main())\n</code></pre> <p>We can optionally fetch a number of extra attributes for the artifact using any of the following arguments:</p> <ul> <li><code>with_tag</code> - Fetches the tags for the artifact. This is a list of <code>Tag</code> objects.</li> <li><code>with_label</code> - Fetches the labels for the artifact (<code>False</code> by default). This is a list of <code>Label</code> objects.</li> <li><code>with_scan_overview</code> - Fetches the scan overview for the artifact. This is a <code>ScanOverview</code> object.</li> <li><code>with_signature</code> - Fetches the signature for the artifact.</li> <li><code>with_immutable_status</code> - Fetches the immutable status for the artifact.</li> <li><code>with_accessory</code> - Fetches the accessories for the artifact. This is a list of <code>Accessory</code> objects.</li> </ul> <p>All these arguments can be mixed and matched, and will control the attributes that are fetched for the artifact.</p> <p>See below for examples of how to use these arguments and what they return.</p>"}, {"location": "recipes/artifacts/get-artifact/#fetching-tags", "title": "Fetching tags", "text": "<p>We can fetch the tags for an artifact using the <code>with_tag</code> argument. This will populate the <code>tags</code> field of the artifact with a list of <code>Tag</code> objects. This parameter is <code>True</code> by default, so we only need to specify this if we don't want to fetch the tags.</p> <pre><code>import asyncio\nfrom harborapi import HarborAsyncClient\n\nclient = HarborAsyncClient(...)\n\n\nasync def main() -&gt; None:\n    artifact = await client.get_artifact(\n        project=\"library\",\n        repository=\"hello-world\",\n        reference=\"latest\"\n        with_tag=True,\n    )\n\n    for tag in artifact.tags:\n        print(tag.name)\n\n\nasyncio.run(main())\n</code></pre>"}, {"location": "recipes/artifacts/get-artifact/#fetching-labels", "title": "Fetching labels", "text": "<p>We can fetch the labels for an artifact using the <code>with_tag</code> argument. This will populate the <code>labels</code> field of the artifact with a list of <code>Label</code> objects. This parameter is <code>False</code> by default.</p> <pre><code>import asyncio\nfrom harborapi import HarborAsyncClient\n\nclient = HarborAsyncClient(...)\n\n\nasync def main() -&gt; None:\n    artifact = await client.get_artifact(\n        project=\"library\",\n        repository=\"hello-world\",\n        reference=\"latest\"\n        with_label=True,\n    )\n\n    for label in artifact.labels:\n        print(label.name)\n\n\nasyncio.run(main())\n</code></pre>"}, {"location": "recipes/artifacts/get-artifact/#fetching-scan-overview", "title": "Fetching scan overview", "text": "<p>We can fetch the scan overview for an artifact using the <code>with_scan_overview</code> argument. This will populate the <code>scan_overview</code> field of the artifact with a <code>NativeReportSummary</code> object. This object contains a brief overview of the scan results for the artifact. To fetch the full vulnerability report (a separate API call), see the Get artifact vulnerability report recipe.</p> <pre><code>import asyncio\nfrom harborapi import HarborAsyncClient\n\nclient = HarborAsyncClient(...)\n\nasync def main() -&gt; None:\n    artifact = await client.get_artifact(\n        \"library\",\n        \"hello-world\",\n        \"latest\",\n        with_scan_overview=True,\n    )\n    print(artifact.scan_overview)\n\n\nasyncio.run(main())\n</code></pre> <p>See Get artifact scan overview for more in-depth usage of this feature.</p>"}, {"location": "recipes/artifacts/get-artifact/#other-extra-data", "title": "Other extra data", "text": "<p>As outlined previously, different types of extra information can be fetched for an artifact. Adding these arguments will populate the relevant fields of the artifact with the relevant data.</p> <pre><code>import asyncio\nfrom harborapi import HarborAsyncClient\n\nclient = HarborAsyncClient(...)\n\nasync def main() -&gt; None:\n    artifact = await client.get_artifact(\n        \"library\",\n        \"hello-world\",\n        \"latest\",\n        with_accessory=True,\n        with_immutable_status=True,\n        with_label=True,\n        with_scan_overview=True,\n        with_signature=True,\n        with_tag=True,\n    )\n    print(artifact.accessories)\n    print(artifact.labels)\n    print(artifact.scan_overview)\n    print(artifact.tags)\n    # immutable status and signature unknown...\n\n\nasyncio.run(main())\n</code></pre>"}, {"location": "recipes/artifacts/get-artifacts/", "title": "Get artifacts in repository", "text": "<p>To fetch all artifacts in a repository, we can use the <code>get_artifacts</code> method. It returns a list of <code>Artifact</code> objects.</p> <pre><code>import asyncio\nfrom harborapi import HarborAsyncClient\n\nclient = HarborAsyncClient(...)\n\nasync def main() -&gt; None:\n    artifacts = await client.get_artifacts(\"library\", \"hello-world\")\n\n\nasyncio.run(main())\n</code></pre>"}, {"location": "recipes/artifacts/get-artifacts/#filter-by-tag", "title": "Filter by tag", "text": "<p>Providing an argument for <code>query</code> can help narrow down the results. For example, if we want to retrieve artifacts tagged <code>latest</code>, we can pass <code>\"tags=latest\"</code> to <code>query</code>:</p> <pre><code>artifacts = await client.get_artifacts(\n    \"project\",\n    \"repository\",\n    query=\"tags=latest\",\n)\n</code></pre> <p>See query for more information about how to use this parameter.</p>"}, {"location": "recipes/artifacts/get-artifacts/#with-extra-data", "title": "With extra data", "text": "<p>Similar to <code>get_artifact</code>, we can fetch extra data for the artifacts by using the <code>with_tag</code>, <code>with_label</code>, <code>with_scan_overview</code>, <code>with_signature</code>, <code>with_immutable_status</code>, <code>with_accessory</code> arguments. See the get artifact recipe for more information about how to use them and what they return.</p>"}, {"location": "recipes/client/reauth/", "title": "Change client credentials", "text": "<p>To change the authentication credentials and/or API URL after the client has been instantiated, we can use the <code>authenticate</code> method:</p> <pre><code>from harborapi import HarborAsyncClient\n\nclient = HarborAsyncClient(\n    url=\"https://example.com/api/v2.0\",\n    username=\"user1\",\n    secret=\"user1pw\",\n)\n\n# Client uses API @ https://example.com as user1\nawait client.get_projects()\n\n# NOTE: not async!\nclient.authenticate(\n    username=\"user2\",\n    secret=\"user2pw\",\n    url=\"https://demo.goharbor.io/api/v2.0\",  # optionally set a new url\n)\n\n# Client uses API @ https://demo.goharbor.io as user2\nawait client.get_projects()\n</code></pre> <p>We can also use it to only set a new URL:</p> <pre><code>client.authenticate(url=\"https://demo.goharbor.io/api/v2.0\")\n</code></pre>"}, {"location": "recipes/ext/", "title": "<code>harborapi.ext</code>", "text": "<p>The <code>harborapi.ext</code> module provides additional functionality for common tasks such as concurrency and aggregation of multiple API calls. The recipes in this section make use of this module.</p> <p>These recipes demonstrate how to use some of these extra features.</p>"}, {"location": "recipes/ext/artifact-vulns/", "title": "Get vulnerabilities in all artifacts", "text": "<p>This recipe describes how to fetch all vulnerabilities from all artifacts in all repositories in all (or a subset of) projects using the helper functions defined in <code>ext.api</code>.</p> <p>The recipe demonstrates how to fetch all artifacts that have vulnerabilities affecting OpenSSL version 3.x. It makes use of the built-in rate limiting implemented in <code>get_artifact_vulnerabilities</code>. By default, a maximum of 5 requests are sent concurrently, which prevents the program from accidentally performing a DoS attack on your Harbor instance.</p> <p>Attempting to fetch too many resources simultaneously can lead to extreme slowdowns and in some cases completely locking up your Harbor instance. Experiment with the <code>max_connections</code> argument of <code>get_artifact_vulnerabilities</code> to find the optimal value for your Harbor instance.</p> <pre><code>import asyncio\nfrom typing import Set\n\nfrom harborapi import HarborAsyncClient\nfrom harborapi.ext.api import get_artifact_vulnerabilities\nfrom harborapi.ext.artifact import ArtifactInfo\nfrom harborapi.ext.report import ArtifactReport\n\nclient = HarborAsyncClient(...)\n\n\nasync def main():\n    artifacts = await get_artifact_vulnerabilities(\n        client,\n        max_connections=5,\n    )\n\n    # Aggregate the artifacts by making an ArtifactReport\n    report = ArtifactReport(artifacts)\n\n    # Filter report by only including artifacts with OpenSSL 3.x.y vulnerabilities\n    filtered_report = report.with_package(\n        \"openssl\", case_sensitive=False, min_version=(3, 0, 0)\n    )\n\n    for artifact in filtered_report.artifacts:\n        versions = get_all_openssl_versions(artifact)\n        v = \", \".join(versions)  # will likely just be 1 version\n        print(f\"{artifact.name_with_digest}: OpenSSL version: {v}\")\n\n\ndef get_all_openssl_versions(artifact: ArtifactInfo) -&gt; Set[str]:\n    \"\"\"Get all affected OpenSSL versions for the artifact,\n    with duplicates removed.\"\"\"\n    return set(\n        filter(None, [vuln.version for vuln in artifact.vulns_with_package(\"openssl\")])\n    )\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre> <p>Example output:</p> <pre><code>library/foo@sha256:f2f9fddc: OpenSSL version: 3.0.2-0ubuntu1.6\nother-project/bar@sha256:b498b376: OpenSSL version: 3.0.2-0ubuntu1.6\nlegacy/baz@sha256:ddf6b9db: OpenSSL version: 3.0.2-0ubuntu1.6\n</code></pre> <p>In the example above, we make use of <code>ArtifactReport.with_package</code> to filter the report to only include artifacts with vulnerabilities affecting OpenSSL version 3.x. See the ArtifactReport reference for more information on other methods that can be used to filter the report.</p>"}, {"location": "recipes/ext/artifact-vulns/#fetching-from-a-subset-of-projects", "title": "Fetching from a subset of projects", "text": "<p>In the example above we omitted the <code>projects</code> parameter for <code>get_artifact_vulnerabilities</code>, which means that all projects will be queried. If you only want to query a subset of projects, you can pass a list of project names to the <code>projects</code> parameter.</p> <pre><code>artifacts = await get_artifact_vulnerabilities(\n    client,\n    projects=[\"library\", \"other-project\"],\n    max_connections=5,\n)\n</code></pre>"}, {"location": "recipes/ext/artifactowner/", "title": "Get artifact owner", "text": "<p>We can fetch information about owners of artifacts using <code>harborapi.ext.api.get_artifact_owner</code>. The function takes in a <code>harborapi.models.Artifact</code> or <code>harborapi.ext.artifact.ArtifactInfo</code> object, and returns a <code>harborapi.models.UserResp</code> object.</p> <p>Warning</p> <p>The method requires elevated privileges, as it has to look up information about users. A lack of privileges will likely result in <code>harborapi.exceptions.Unauthorized</code> being raised.</p> <pre><code>import asyncio\n\nfrom harborapi import HarborAsyncClient\nfrom harborapi.ext import api\n\nclient = HarborAsyncClient(...)\n\nsync def main() -&gt; None:\n    artifacts = await api.get_artifacts(client, projects=[\"library\"])\n    for artifact in artifacts:\n        try:\n            owner_info = await api.get_artifact_owner(client, artifact.artifact)\n        except ValueError as e:\n            # something is wrong with the artifact, and we can't fetch its owner\n            print(e)\n        else:\n            print(owner_info)\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre> <p>In the above example, we fetch all artifacts in the <code>library</code> project, and then fetch the owner information for each artifact. If the artifact is not owned by a user or does not belong to a project, the function will raise a <code>ValueError</code>.</p> <p>The function returns a <code>UserResp</code> object, which contains information about the owner of the artifact.</p> <p>See api.get_artifacts and api.get_artifact_owner for more information.</p>"}, {"location": "recipes/ext/conc-artifact/", "title": "Fetch artifacts", "text": "<p>With the help of asyncio, we can fetch artifacts from multiple repositories concurrently. The number of concurrent connections can be controlled by the <code>max_connections</code> parameter for harborapi.ext.api.get_artifacts.</p>"}, {"location": "recipes/ext/conc-artifact/#all-artifacts", "title": "All artifacts", "text": "<p>By default, <code>get_artifacts()</code> will fetch all artifacts in all repositories in all projects.</p> <pre><code>from harborapi import HarborAsyncClient\nfrom harborapi.ext import api\n\nclient = HarborAsyncClient(...)\n\nasync def main() -&gt; None:\n    artifacts = await api.get_artifacts(client)\n</code></pre> <p>This will give us a list of <code>ArtifactInfo</code> objects, which contain information about the artifact.</p>"}, {"location": "recipes/ext/conc-artifact/#artifacts-in-specific-projects", "title": "Artifacts in specific projects", "text": "<p>Passing a list of project names to the <code>projects</code> argument will fetch artifacts from all repositories in the specified projects.</p> <pre><code>from harborapi import HarborAsyncClient\nfrom harborapi.ext import api\n\nclient = HarborAsyncClient(...)\n\nasync def main() -&gt; None:\n    artifacts = await api.get_artifacts(\n        client,\n        projects=[\"library\", \"my-project-1\"],\n    )\n</code></pre> <p>This will fetch all artifacts in all repositories in the projects <code>library</code> and <code>my-project-1</code> concurrently.</p>"}, {"location": "recipes/ext/conc-artifact/#artifacts-in-specific-repos-in-specific-projects", "title": "Artifacts in specific repos in specific projects", "text": "<p>We can specify names of projects and repositories to fetch artifacts from.</p> <pre><code>from harborapi import HarborAsyncClient\nfrom harborapi.ext import api\n\nclient = HarborAsyncClient(...)\n\nasync def main() -&gt; None:\n    artifacts = await api.get_artifacts(\n        client,\n        projects=[\"library\", \"test-project\"],\n        repositories=[\"nginx\"]\n    )\n</code></pre> <p>This will fetch all artifacts in <code>library/nginx</code> and <code>test-project/nginx</code> concurrently (if they exist).</p>"}, {"location": "recipes/ext/conc-artifact/#artifacts-in-specific-repos", "title": "Artifacts in specific repos", "text": "<p>We can fetch artifacts from specific repositories by passing a list of repository names to the <code>repositories</code> argument for harborapi.ext.api.get_artifacts.</p> <pre><code>from harborapi import HarborAsyncClient\nfrom harborapi.ext import api\n\nclient = HarborAsyncClient(...)\n\nasync def main() -&gt; None:\n    artifacts = await api.get_artifacts(\n        client,\n        repositories=[\"library/hello-world\", \"nginx\"]\n    )\n</code></pre> <p>This will fetch all artifacts in the repository <code>library/hello-world</code>, as well as all artifacts from any repository named <code>nginx</code> in any project.</p> <p>The <code>\"nginx\"</code> value demonstrates the flexible behavior of the function. By omitting both the <code>projects</code> parameter and the project name from the argument <code>\"nginx\"</code>, the library looks for repositories named <code>nginx</code> in all projects.</p>"}, {"location": "recipes/ext/conc-repo/", "title": "Fetch repositories", "text": "<p>Given a list of project names, we can use Asyncio to dispatch multiple requests concurrently to the Harbor API to fetch repositories in a list of projects (or all projects if <code>None</code> is passed in) with the help of <code>ext.api.get_repositories</code></p>"}, {"location": "recipes/ext/conc-repo/#list-of-names", "title": "List of names", "text": "<p>We can use a list of project names to fetch repositories from.</p> <pre><code>from harborapi import HarborAsyncClient\nfrom harborapi.ext import api\n\nclient = HarborAsyncClient(...)\n\nasync def main() -&gt; None:\n    repos = await api.get_repositories(\n        client,\n        projects=[\"library\", \"my-project-1\"],\n    )\n</code></pre> <p>This will fetch all repositories from the projects <code>library</code> and <code>my-project-1</code> concurrently.</p>"}, {"location": "recipes/ext/conc-repo/#all-projects", "title": "All projects", "text": "<p>We can also fetch the repositories from all projects by passing <code>None</code> in as the <code>projects</code> argument.</p> <pre><code>from harborapi import HarborAsyncClient\nfrom harborapi.ext import api\n\nclient = HarborAsyncClient(...)\n\nasync def main() -&gt; None:\n    repos = await api.get_repositories(\n        client,\n        projects=None,\n    )\n</code></pre> <p>This will fetch all repositories from all projects concurrently.</p> <p>Note</p> <p>The function has a named parameter <code>callback</code>, which takes a function that receives a list of exceptions as its only argument. This can be used to handle exceptions that occur during the concurrent requests. The function always fires even if there are no exceptions. If no callback function is specified, exceptions are ignored.</p>"}, {"location": "recipes/projects/create-project/", "title": "Create project", "text": "<p>We can create a new project using <code>create_project</code>. The method takes a <code>ProjectReq</code> object, and returns the location of the created project.</p> <p>One feature of creating projects via the API is that we can provide more detailed configuration than what is available in the web UI. For example, we can enable content trust and auto scanning when creating the project, instead of having to do it manually after the project has been created.</p> <p>Check the <code>ProjectReq</code> documentation for more information about the available options.</p> <pre><code>import asyncio\nfrom harborapi import HarborAsyncClient\n\nclient = HarborAsyncClient(...)\n\n\nasync def main() -&gt; None:\n    location = await client.create_project(\n        ProjectReq(\n            project_name=\"new-project\",\n            public=True,\n            metadata=ProjectMetadata(\n                auto_scan=True,\n                enable_content_trust=True,\n            ),\n        )\n    )\n    print(location)\n\n\nasyncio.run(main())\n</code></pre>"}, {"location": "recipes/projects/delete-project/", "title": "Delete project", "text": "<p>We can delete a project using <code>delete_project</code>. The method takes a project name (string) or a project ID (integer) as its only argument. The method returns nothing on success.</p> <pre><code>import asyncio\nfrom harborapi import HarborAsyncClient\n\nclient = HarborAsyncClient(...)\n\n\nasync def main() -&gt; None:\n    await client.delete_project(\"library\")\n    # or\n    await client.delete_project(1)\n\n\nasyncio.run(main())\n</code></pre>"}, {"location": "recipes/projects/get-project/", "title": "Get project", "text": "<p>We can fetch a single project using <code>get_project</code>. The method takes a project name (string) or a project ID (integer) as its only argument. The method returns a <code>Project</code> object.</p> <pre><code>import asyncio\nfrom harborapi import HarborAsyncClient\n\nclient = HarborAsyncClient(...)\n\n\nasync def main() -&gt; None:\n    project = await client.get_project(\"library\")\n    # or\n    project = await client.get_project(1)\n\n\nasyncio.run(main())\n</code></pre>"}, {"location": "recipes/projects/get-projects/", "title": "Get all projects", "text": "<p>We can fetch all projects using <code>get_projects</code>. The method returns a list of <code>Project</code> objects.</p> <pre><code>import asyncio\nfrom harborapi import HarborAsyncClient\n\nclient = HarborAsyncClient(...)\n\n\nasync def main() -&gt; None:\n    projects = await client.get_projects()\n\n\nasyncio.run(main())\n</code></pre>"}, {"location": "recipes/projects/update-project/", "title": "Update project", "text": "<p>We can update an existing project using <code>update_project</code>. The method takes the name or ID of the project and a <code>ProjectReq</code> object. Nothing is returned on success.</p> <p>Note</p> <p>Updating a project is an <code>HTTP PUT</code> operation in the API, which according to idiomatic REST should replace the existing project settings with the project settings in the <code>ProjectReq</code> in the request body. However, in practice, the Harbor API supports partial updates, and thus will only update the fields that are actually set on the <code>ProjectReq</code> object in the request body. It is not guaranteed that this behavior will persist in future versions of Harbor, or is indeed supported by all versions of Harbor.</p> <p>See Idiomatic REST Updating for more information.</p> <pre><code>import asyncio\nfrom harborapi import HarborAsyncClient\n\nclient = HarborAsyncClient(...)\n\n\nasync def main() -&gt; None:\n    await client.update_project(\n        \"test-project2\",\n        ProjectReq(\n            public=False,\n            metadata=ProjectMetadata(\n                auto_scan=False,\n            ),\n        ),\n    )\n\n\nasyncio.run(main())\n</code></pre>"}, {"location": "recipes/repos/get-repo/", "title": "Get repository", "text": "<p>We can fetch a specific repository using <code>get_repository</code>. The method takes a project name and a repository name, and returns a <code>Repository</code> object.</p> <pre><code>import asyncio\nfrom harborapi import HarborAsyncClient\n\nclient = HarborAsyncClient(...)\n\nasync def main() -&gt; None:\n    repo = await client.get_repository(\n        project_name=\"library\",\n        repository_name=\"hello-world\",\n    )\n\n\nasyncio.run(main())\n</code></pre>"}, {"location": "recipes/repos/get-repos-project/", "title": "Get repositories in a project", "text": "<p>We can fetch all repositories in a specific project by using <code>get_repositories</code> and passing the project name to the <code>project_name</code> parameter. The method returns a list of <code>Repository</code> objects.</p> <pre><code>import asyncio\nfrom harborapi import HarborAsyncClient\n\nclient = HarborAsyncClient(...)\n\nasync def main() -&gt; None:\n    repos = await client.get_repositories(\n        project_name=\"library\",\n    )\n\n\nasyncio.run(main())\n</code></pre> <p>Fetching repos in multiple specific projects must either be done by calling the method multiple times, or omitting the <code>project_name</code> parameter and fetching all repositories in all projects, and then filtering the results afterwards.</p> <p><code>harborapi.ext</code> provides a helper function for fetching from multiple specific projects, and the recipe for that is available here</p>"}, {"location": "recipes/repos/get-repos/", "title": "Get all repositories", "text": "<p>Fetching all repositories is done by calling <code>get_repositories</code>. The method returns a list of <code>Repository</code> objects.</p> <pre><code>import asyncio\nfrom harborapi import HarborAsyncClient\n\nclient = HarborAsyncClient(...)\n\n\nasync def main() -&gt; None:\n    repos = await client.get_repositories()\n\n\nasyncio.run(main())\n</code></pre>"}, {"location": "recipes/retention/get-retention/", "title": "Get project retention policy", "text": "<p>Fetching the retention policy for a given project is somewhat convoluted in the API, as there is no endpoint that directly returns the retention policy for a given project. Normally, we would have to fetch the project, inspect its metadata, and then fetch the retention policy using the ID from the metadata.</p> <p><code>harborapi</code> adds the helper method <code>get_project_retention_id</code> for fetching the retention policy ID for a given project. With this method, we can first fetch the retention policy ID, and then use that ID to fetch the retention policy itself.</p> <pre><code>import asyncio\n\nfrom harborapi import HarborAsyncClient\n\nclient = HarborAsyncClient(...)\n\n\nasync def main() -&gt; None:\n    # Get the retention policy ID for the project \"library\"\n    project_name = \"library\"\n    retention_id = await client.get_project_retention_id(project_name)\n    if not retention_id:\n        print(f\"No retention policy found for project {project_name!r}\")\n        exit(1)\n\n    # Get the retention policy for the project \"library\"\n    policy = await client.get_retention_policy(retention_id)\n\n    # work with the policy...\n    print(policy)\n\n\nasyncio.run(main())\n</code></pre>"}, {"location": "recipes/scan/scan-artifact/", "title": "Scan an artifact", "text": "<p>We can scan an artifact using <code>scan_artifact</code>. The method takes a project name, repository name, and a tag or digest. The method starts a scan and returns nothing on success.</p> <pre><code>import asyncio\nfrom harborapi import HarborAsyncClient\n\nclient = HarborAsyncClient(...)\n\nasync def main() -&gt; None:\n    await client.scan_artifact(\"library\", \"hello-world\", \"latest\")\n    # or\n    await client.scan_artifact(\"library\", \"hello-world\", \"sha256:123456abcdef...\")\n\n\n\nasyncio.run(main())\n</code></pre>"}, {"location": "recipes/scan/scan-artifact/#stop-a-scan", "title": "Stop a scan", "text": "<p>We can stop a running scan by using <code>stop_artifact_scan</code>. The method takes a project name, repository name, and a tag or digest. The method returns nothing on success.</p> <pre><code>import asyncio\nfrom harborapi import HarborAsyncClient\n\nclient = HarborAsyncClient(...)\n\nasync def main() -&gt; None:\n    await client.stop_artifact_scan(\"library\", \"hello-world\", \"latest\")\n    # or\n    await client.stop_artifact_scan(\"library\", \"hello-world\", \"sha256:123456abcdef...\")\n\n\nasyncio.run(main())\n</code></pre>"}, {"location": "recipes/user/get-current-user/", "title": "Get current user", "text": ""}, {"location": "recipes/user/get-current-user/#get-current-user", "title": "Get current user", "text": "<p>To fetch information about the currently authenticated API user, we can use the <code>get_current_user</code> method. It returns a <code>UserResp</code> object.</p> <pre><code>import asyncio\n\nfrom harborapi import HarborAsyncClient\n\nclient = HarborAsyncClient(...)\n\n\nasync def main():\n    res = await client.get_current_user()\n    print(res)\n\n\nasyncio.run(main())\n</code></pre> <p>Produces something like this:</p> <pre><code>UserResp(\n    email=None,\n    realname='Firstname Lastname',\n    comment='from LDAP.',\n    user_id=123,\n    username='firstname-lastname',\n    sysadmin_flag=False,\n    admin_role_in_auth=True,\n    oidc_user_meta=None,\n    creation_time=datetime.datetime(2022, 7, 1, 13, 19, 36, 26000, tzinfo=datetime.timezone.utc),\n    update_time=datetime.datetime(2022, 7, 1, 13, 19, 36, 26000, tzinfo=datetime.timezone.utc)\n)\n</code></pre>"}, {"location": "reference/", "title": "Reference", "text": "<ul> <li>harborapi.auth</li> <li>harborapi.client</li> <li>harborapi.client_sync</li> <li>harborapi.exceptions</li> <li>harborapi.types</li> <li>harborapi.utils</li> <li>harborapi.models.scanner</li> <li>harborapi.models.models</li> <li>harborapi.ext.cve</li> <li>harborapi.ext.report</li> <li>harborapi.ext.api</li> <li>harborapi.ext.artifact</li> </ul>"}, {"location": "reference/auth/", "title": "harborapi.auth", "text": "<p><code>harborapi.auth</code> defines utility functions for use with <code>harborapi</code>.</p>"}, {"location": "reference/auth/#harborapi.auth.HarborAuthFile", "title": "<code>HarborAuthFile</code>", "text": "<p>               Bases: <code>Robot</code></p> <p>Represents a Harbor robot account auth file.</p> <p>Supports arbitrary extra fields to allow for future compatibility.</p> Source code in <code>harborapi/auth.py</code> <pre><code>class HarborAuthFile(Robot):\n    \"\"\"Represents a Harbor robot account auth file.\n\n    Supports arbitrary extra fields to allow for future compatibility.\n    \"\"\"\n\n    name: str = Field(None, description=\"The name of the robot account\")\n    secret: str = Field(None, description=\"The secret for the robot account\")\n    model_config = ConfigDict(populate_by_name=True, extra=\"allow\")\n</code></pre>"}, {"location": "reference/auth/#harborapi.auth.load_harbor_auth_file", "title": "<code>load_harbor_auth_file(path)</code>", "text": "<p>Load a HarborAuthFile from a file path. Ensure that the file contains a name and secret.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Union[str, Path]</code> <p>The path to the file to load.</p> required <p>Returns:</p> Type Description <code>HarborAuthFile</code> <p>The HarborAuthFile loaded from the file.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>The auth file does not contain a username and/or secret.</p> Source code in <code>harborapi/auth.py</code> <pre><code>def load_harbor_auth_file(path: Union[str, Path]) -&gt; \"HarborAuthFile\":\n    \"\"\"Load a HarborAuthFile from a file path. Ensure that the file contains\n    a name and secret.\n\n    Parameters\n    ----------\n    path : Union[str, Path]\n        The path to the file to load.\n\n    Returns\n    -------\n    HarborAuthFile\n        The HarborAuthFile loaded from the file.\n\n    Raises\n    ------\n    ValueError\n        The auth file does not contain a username and/or secret.\n    \"\"\"\n    authfile = _load_harbor_auth_file(path)\n    if not authfile.name:\n        raise ValueError(\"Field 'name' is required\")\n    if not authfile.secret:\n        raise ValueError(\"Field 'secret' is required\")\n    return authfile\n</code></pre>"}, {"location": "reference/auth/#harborapi.auth.save_authfile", "title": "<code>save_authfile(path, authfile, overwrite)</code>", "text": "<p>Save the authfile to the given path.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Union[str, Path]</code> <p>Path to save the file to.</p> required <code>authfile</code> <code>HarborAuthFile</code> <p>Auth file definition to save.</p> required <code>overwrite</code> <code>bool</code> <p>Overwrite file if it exists.</p> required <p>Raises:</p> Type Description <code>FileExistsError</code> <p>A file with the given path already exists, and <code>overwrite</code> is <code>False</code>.</p> Source code in <code>harborapi/auth.py</code> <pre><code>def save_authfile(\n    path: Union[str, Path], authfile: \"HarborAuthFile\", overwrite: bool\n) -&gt; None:\n    \"\"\"Save the authfile to the given path.\n\n    Parameters\n    ----------\n    path : Union[str, Path]\n        Path to save the file to.\n    authfile : HarborAuthFile\n        Auth file definition to save.\n    overwrite : bool\n        Overwrite file if it exists.\n\n    Raises\n    ------\n    FileExistsError\n        A file with the given path already exists, and `overwrite` is `False`.\n    \"\"\"\n    p = Path(path)\n    if p.exists() and not overwrite:\n        raise FileExistsError(f\"File {p} already exists\")\n    with open(path, \"w\") as f:\n        f.write(authfile.model_dump_json(indent=4))\n</code></pre>"}, {"location": "reference/auth/#harborapi.auth.new_authfile_from_robotcreate", "title": "<code>new_authfile_from_robotcreate(path, robotcreate, robotcreated, overwrite=False)</code>", "text": "<p>Create a new authfile from the result of a create robot call.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Union[str, Path]</code> <p>Path to save the file to.</p> required <code>robotcreate</code> <code>RobotCreate</code> <p>The arguments used to create the robot.</p> required <code>robotcreated</code> <code>RobotCreated</code> <p>The result of the create robot call.</p> required <code>overwrite</code> <code>bool</code> <p>Overwrite file if it exists.</p> <code>False</code> See Also <p>harborapi.auth.save_authfile</p> Source code in <code>harborapi/auth.py</code> <pre><code>def new_authfile_from_robotcreate(\n    path: Union[str, Path],\n    robotcreate: RobotCreate,\n    robotcreated: RobotCreated,\n    overwrite: bool = False,\n) -&gt; None:\n    \"\"\"Create a new authfile from the result of a create robot call.\n\n    Parameters\n    ----------\n    path : Union[str, Path]\n        Path to save the file to.\n    robotcreate : RobotCreate\n        The arguments used to create the robot.\n    robotcreated : RobotCreated\n        The result of the create robot call.\n    overwrite : bool, optional\n        Overwrite file if it exists.\n\n    See Also\n    --------\n    [harborapi.auth.save_authfile][]\n    \"\"\"\n    # Specify robotcreated last, since that is the object that should\n    # contain the secret (which we definitely don't want to overwrite)\n    authfile = HarborAuthFile.model_validate(\n        {**(robotcreate.model_dump()), **(robotcreated.model_dump())}\n    )\n    save_authfile(path, authfile, overwrite=overwrite)\n</code></pre>"}, {"location": "reference/auth/#harborapi.auth.new_authfile_from_robot", "title": "<code>new_authfile_from_robot(path, robot, secret, overwrite=False)</code>", "text": "<p>Create a new authfile from a Robot definition and a secret.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Union[str, Path]</code> <p>Path to save the file to.</p> required <code>robot</code> <code>Robot</code> <p>Robot definition.</p> required <code>secret</code> <code>str</code> <p>Secret to use for the robot.</p> required <code>overwrite</code> <code>bool</code> <p>Overwrite file if it exists.</p> <code>False</code> See Also <p>harborapi.auth.save_authfile</p> Source code in <code>harborapi/auth.py</code> <pre><code>def new_authfile_from_robot(\n    path: Union[str, Path],\n    robot: Robot,\n    secret: str,\n    overwrite: bool = False,\n) -&gt; None:\n    \"\"\"Create a new authfile from a Robot definition and a secret.\n\n    Parameters\n    ----------\n    path : Union[str, Path]\n        Path to save the file to.\n    robot : Robot\n        Robot definition.\n    secret : str\n        Secret to use for the robot.\n    overwrite : bool\n        Overwrite file if it exists.\n\n    See Also\n    --------\n    [harborapi.auth.save_authfile][]\n    \"\"\"\n    authfile = HarborAuthFile.model_validate(robot.model_dump())\n    authfile.secret = secret\n    save_authfile(path, authfile, overwrite=overwrite)\n</code></pre>"}, {"location": "reference/client_sync/", "title": "harborapi.client_sync", "text": ""}, {"location": "reference/client_sync/#harborapi.client_sync.HarborClient", "title": "<code>HarborClient</code>", "text": "<p>               Bases: <code>HarborAsyncClient</code></p> <p>Non-async Harbor API client.</p> Source code in <code>harborapi/client_sync.py</code> <pre><code>class HarborClient(HarborAsyncClient):\n    \"\"\"Non-async Harbor API client.\"\"\"\n\n    def __init__(\n        self,\n        loop: Optional[asyncio.AbstractEventLoop] = None,\n        *args: Any,\n        **kwargs: Any,\n    ):\n        super().__init__(*args, **kwargs)\n        self.loop = loop or asyncio.new_event_loop()\n        asyncio.set_event_loop(self.loop)\n\n    def __getattribute__(self, name: str) -&gt; Any:\n        \"\"\"Overrides the `__getattribute__` method to wrap coroutine functions\n\n        Intercepts attribute access and wraps coroutine functions with `_wrap_coro`.\n\n        Internal methods are not wrapped in order to run them normally in\n        an asynchronous manner within the event loop.\n        \"\"\"\n        attr = super().__getattribute__(name)\n        name = name.lower()\n\n        # Filter out internal methods\n        if name.startswith(\"_\") or any(\n            name == http_method\n            for http_method in (\n                \"get\",\n                \"get_text\",  # get for text/plain (hack)\n                \"post\",\n                \"put\",\n                \"patch\",\n                \"delete\",\n                \"head\",\n                \"options\",\n            )\n        ):\n            return attr\n\n        if inspect.iscoroutinefunction(attr):\n            return self._wrap_coro(attr)\n\n        return attr\n\n    def _wrap_coro(self, coro: Any) -&gt; Callable[[Any], Any]:\n        \"\"\"Wraps a coroutine function in an `AbstractEventLoop.run_until_complete()`\n        call that runs the coroutine in the event loop.\n\n        This is a hacky way to make the client behave like a synchronous client.\n\n        Parameters\n        ----------\n        coro : Any\n            The coroutine function to wrap.\n\n        Returns\n        -------\n        Callable[[Any], Any]\n            A function that runs the coroutine in the event loop.\n        \"\"\"\n\n        def wrapper(*args: Any, **kwargs: Any) -&gt; Any:  # TODO: better type signature\n            return self.loop.run_until_complete(coro(*args, **kwargs))\n\n        return wrapper\n</code></pre>"}, {"location": "reference/client_sync/#harborapi.client_sync.HarborClient.__getattribute__", "title": "<code>__getattribute__(name)</code>", "text": "<p>Overrides the <code>__getattribute__</code> method to wrap coroutine functions</p> <p>Intercepts attribute access and wraps coroutine functions with <code>_wrap_coro</code>.</p> <p>Internal methods are not wrapped in order to run them normally in an asynchronous manner within the event loop.</p> Source code in <code>harborapi/client_sync.py</code> <pre><code>def __getattribute__(self, name: str) -&gt; Any:\n    \"\"\"Overrides the `__getattribute__` method to wrap coroutine functions\n\n    Intercepts attribute access and wraps coroutine functions with `_wrap_coro`.\n\n    Internal methods are not wrapped in order to run them normally in\n    an asynchronous manner within the event loop.\n    \"\"\"\n    attr = super().__getattribute__(name)\n    name = name.lower()\n\n    # Filter out internal methods\n    if name.startswith(\"_\") or any(\n        name == http_method\n        for http_method in (\n            \"get\",\n            \"get_text\",  # get for text/plain (hack)\n            \"post\",\n            \"put\",\n            \"patch\",\n            \"delete\",\n            \"head\",\n            \"options\",\n        )\n    ):\n        return attr\n\n    if inspect.iscoroutinefunction(attr):\n        return self._wrap_coro(attr)\n\n    return attr\n</code></pre>"}, {"location": "reference/exceptions/", "title": "harborapi.exceptions", "text": ""}, {"location": "reference/exceptions/#harborapi.exceptions.EXCEPTIONS_MAP", "title": "<code>EXCEPTIONS_MAP = {400: BadRequest, 401: Unauthorized, 403: Forbidden, 404: NotFound, 405: MethodNotAllowed, 409: Conflict, 412: PreconditionFailed, 415: UnsupportedMediaType, 422: UnprocessableEntity, 500: InternalServerError}</code>  <code>module-attribute</code>", "text": ""}, {"location": "reference/exceptions/#harborapi.exceptions.HarborAPIException", "title": "<code>HarborAPIException</code>", "text": "<p>               Bases: <code>Exception</code></p>"}, {"location": "reference/exceptions/#harborapi.exceptions.StatusError", "title": "<code>StatusError(*args, errors=None, **kwargs)</code>", "text": "<p>               Bases: <code>HarborAPIException</code></p> <p>Initialize a StatusError.</p> <p>Parameters:</p> Name Type Description Default <code>*args</code> <code>Any</code> <p>Positional arguments to pass to the base Exception class.</p> <code>()</code> <code>errors</code> <code>Optional[Errors]</code> <p>A list of errors returned by the Harbor API.</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Keyword arguments to pass to the base Exception class.</p> <code>{}</code> Source code in <code>harborapi/exceptions.py</code> <pre><code>def __init__(\n    self,\n    *args: Any,\n    errors: Optional[Errors] = None,\n    **kwargs: Any,\n):\n    \"\"\"Initialize a StatusError.\n\n    Parameters\n    ----------\n    *args : Any\n        Positional arguments to pass to the base Exception class.\n    errors : Optional[Errors]\n        A list of errors returned by the Harbor API.\n    **kwargs : Any\n        Keyword arguments to pass to the base Exception class.\n    \"\"\"\n    super().__init__(*args, **kwargs)\n\n    self.__cause__: Optional[HTTPStatusError] = None\n    \"\"\"The underlying HTTPX exception that caused this exception.\n    Automatically assigned when raised from a HTTPX exception.\"\"\"\n\n    self.errors: List[Error] = []\n    \"\"\"A list of errors returned by the Harbor API.\"\"\"\n    if isinstance(errors, Errors) and errors.errors:\n        self.errors = errors.errors\n</code></pre>"}, {"location": "reference/exceptions/#harborapi.exceptions.StatusError.__cause__", "title": "<code>__cause__ = None</code>  <code>instance-attribute</code>", "text": "<p>The underlying HTTPX exception that caused this exception. Automatically assigned when raised from a HTTPX exception.</p>"}, {"location": "reference/exceptions/#harborapi.exceptions.StatusError.errors", "title": "<code>errors = []</code>  <code>instance-attribute</code>", "text": "<p>A list of errors returned by the Harbor API.</p>"}, {"location": "reference/exceptions/#harborapi.exceptions.StatusError.response", "title": "<code>response</code>  <code>property</code>", "text": ""}, {"location": "reference/exceptions/#harborapi.exceptions.StatusError.status_code", "title": "<code>status_code</code>  <code>property</code>", "text": "<p>The status code of the underlying HTTPX exception.</p> <p>Returns:</p> Type Description <code>Optional[int]</code> <p>The status code of the underlying HTTPX exception. Returns 0 if no response is available.</p>"}, {"location": "reference/exceptions/#harborapi.exceptions.StatusError.__str__", "title": "<code>__str__()</code>", "text": "<p>Return a string representation of this exception.</p> Source code in <code>harborapi/exceptions.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return a string representation of this exception.\"\"\"\n    # HTTPX exceptions are not very informative, and it is hard to debug\n    # failing tests without knowing the response text. So, we append the\n    # response text to the exception message.\n\n    # An HTTPX exception will have a single arg that looks like this:\n    # \"Server error '500 INTERNAL SERVER ERROR' for url 'http://localhost:61656/api/v2.0/foo'\\nFor more information check: https://httpstatuses.com/500\"\n    # We only want the first part, so we partition on the newline\n    original_message = super().__str__().partition(\"\\n\")[0]\n    response_text = self.response.text if self.response else \"\"\n    return f\"{original_message}: {response_text}\"\n</code></pre>"}, {"location": "reference/exceptions/#harborapi.exceptions.BadRequest", "title": "<code>BadRequest(*args, errors=None, **kwargs)</code>", "text": "<p>               Bases: <code>StatusError</code></p> Source code in <code>harborapi/exceptions.py</code> <pre><code>def __init__(\n    self,\n    *args: Any,\n    errors: Optional[Errors] = None,\n    **kwargs: Any,\n):\n    \"\"\"Initialize a StatusError.\n\n    Parameters\n    ----------\n    *args : Any\n        Positional arguments to pass to the base Exception class.\n    errors : Optional[Errors]\n        A list of errors returned by the Harbor API.\n    **kwargs : Any\n        Keyword arguments to pass to the base Exception class.\n    \"\"\"\n    super().__init__(*args, **kwargs)\n\n    self.__cause__: Optional[HTTPStatusError] = None\n    \"\"\"The underlying HTTPX exception that caused this exception.\n    Automatically assigned when raised from a HTTPX exception.\"\"\"\n\n    self.errors: List[Error] = []\n    \"\"\"A list of errors returned by the Harbor API.\"\"\"\n    if isinstance(errors, Errors) and errors.errors:\n        self.errors = errors.errors\n</code></pre>"}, {"location": "reference/exceptions/#harborapi.exceptions.Unauthorized", "title": "<code>Unauthorized(*args, errors=None, **kwargs)</code>", "text": "<p>               Bases: <code>StatusError</code></p> Source code in <code>harborapi/exceptions.py</code> <pre><code>def __init__(\n    self,\n    *args: Any,\n    errors: Optional[Errors] = None,\n    **kwargs: Any,\n):\n    \"\"\"Initialize a StatusError.\n\n    Parameters\n    ----------\n    *args : Any\n        Positional arguments to pass to the base Exception class.\n    errors : Optional[Errors]\n        A list of errors returned by the Harbor API.\n    **kwargs : Any\n        Keyword arguments to pass to the base Exception class.\n    \"\"\"\n    super().__init__(*args, **kwargs)\n\n    self.__cause__: Optional[HTTPStatusError] = None\n    \"\"\"The underlying HTTPX exception that caused this exception.\n    Automatically assigned when raised from a HTTPX exception.\"\"\"\n\n    self.errors: List[Error] = []\n    \"\"\"A list of errors returned by the Harbor API.\"\"\"\n    if isinstance(errors, Errors) and errors.errors:\n        self.errors = errors.errors\n</code></pre>"}, {"location": "reference/exceptions/#harborapi.exceptions.Forbidden", "title": "<code>Forbidden(*args, errors=None, **kwargs)</code>", "text": "<p>               Bases: <code>StatusError</code></p> Source code in <code>harborapi/exceptions.py</code> <pre><code>def __init__(\n    self,\n    *args: Any,\n    errors: Optional[Errors] = None,\n    **kwargs: Any,\n):\n    \"\"\"Initialize a StatusError.\n\n    Parameters\n    ----------\n    *args : Any\n        Positional arguments to pass to the base Exception class.\n    errors : Optional[Errors]\n        A list of errors returned by the Harbor API.\n    **kwargs : Any\n        Keyword arguments to pass to the base Exception class.\n    \"\"\"\n    super().__init__(*args, **kwargs)\n\n    self.__cause__: Optional[HTTPStatusError] = None\n    \"\"\"The underlying HTTPX exception that caused this exception.\n    Automatically assigned when raised from a HTTPX exception.\"\"\"\n\n    self.errors: List[Error] = []\n    \"\"\"A list of errors returned by the Harbor API.\"\"\"\n    if isinstance(errors, Errors) and errors.errors:\n        self.errors = errors.errors\n</code></pre>"}, {"location": "reference/exceptions/#harborapi.exceptions.NotFound", "title": "<code>NotFound(*args, errors=None, **kwargs)</code>", "text": "<p>               Bases: <code>StatusError</code></p> Source code in <code>harborapi/exceptions.py</code> <pre><code>def __init__(\n    self,\n    *args: Any,\n    errors: Optional[Errors] = None,\n    **kwargs: Any,\n):\n    \"\"\"Initialize a StatusError.\n\n    Parameters\n    ----------\n    *args : Any\n        Positional arguments to pass to the base Exception class.\n    errors : Optional[Errors]\n        A list of errors returned by the Harbor API.\n    **kwargs : Any\n        Keyword arguments to pass to the base Exception class.\n    \"\"\"\n    super().__init__(*args, **kwargs)\n\n    self.__cause__: Optional[HTTPStatusError] = None\n    \"\"\"The underlying HTTPX exception that caused this exception.\n    Automatically assigned when raised from a HTTPX exception.\"\"\"\n\n    self.errors: List[Error] = []\n    \"\"\"A list of errors returned by the Harbor API.\"\"\"\n    if isinstance(errors, Errors) and errors.errors:\n        self.errors = errors.errors\n</code></pre>"}, {"location": "reference/exceptions/#harborapi.exceptions.MethodNotAllowed", "title": "<code>MethodNotAllowed(*args, errors=None, **kwargs)</code>", "text": "<p>               Bases: <code>StatusError</code></p> Source code in <code>harborapi/exceptions.py</code> <pre><code>def __init__(\n    self,\n    *args: Any,\n    errors: Optional[Errors] = None,\n    **kwargs: Any,\n):\n    \"\"\"Initialize a StatusError.\n\n    Parameters\n    ----------\n    *args : Any\n        Positional arguments to pass to the base Exception class.\n    errors : Optional[Errors]\n        A list of errors returned by the Harbor API.\n    **kwargs : Any\n        Keyword arguments to pass to the base Exception class.\n    \"\"\"\n    super().__init__(*args, **kwargs)\n\n    self.__cause__: Optional[HTTPStatusError] = None\n    \"\"\"The underlying HTTPX exception that caused this exception.\n    Automatically assigned when raised from a HTTPX exception.\"\"\"\n\n    self.errors: List[Error] = []\n    \"\"\"A list of errors returned by the Harbor API.\"\"\"\n    if isinstance(errors, Errors) and errors.errors:\n        self.errors = errors.errors\n</code></pre>"}, {"location": "reference/exceptions/#harborapi.exceptions.Conflict", "title": "<code>Conflict(*args, errors=None, **kwargs)</code>", "text": "<p>               Bases: <code>StatusError</code></p> Source code in <code>harborapi/exceptions.py</code> <pre><code>def __init__(\n    self,\n    *args: Any,\n    errors: Optional[Errors] = None,\n    **kwargs: Any,\n):\n    \"\"\"Initialize a StatusError.\n\n    Parameters\n    ----------\n    *args : Any\n        Positional arguments to pass to the base Exception class.\n    errors : Optional[Errors]\n        A list of errors returned by the Harbor API.\n    **kwargs : Any\n        Keyword arguments to pass to the base Exception class.\n    \"\"\"\n    super().__init__(*args, **kwargs)\n\n    self.__cause__: Optional[HTTPStatusError] = None\n    \"\"\"The underlying HTTPX exception that caused this exception.\n    Automatically assigned when raised from a HTTPX exception.\"\"\"\n\n    self.errors: List[Error] = []\n    \"\"\"A list of errors returned by the Harbor API.\"\"\"\n    if isinstance(errors, Errors) and errors.errors:\n        self.errors = errors.errors\n</code></pre>"}, {"location": "reference/exceptions/#harborapi.exceptions.PreconditionFailed", "title": "<code>PreconditionFailed(*args, errors=None, **kwargs)</code>", "text": "<p>               Bases: <code>StatusError</code></p> Source code in <code>harborapi/exceptions.py</code> <pre><code>def __init__(\n    self,\n    *args: Any,\n    errors: Optional[Errors] = None,\n    **kwargs: Any,\n):\n    \"\"\"Initialize a StatusError.\n\n    Parameters\n    ----------\n    *args : Any\n        Positional arguments to pass to the base Exception class.\n    errors : Optional[Errors]\n        A list of errors returned by the Harbor API.\n    **kwargs : Any\n        Keyword arguments to pass to the base Exception class.\n    \"\"\"\n    super().__init__(*args, **kwargs)\n\n    self.__cause__: Optional[HTTPStatusError] = None\n    \"\"\"The underlying HTTPX exception that caused this exception.\n    Automatically assigned when raised from a HTTPX exception.\"\"\"\n\n    self.errors: List[Error] = []\n    \"\"\"A list of errors returned by the Harbor API.\"\"\"\n    if isinstance(errors, Errors) and errors.errors:\n        self.errors = errors.errors\n</code></pre>"}, {"location": "reference/exceptions/#harborapi.exceptions.UnsupportedMediaType", "title": "<code>UnsupportedMediaType(*args, errors=None, **kwargs)</code>", "text": "<p>               Bases: <code>StatusError</code></p> Source code in <code>harborapi/exceptions.py</code> <pre><code>def __init__(\n    self,\n    *args: Any,\n    errors: Optional[Errors] = None,\n    **kwargs: Any,\n):\n    \"\"\"Initialize a StatusError.\n\n    Parameters\n    ----------\n    *args : Any\n        Positional arguments to pass to the base Exception class.\n    errors : Optional[Errors]\n        A list of errors returned by the Harbor API.\n    **kwargs : Any\n        Keyword arguments to pass to the base Exception class.\n    \"\"\"\n    super().__init__(*args, **kwargs)\n\n    self.__cause__: Optional[HTTPStatusError] = None\n    \"\"\"The underlying HTTPX exception that caused this exception.\n    Automatically assigned when raised from a HTTPX exception.\"\"\"\n\n    self.errors: List[Error] = []\n    \"\"\"A list of errors returned by the Harbor API.\"\"\"\n    if isinstance(errors, Errors) and errors.errors:\n        self.errors = errors.errors\n</code></pre>"}, {"location": "reference/exceptions/#harborapi.exceptions.UnprocessableEntity", "title": "<code>UnprocessableEntity(*args, errors=None, **kwargs)</code>", "text": "<p>               Bases: <code>StatusError</code></p> Source code in <code>harborapi/exceptions.py</code> <pre><code>def __init__(\n    self,\n    *args: Any,\n    errors: Optional[Errors] = None,\n    **kwargs: Any,\n):\n    \"\"\"Initialize a StatusError.\n\n    Parameters\n    ----------\n    *args : Any\n        Positional arguments to pass to the base Exception class.\n    errors : Optional[Errors]\n        A list of errors returned by the Harbor API.\n    **kwargs : Any\n        Keyword arguments to pass to the base Exception class.\n    \"\"\"\n    super().__init__(*args, **kwargs)\n\n    self.__cause__: Optional[HTTPStatusError] = None\n    \"\"\"The underlying HTTPX exception that caused this exception.\n    Automatically assigned when raised from a HTTPX exception.\"\"\"\n\n    self.errors: List[Error] = []\n    \"\"\"A list of errors returned by the Harbor API.\"\"\"\n    if isinstance(errors, Errors) and errors.errors:\n        self.errors = errors.errors\n</code></pre>"}, {"location": "reference/exceptions/#harborapi.exceptions.InternalServerError", "title": "<code>InternalServerError(*args, errors=None, **kwargs)</code>", "text": "<p>               Bases: <code>StatusError</code></p> Source code in <code>harborapi/exceptions.py</code> <pre><code>def __init__(\n    self,\n    *args: Any,\n    errors: Optional[Errors] = None,\n    **kwargs: Any,\n):\n    \"\"\"Initialize a StatusError.\n\n    Parameters\n    ----------\n    *args : Any\n        Positional arguments to pass to the base Exception class.\n    errors : Optional[Errors]\n        A list of errors returned by the Harbor API.\n    **kwargs : Any\n        Keyword arguments to pass to the base Exception class.\n    \"\"\"\n    super().__init__(*args, **kwargs)\n\n    self.__cause__: Optional[HTTPStatusError] = None\n    \"\"\"The underlying HTTPX exception that caused this exception.\n    Automatically assigned when raised from a HTTPX exception.\"\"\"\n\n    self.errors: List[Error] = []\n    \"\"\"A list of errors returned by the Harbor API.\"\"\"\n    if isinstance(errors, Errors) and errors.errors:\n        self.errors = errors.errors\n</code></pre>"}, {"location": "reference/exceptions/#harborapi.exceptions.check_response_status", "title": "<code>check_response_status(response, missing_ok=None)</code>", "text": "<p>Raises an exception if the response status is not 2xx.</p> <p>Exceptions are wrapped in a <code>StatusError</code> if the response contains errors.</p> <p>Parameters:</p> Name Type Description Default <code>response</code> <code>Response</code> <p>The response to check.</p> required <code>missing_ok</code> <code>Optional[bool]</code> <p>DEPRECATED: If <code>True</code>, do not raise an exception if the status is 404.</p> <code>None</code> Source code in <code>harborapi/exceptions.py</code> <pre><code>def check_response_status(\n    response: Response, missing_ok: Optional[bool] = None\n) -&gt; None:\n    \"\"\"Raises an exception if the response status is not 2xx.\n\n    Exceptions are wrapped in a `StatusError` if the response contains errors.\n\n    Parameters\n    ----------\n    response : Response\n        The response to check.\n    missing_ok : Optional[bool]\n        DEPRECATED: If `True`, do not raise an exception if the status is 404.\n    \"\"\"\n    if missing_ok is not None:\n        warnings.warn(\n            \"The 'missing_ok' parameter is deprecated and will be removed in version 1.0.0\",\n            DeprecationWarning,\n        )\n\n    try:\n        response.raise_for_status()\n    except HTTPStatusError as e:\n        status_code = response.status_code\n        # TODO: remove in v1.0.0\n        if missing_ok and status_code == 404:\n            logger.warning(\"%s not found\", response.request.url)\n            return\n        errors = try_parse_errors(response)\n        logger.error(\n            \"Harbor API returned status code %s for %s\",\n            response.status_code,\n            response.url,\n        )\n        exc = EXCEPTIONS_MAP.get(status_code, StatusError)\n        raise exc(*e.args, errors=errors) from e\n</code></pre>"}, {"location": "reference/exceptions/#harborapi.exceptions.try_parse_errors", "title": "<code>try_parse_errors(response)</code>", "text": "<p>Attempts to return the errors from a response.</p> <p>See: <code>models.Errors</code></p> <p>Parameters:</p> Name Type Description Default <code>response</code> <code>Response</code> required <p>Returns:</p> Type Description <code>Optional[Errors]</code> <p>The errors from the response.</p> Source code in <code>harborapi/exceptions.py</code> <pre><code>def try_parse_errors(response: Response) -&gt; Optional[Errors]:\n    \"\"\"Attempts to return the errors from a response.\n\n    See: `models.Errors`\n\n    Parameters\n    ----------\n    response : Response\n\n    Returns\n    -------\n    Optional[Errors]\n        The errors from the response.\n    \"\"\"\n    from .utils import is_json  # avoid circular import\n\n    if is_json(response):\n        try:\n            return Errors(**response.json())\n        except Exception as e:\n            logger.error(\n                \"Failed to parse error response from %s as JSON: %s\", response.url, e\n            )\n    return None\n</code></pre>"}, {"location": "reference/responselog/", "title": "harborapi.responselog", "text": "<p>A log of HTTP responses.</p> Source code in <code>harborapi/responselog.py</code> <pre><code>@dataclass\nclass ResponseLog:\n    \"\"\"A log of HTTP responses.\"\"\"\n\n    entries: Deque[ResponseLogEntry]\n\n    def __init__(self, max_logs: Optional[int] = None) -&gt; None:\n        \"\"\"Initialize the log.\"\"\"\n        self.entries = deque(maxlen=max_logs)\n\n    def add(self, entry: ResponseLogEntry) -&gt; None:\n        \"\"\"Add a new entry to the log.\"\"\"\n        self.entries.append(entry)\n\n    def resize(self, max_logs: int) -&gt; None:\n        \"\"\"Resize the log to the specified maximum number of entries.\"\"\"\n        self.entries = deque(self.entries, maxlen=max_logs)\n\n    def clear(self) -&gt; None:\n        \"\"\"Clear the log.\"\"\"\n        self.entries.clear()\n\n    def __iter__(self) -&gt; Iterator[ResponseLogEntry]:\n        \"\"\"Return an iterator over the entries in the log.\"\"\"\n        return iter(self.entries)\n\n    def __getitem__(self, index: int) -&gt; ResponseLogEntry:\n        \"\"\"Return the entry at the specified index.\"\"\"\n        return self.entries[index]\n\n    def __len__(self) -&gt; int:\n        \"\"\"Return the number of entries in the log.\"\"\"\n        return len(self.entries)\n</code></pre> <p>               Bases: <code>NamedTuple</code></p> <p>A log entry for an HTTP response.</p> Source code in <code>harborapi/responselog.py</code> <pre><code>class ResponseLogEntry(NamedTuple):\n    \"\"\"A log entry for an HTTP response.\"\"\"\n\n    url: URL\n    \"\"\"An httpx.URL object representing the URL of the request. Can be cast to string using `str()`.\"\"\"\n    method: str\n    \"\"\"The HTTP method used for the request.\"\"\"\n    status_code: int\n    \"\"\"The HTTP status code of the response.\"\"\"\n    duration: float\n    \"\"\"The duration of the full request/response cycle in seconds.\"\"\"\n    response_size: int\n    \"\"\"The size of the response body in bytes.\"\"\"\n\n    def __repr__(self) -&gt; str:\n        return f\"&lt;ResponseLogEntry [{self.method} {self.url} {self.status_code}]&gt;\"\n</code></pre>"}, {"location": "reference/responselog/#harborapi.responselog.ResponseLog.entries", "title": "<code>entries = deque(maxlen=max_logs)</code>  <code>instance-attribute</code>", "text": ""}, {"location": "reference/responselog/#harborapi.responselog.ResponseLog.__init__", "title": "<code>__init__(max_logs=None)</code>", "text": "<p>Initialize the log.</p> Source code in <code>harborapi/responselog.py</code> <pre><code>def __init__(self, max_logs: Optional[int] = None) -&gt; None:\n    \"\"\"Initialize the log.\"\"\"\n    self.entries = deque(maxlen=max_logs)\n</code></pre>"}, {"location": "reference/responselog/#harborapi.responselog.ResponseLog.add", "title": "<code>add(entry)</code>", "text": "<p>Add a new entry to the log.</p> Source code in <code>harborapi/responselog.py</code> <pre><code>def add(self, entry: ResponseLogEntry) -&gt; None:\n    \"\"\"Add a new entry to the log.\"\"\"\n    self.entries.append(entry)\n</code></pre>"}, {"location": "reference/responselog/#harborapi.responselog.ResponseLog.resize", "title": "<code>resize(max_logs)</code>", "text": "<p>Resize the log to the specified maximum number of entries.</p> Source code in <code>harborapi/responselog.py</code> <pre><code>def resize(self, max_logs: int) -&gt; None:\n    \"\"\"Resize the log to the specified maximum number of entries.\"\"\"\n    self.entries = deque(self.entries, maxlen=max_logs)\n</code></pre>"}, {"location": "reference/responselog/#harborapi.responselog.ResponseLog.clear", "title": "<code>clear()</code>", "text": "<p>Clear the log.</p> Source code in <code>harborapi/responselog.py</code> <pre><code>def clear(self) -&gt; None:\n    \"\"\"Clear the log.\"\"\"\n    self.entries.clear()\n</code></pre>"}, {"location": "reference/responselog/#harborapi.responselog.ResponseLog.__iter__", "title": "<code>__iter__()</code>", "text": "<p>Return an iterator over the entries in the log.</p> Source code in <code>harborapi/responselog.py</code> <pre><code>def __iter__(self) -&gt; Iterator[ResponseLogEntry]:\n    \"\"\"Return an iterator over the entries in the log.\"\"\"\n    return iter(self.entries)\n</code></pre>"}, {"location": "reference/responselog/#harborapi.responselog.ResponseLog.__getitem__", "title": "<code>__getitem__(index)</code>", "text": "<p>Return the entry at the specified index.</p> Source code in <code>harborapi/responselog.py</code> <pre><code>def __getitem__(self, index: int) -&gt; ResponseLogEntry:\n    \"\"\"Return the entry at the specified index.\"\"\"\n    return self.entries[index]\n</code></pre>"}, {"location": "reference/responselog/#harborapi.responselog.ResponseLog.__len__", "title": "<code>__len__()</code>", "text": "<p>Return the number of entries in the log.</p> Source code in <code>harborapi/responselog.py</code> <pre><code>def __len__(self) -&gt; int:\n    \"\"\"Return the number of entries in the log.\"\"\"\n    return len(self.entries)\n</code></pre>"}, {"location": "reference/responselog/#harborapi.responselog.ResponseLogEntry.url", "title": "<code>url</code>  <code>instance-attribute</code>", "text": "<p>An httpx.URL object representing the URL of the request. Can be cast to string using <code>str()</code>.</p>"}, {"location": "reference/responselog/#harborapi.responselog.ResponseLogEntry.method", "title": "<code>method</code>  <code>instance-attribute</code>", "text": "<p>The HTTP method used for the request.</p>"}, {"location": "reference/responselog/#harborapi.responselog.ResponseLogEntry.status_code", "title": "<code>status_code</code>  <code>instance-attribute</code>", "text": "<p>The HTTP status code of the response.</p>"}, {"location": "reference/responselog/#harborapi.responselog.ResponseLogEntry.duration", "title": "<code>duration</code>  <code>instance-attribute</code>", "text": "<p>The duration of the full request/response cycle in seconds.</p>"}, {"location": "reference/responselog/#harborapi.responselog.ResponseLogEntry.response_size", "title": "<code>response_size</code>  <code>instance-attribute</code>", "text": "<p>The size of the response body in bytes.</p>"}, {"location": "reference/responselog/#harborapi.responselog.ResponseLogEntry.__repr__", "title": "<code>__repr__()</code>", "text": "Source code in <code>harborapi/responselog.py</code> <pre><code>def __repr__(self) -&gt; str:\n    return f\"&lt;ResponseLogEntry [{self.method} {self.url} {self.status_code}]&gt;\"\n</code></pre>"}, {"location": "reference/retry/", "title": "harborapi.retry", "text": ""}, {"location": "reference/retry/#harborapi.retry.RETRY_ERRORS", "title": "<code>RETRY_ERRORS = (TimeoutException, NetworkError)</code>  <code>module-attribute</code>", "text": ""}, {"location": "reference/retry/#harborapi.retry.P", "title": "<code>P = ParamSpec('P')</code>  <code>module-attribute</code>", "text": ""}, {"location": "reference/retry/#harborapi.retry.T", "title": "<code>T = TypeVar('T')</code>  <code>module-attribute</code>", "text": ""}, {"location": "reference/retry/#harborapi.retry.RetrySettings", "title": "<code>RetrySettings</code>", "text": "<p>               Bases: <code>BaseModel</code></p> Source code in <code>harborapi/retry.py</code> <pre><code>class RetrySettings(BaseModel):\n    enabled: bool = Field(True, description=\"Whether to retry requests.\")\n    # Required argument for backoff.on_exception\n    exception: Union[Type[Exception], Tuple[Type[Exception], ...]] = Field(\n        RETRY_ERRORS,\n        description=\"Exception(s) to catch and retry on.\",\n    )\n\n    # Optional arguments for backoff.on_exception\n    max_tries: Optional[int] = Field(\n        default=None,\n        gt=0,\n        description=\"Maximum number of tries before giving up.\",\n    )\n    max_time: Optional[float] = Field(\n        default=60,\n        ge=0,\n        description=\"Maximum number of seconds to retry for.\",\n    )\n    wait_gen: _WaitGenerator = Field(\n        default=backoff.expo,\n        description=\"Function that generates wait times.\",\n    )\n    jitter: Union[_Jitterer, None] = Field(\n        default=backoff.full_jitter,\n        description=\"Function that jitters wait times.\",\n    )\n    giveup: _Predicate[Exception] = Field(\n        default=DEFAULT_PREDICATE,\n        description=\"Predicate function that determines if we should give up.\",\n    )\n    on_success: Union[_Handler, Iterable[_Handler], None] = Field(\n        default=None,\n        description=\"Function(s) to call on success.\",\n    )\n    on_backoff: Union[_Handler, Iterable[_Handler], None] = Field(\n        default=None,\n        description=\"Function(s) to call when backing off.\",\n    )\n    on_giveup: Union[_Handler, Iterable[_Handler], None] = Field(\n        default=None,\n        description=\"Function(s) to call when giving up.\",\n    )\n    raise_on_giveup: bool = Field(\n        default=True,\n        description=\"Whether to raise the exception when giving up.\",\n    )\n    model_config = ConfigDict(extra=\"allow\", validate_assignment=True)\n\n    @property\n    def wait_gen_kwargs(self) -&gt; Dict[str, Any]:\n        \"\"\"Dict of extra model fields.\"\"\"\n        fields = self.model_fields.keys()\n        return {\n            key: value for key, value in self.model_dump().items() if key not in fields\n        }\n</code></pre>"}, {"location": "reference/retry/#harborapi.retry.RetrySettings.enabled", "title": "<code>enabled = Field(True, description='Whether to retry requests.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/retry/#harborapi.retry.RetrySettings.exception", "title": "<code>exception = Field(RETRY_ERRORS, description='Exception(s) to catch and retry on.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/retry/#harborapi.retry.RetrySettings.max_tries", "title": "<code>max_tries = Field(default=None, gt=0, description='Maximum number of tries before giving up.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/retry/#harborapi.retry.RetrySettings.max_time", "title": "<code>max_time = Field(default=60, ge=0, description='Maximum number of seconds to retry for.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/retry/#harborapi.retry.RetrySettings.wait_gen", "title": "<code>wait_gen = Field(default=backoff.expo, description='Function that generates wait times.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/retry/#harborapi.retry.RetrySettings.jitter", "title": "<code>jitter = Field(default=backoff.full_jitter, description='Function that jitters wait times.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/retry/#harborapi.retry.RetrySettings.giveup", "title": "<code>giveup = Field(default=DEFAULT_PREDICATE, description='Predicate function that determines if we should give up.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/retry/#harborapi.retry.RetrySettings.on_success", "title": "<code>on_success = Field(default=None, description='Function(s) to call on success.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/retry/#harborapi.retry.RetrySettings.on_backoff", "title": "<code>on_backoff = Field(default=None, description='Function(s) to call when backing off.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/retry/#harborapi.retry.RetrySettings.on_giveup", "title": "<code>on_giveup = Field(default=None, description='Function(s) to call when giving up.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/retry/#harborapi.retry.RetrySettings.raise_on_giveup", "title": "<code>raise_on_giveup = Field(default=True, description='Whether to raise the exception when giving up.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/retry/#harborapi.retry.RetrySettings.model_config", "title": "<code>model_config = ConfigDict(extra='allow', validate_assignment=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/retry/#harborapi.retry.RetrySettings.wait_gen_kwargs", "title": "<code>wait_gen_kwargs</code>  <code>property</code>", "text": "<p>Dict of extra model fields.</p>"}, {"location": "reference/retry/#harborapi.retry.DEFAULT_PREDICATE", "title": "<code>DEFAULT_PREDICATE(e)</code>", "text": "<p>Predicate function that always returns False.</p> Source code in <code>harborapi/retry.py</code> <pre><code>def DEFAULT_PREDICATE(e: Exception) -&gt; bool:\n    \"\"\"Predicate function that always returns False.\"\"\"\n    return False\n</code></pre>"}, {"location": "reference/retry/#harborapi.retry.get_backoff_kwargs", "title": "<code>get_backoff_kwargs(client)</code>", "text": "Source code in <code>harborapi/retry.py</code> <pre><code>def get_backoff_kwargs(client: \"HarborAsyncClient\") -&gt; Dict[str, Any]:\n    retry_settings = client.retry\n\n    # We should never get here, but just in case...\n    assert retry_settings is not None, \"Client has no retry settings.\"\n\n    # Ignore RetrySettings.enabled, since we're already here.\n    # Callers should have checked that already.\n\n    return dict(\n        exception=retry_settings.exception,\n        max_tries=retry_settings.max_tries,\n        max_time=retry_settings.max_time,\n        wait_gen=retry_settings.wait_gen,\n        jitter=retry_settings.jitter,\n        giveup=retry_settings.giveup,\n        on_success=retry_settings.on_success,\n        on_backoff=retry_settings.on_backoff,\n        on_giveup=retry_settings.on_giveup,\n        raise_on_giveup=retry_settings.raise_on_giveup,\n        # extra model fields become **wait_gen_kwargs\n        **retry_settings.wait_gen_kwargs,\n    )\n</code></pre>"}, {"location": "reference/retry/#harborapi.retry.retry", "title": "<code>retry()</code>", "text": "<p>Adds retry functionality to a HarborAsyncClient method.</p> <p>NOTE: will fail if applied to any other class than HarborAsyncClient.</p> Source code in <code>harborapi/retry.py</code> <pre><code>def retry() -&gt; Callable[[Callable[P, T]], Callable[P, T]]:\n    \"\"\"Adds retry functionality to a HarborAsyncClient method.\n\n    NOTE: will fail if applied to any other class than HarborAsyncClient.\n    \"\"\"\n\n    def decorator(func: Callable[P, T]) -&gt; Callable[P, T]:\n        @functools.wraps(func)\n        def wrapper(*args: P.args, **kwargs: P.kwargs) -&gt; T:\n            if not args or not isinstance(args[0], _get_client_type()):\n                raise TypeError(\n                    \"retry decorator must be applied on a HarborAsyncClient method.\"\n                )\n            client = args[0]\n            if not client.retry or not client.retry.enabled:\n                return func(*args, **kwargs)\n\n            return backoff.on_exception(**get_backoff_kwargs(client))(func)(\n                *args, **kwargs\n            )\n\n        return wrapper\n\n    return decorator\n</code></pre>"}, {"location": "reference/retry/#backoff-types", "title": "Backoff types", "text": "<p>The following types come from the backoff package. They are documented here for convenience.</p>"}, {"location": "reference/retry/#backoff._typing._CallableT", "title": "<code>_CallableT = TypeVar('_CallableT', bound=Callable[..., Any])</code>  <code>module-attribute</code>", "text": ""}, {"location": "reference/retry/#backoff._typing._Handler", "title": "<code>_Handler = Union[Callable[[Details], None], Callable[[Details], Coroutine[Any, Any, None]]]</code>  <code>module-attribute</code>", "text": ""}, {"location": "reference/retry/#backoff._typing._Jitterer", "title": "<code>_Jitterer = Callable[[float], float]</code>  <code>module-attribute</code>", "text": ""}, {"location": "reference/retry/#backoff._typing._MaybeCallable", "title": "<code>_MaybeCallable = Union[T, Callable[[], T]]</code>  <code>module-attribute</code>", "text": ""}, {"location": "reference/retry/#backoff._typing._MaybeLogger", "title": "<code>_MaybeLogger = Union[str, logging.Logger, None]</code>  <code>module-attribute</code>", "text": ""}, {"location": "reference/retry/#backoff._typing._MaybeSequence", "title": "<code>_MaybeSequence = Union[T, Sequence[T]]</code>  <code>module-attribute</code>", "text": ""}, {"location": "reference/retry/#backoff._typing._WaitGenerator", "title": "<code>_WaitGenerator = Callable[..., Generator[float, None, None]]</code>  <code>module-attribute</code>", "text": ""}, {"location": "reference/retry/#backoff._typing._Details", "title": "<code>_Details</code>", "text": "<p>               Bases: <code>TypedDict</code></p>"}, {"location": "reference/retry/#backoff._typing._Details.target", "title": "<code>target</code>  <code>instance-attribute</code>", "text": ""}, {"location": "reference/retry/#backoff._typing._Details.args", "title": "<code>args</code>  <code>instance-attribute</code>", "text": ""}, {"location": "reference/retry/#backoff._typing._Details.kwargs", "title": "<code>kwargs</code>  <code>instance-attribute</code>", "text": ""}, {"location": "reference/retry/#backoff._typing._Details.tries", "title": "<code>tries</code>  <code>instance-attribute</code>", "text": ""}, {"location": "reference/retry/#backoff._typing._Details.elapsed", "title": "<code>elapsed</code>  <code>instance-attribute</code>", "text": ""}, {"location": "reference/retry/#backoff._typing.Details", "title": "<code>Details</code>", "text": "<p>               Bases: <code>_Details</code></p>"}, {"location": "reference/retry/#backoff._typing.Details.wait", "title": "<code>wait</code>  <code>instance-attribute</code>", "text": ""}, {"location": "reference/retry/#backoff._typing.Details.value", "title": "<code>value</code>  <code>instance-attribute</code>", "text": ""}, {"location": "reference/types/", "title": "harborapi.types", "text": "<p><code>harborapi.types</code> defines custom types for use with <code>harborapi</code>.</p>"}, {"location": "reference/types/#harborapi._types.JSONType", "title": "<code>JSONType = Union[Dict[str, Any], List[Any]]</code>  <code>module-attribute</code>", "text": ""}, {"location": "reference/types/#harborapi._types.QueryParamValue", "title": "<code>QueryParamValue = Union[PrimitiveData, Sequence[PrimitiveData]]</code>  <code>module-attribute</code>", "text": ""}, {"location": "reference/types/#harborapi._types.QueryParamMapping", "title": "<code>QueryParamMapping = MutableMapping[str, QueryParamValue]</code>  <code>module-attribute</code>", "text": ""}, {"location": "reference/utils/", "title": "harborapi.utils", "text": "<p><code>harborapi.utils</code> defines utility functions for use with <code>harborapi</code>.</p>"}, {"location": "reference/utils/#harborapi.utils.is_json", "title": "<code>is_json(response)</code>", "text": "<p>Determines if a response body has a json content type.</p> <p>Parameters:</p> Name Type Description Default <code>response</code> <code>Response</code> <p>The HTTPX response to check.</p> required <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if the response has a json content type, <code>False</code> otherwise.</p> Source code in <code>harborapi/utils.py</code> <pre><code>def is_json(response: Response) -&gt; bool:\n    \"\"\"Determines if a response body has a json content type.\n\n    Parameters\n    ----------\n    response : Response\n        The HTTPX response to check.\n\n    Returns\n    -------\n    bool\n        `True` if the response has a json content type, `False` otherwise.\n    \"\"\"\n    return response.headers.get(\"content-type\", \"\").startswith(\"application/json\")\n</code></pre>"}, {"location": "reference/utils/#harborapi.utils.handle_optional_json_response", "title": "<code>handle_optional_json_response(resp)</code>", "text": "<p>Attempt to parse response body as JSON, returning None if body is not JSON or is empty.</p> Source code in <code>harborapi/utils.py</code> <pre><code>def handle_optional_json_response(resp: Response) -&gt; Optional[JSONType]:\n    \"\"\"Attempt to parse response body as JSON, returning None if body is not JSON or is empty.\"\"\"\n    if not is_json(resp) or resp.status_code == 204:\n        return None\n    return handle_json_response(resp)\n</code></pre>"}, {"location": "reference/utils/#harborapi.utils.handle_json_response", "title": "<code>handle_json_response(resp)</code>", "text": "<p>Takes in a response and attempts to parse the body as JSON.</p> <p>If the response cannot be parsed, an exception is raised.</p> <p>Parameters:</p> Name Type Description Default <code>resp</code> <code>Response</code> <p>The HTTPX response to parse.</p> required <p>Returns:</p> Type Description <code>JSONType</code> <p>The parsed JSON response body.</p> <p>Raises:</p> Type Description <code>HarborAPIException</code> <p>Raised if the response body cannot be parsed as JSON. The <code>__cause__</code> attribute of the exception will be the original JSONDecodeError.</p> Source code in <code>harborapi/utils.py</code> <pre><code>def handle_json_response(resp: Response) -&gt; JSONType:\n    \"\"\"Takes in a response and attempts to parse the body as JSON.\n\n    If the response cannot be parsed, an exception is raised.\n\n    Parameters\n    ----------\n    resp : Response\n        The HTTPX response to parse.\n\n    Returns\n    -------\n    JSONType\n        The parsed JSON response body.\n\n    Raises\n    ------\n    HarborAPIException\n        Raised if the response body cannot be parsed as JSON.\n        The `__cause__` attribute of the exception will be the original\n        JSONDecodeError.\n    \"\"\"\n    try:\n        # We assume Harbor API returns dict or list.\n        # If not, they are breaking their own schema and that is not our fault\n        return cast(JSONType, resp.json())\n    except JSONDecodeError as e:\n        logger.error(\"Failed to parse JSON from %s: %s\", resp.url, e)\n        msg = f\"{resp.url} did not return valid JSON: {resp.text}\"\n        if \"/api/v2.0\" not in str(resp.url):\n            msg += \"\\nDid you remember to include /api/v2.0 in the server URL?\"\n        raise HarborAPIException(msg) from e\n</code></pre>"}, {"location": "reference/utils/#harborapi.utils.urlencode_repo", "title": "<code>urlencode_repo(repository_name)</code>", "text": "<p>URL-encode a repository name. The Harbor API requires names to be double URL-encoded for some reason. So we have to manually encode it here, and then let HTTPX encode it again when we make the request.</p> <p>Parameters:</p> Name Type Description Default <code>repository_name</code> <code>str</code> <p>The repository name to encode.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The encoded repository name.</p> Source code in <code>harborapi/utils.py</code> <pre><code>def urlencode_repo(repository_name: str) -&gt; str:\n    \"\"\"URL-encode a repository name.\n    The Harbor API requires names to be double URL-encoded for some reason.\n    So we have to manually encode it here, and then let HTTPX encode it again\n    when we make the request.\n\n    Parameters\n    ----------\n    repository_name : str\n        The repository name to encode.\n\n    Returns\n    -------\n    str\n        The encoded repository name.\n    \"\"\"\n    return quote_plus(quote_plus(repository_name))\n</code></pre>"}, {"location": "reference/utils/#harborapi.utils.urldecode_header", "title": "<code>urldecode_header(response, key)</code>", "text": "<p>URL decode a value of a specific key from a response's headers.</p> <p>Returns the decoded value, or an empty string if the header key is not present.</p> <p>Parameters:</p> Name Type Description Default <code>response</code> <code>Response</code> <p>The HTTPX response to parse.</p> required <code>key</code> <code>str</code> <p>The header key to decode.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The decoded header value, or an empty string if the header key is not present.</p> Source code in <code>harborapi/utils.py</code> <pre><code>def urldecode_header(response: Response, key: str) -&gt; str:\n    \"\"\"URL decode a value of a specific key from a response's headers.\n\n    Returns the decoded value, or an empty string if the header key is not present.\n\n    Parameters\n    ----------\n    response : Response\n        The HTTPX response to parse.\n    key : str\n        The header key to decode.\n\n    Returns\n    -------\n    str\n        The decoded header value, or an empty string if the header key is not present.\n    \"\"\"\n    return unquote_plus(response.headers.get(key, \"\"))\n</code></pre>"}, {"location": "reference/utils/#harborapi.utils.get_repo_path", "title": "<code>get_repo_path(project_name, repository_name)</code>", "text": "<p>Get a Harbor repository path given a project name and a repository name.</p> Example <pre><code>&gt;&gt;&gt; get_repo_path(\"library\", \"hello-w\u00d8rld\")\n'/projects/library/repositories/hello-w%25C3%2598rld'\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>project_name</code> <code>str</code> <p>The project name</p> required <code>repository_name</code> <code>str</code> <p>The repository name</p> required <p>Returns:</p> Type Description <code>str</code> <p>The repository path</p> Source code in <code>harborapi/utils.py</code> <pre><code>def get_repo_path(project_name: str, repository_name: str) -&gt; str:\n    \"\"\"Get a Harbor repository path given a project name and a repository name.\n\n    Example\n    -------\n    ```pycon\n    &gt;&gt;&gt; get_repo_path(\"library\", \"hello-w\u00d8rld\")\n    '/projects/library/repositories/hello-w%25C3%2598rld'\n    ```\n\n    Parameters\n    ----------\n    project_name : str\n        The project name\n    repository_name : str\n        The repository name\n\n    Returns\n    -------\n    str\n        The repository path\n    \"\"\"\n    repo_name = urlencode_repo(repository_name)\n    return f\"/projects/{project_name}/repositories/{repo_name}\"\n</code></pre>"}, {"location": "reference/utils/#harborapi.utils.get_artifact_path", "title": "<code>get_artifact_path(project_name, repository_name, reference)</code>", "text": "<p>Get artifact path given a project name, repo name and a reference (tag or digest)</p> Example <pre><code>&gt;&gt;&gt; get_artifact_path(\"library\", \"hello-w\u00d8rld\", \"latest\")\n'/projects/library/repositories/hello-w%25C3%2598rld/artifacts/latest'\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>project_name</code> <code>str</code> <p>The project name</p> required <code>repository_name</code> <code>str</code> <p>The repository name</p> required <code>reference</code> <code>str</code> <p>The tag or digest of the artifact</p> required <p>Returns:</p> Type Description <code>str</code> <p>The artifact path</p> Source code in <code>harborapi/utils.py</code> <pre><code>def get_artifact_path(project_name: str, repository_name: str, reference: str) -&gt; str:\n    \"\"\"Get artifact path given a project name, repo name and a reference (tag or digest)\n\n    Example\n    -------\n    ```pycon\n    &gt;&gt;&gt; get_artifact_path(\"library\", \"hello-w\u00d8rld\", \"latest\")\n    '/projects/library/repositories/hello-w%25C3%2598rld/artifacts/latest'\n    ```\n\n    Parameters\n    ----------\n    project_name : str\n        The project name\n    repository_name : str\n        The repository name\n    reference : str\n        The tag or digest of the artifact\n\n    Returns\n    -------\n    str\n        The artifact path\n    \"\"\"\n    repo_path = get_repo_path(project_name, repository_name)\n    return f\"{repo_path}/artifacts/{reference}\"\n</code></pre>"}, {"location": "reference/utils/#harborapi.utils.get_basicauth", "title": "<code>get_basicauth(username, secret)</code>", "text": "<p>Get HTTP basic access authentication credentials given a username and a secret.</p> <p>Parameters:</p> Name Type Description Default <code>username</code> <code>str</code> <p>The username to use for authentication.</p> required <code>secret</code> <code>str</code> <p>The secret (password) for the user.</p> required <p>Returns:</p> Type Description <code>SecretStr</code> <p>The credentials string used for HTTP basic access authentication, encoded in base64 as a Pydantic SecretStr, which prevents the credentials from leaking when printing locals. The string is a base64 encoded string of the form <code>username:secret</code>, and should not be considered secure, as it is not encrypted.</p> Source code in <code>harborapi/utils.py</code> <pre><code>def get_basicauth(username: str, secret: str) -&gt; SecretStr:\n    \"\"\"Get HTTP basic access authentication credentials given a username and a secret.\n\n    Parameters\n    ----------\n    username : str\n        The username to use for authentication.\n    secret : str\n        The secret (password) for the user.\n\n    Returns\n    -------\n    SecretStr\n        The credentials string used for HTTP basic access authentication,\n        encoded in base64 as a Pydantic SecretStr, which prevents the\n        credentials from leaking when printing locals.\n        The string is a base64 encoded string of the form `username:secret`,\n        and should not be considered secure, as it is not encrypted.\n    \"\"\"\n    val = b64encode(f\"{username}:{secret}\".encode(\"utf-8\")).decode(\"utf-8\")\n    return SecretStr(val)\n</code></pre>"}, {"location": "reference/utils/#harborapi.utils.parse_pagination_url", "title": "<code>parse_pagination_url(url, strip=True)</code>", "text": "<p>Parse pagination URL and return the next URL</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The pagination URL to parse</p> required <code>strip</code> <code>bool</code> <p>Whether to strip the /api/v2.x/ path from the URL</p> <code>True</code> <p>Returns:</p> Type Description <code>Optional[str]</code> <p>The next URL, or <code>None</code> if the URL relation is <code>prev</code> and <code>ignore_prev</code> is <code>True</code></p> Source code in <code>harborapi/utils.py</code> <pre><code>def parse_pagination_url(url: str, strip: bool = True) -&gt; Optional[str]:\n    \"\"\"Parse pagination URL and return the next URL\n\n    Parameters\n    ----------\n    url : str\n        The pagination URL to parse\n    strip : bool, optional\n        Whether to strip the /api/v2.x/ path from the URL\n\n    Returns\n    -------\n    Optional[str]\n        The next URL, or `None` if the URL relation is `prev` and `ignore_prev` is `True`\n    \"\"\"\n\n    match = PAGINATION_NEXT_PATTERN.search(url)\n    if not match:\n        return None\n\n    m = match.group(1)  # exclude rel=\"next\" from the match\n    if not strip:\n        return m\n\n    # Remove /api/v2.0/ from next link\n    # Yeah, this is a result of not including /api/v2.0/ in the URLs we call\n    # in the first place, but it's too late to change that now.\n    return API_PATH_PATTERN.sub(\"\", m)\n</code></pre>"}, {"location": "reference/utils/#harborapi.utils.get_project_headers", "title": "<code>get_project_headers(project_name_or_id)</code>", "text": "<p>Get HTTP header for identifying whether a Project Name or Project ID is used in an API call.</p> <p>If the value is an integer, it is assumed to be the Project ID. Otherwise, it is assumed to be the Project Name. This determines the value of the <code>X-Is-Resource-Name</code> header.</p> <p><code>X-Is-Resource-Name: true</code> means the value is a project name, <code>X-Is-Resource-Name: false</code> means the value is a project ID.</p> <p>Parameters:</p> Name Type Description Default <code>project_name_or_id</code> <code>Union[str, int]</code> <p>The project name or ID.</p> required <p>Returns:</p> Type Description <code>Dict[str, str]</code> <p>The headers to use for the request.</p> Source code in <code>harborapi/utils.py</code> <pre><code>def get_project_headers(project_name_or_id: Union[str, int]) -&gt; Dict[str, str]:\n    \"\"\"Get HTTP header for identifying whether a Project Name or\n    Project ID is used in an API call.\n\n    If the value is an integer, it is assumed to be the Project ID.\n    Otherwise, it is assumed to be the Project Name.\n    This determines the value of the `X-Is-Resource-Name` header.\n\n    `X-Is-Resource-Name: true` means the value is a project name,\n    `X-Is-Resource-Name: false` means the value is a project ID.\n\n    Parameters\n    ----------\n    project_name_or_id : Union[str, int]\n        The project name or ID.\n\n    Returns\n    -------\n    Dict[str, str]\n        The headers to use for the request.\n    \"\"\"\n    return {\"X-Is-Resource-Name\": str(isinstance(project_name_or_id, str)).lower()}\n</code></pre>"}, {"location": "reference/utils/#harborapi.utils.get_params", "title": "<code>get_params(**kwargs)</code>", "text": "<p>Get parameters for an API call as a dict, where <code>None</code> values are ignored.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <code>QueryParamValue</code> <p>The parameters to use for the request. Each keyword argument type must be a primitive, JSON-serializable type.</p> <code>{}</code> <p>Returns:</p> Type Description <code>QueryParamMapping</code> <p>The dict representation of the parameters with <code>None</code> values removed.</p> Source code in <code>harborapi/utils.py</code> <pre><code>def get_params(**kwargs: QueryParamValue) -&gt; QueryParamMapping:\n    \"\"\"Get parameters for an API call as a dict, where `None` values are ignored.\n\n    Parameters\n    ----------\n    **kwargs: ParamType\n        The parameters to use for the request.\n        Each keyword argument type must be a primitive, JSON-serializable type.\n\n    Returns\n    -------\n    QueryParamMapping\n        The dict representation of the parameters with `None` values removed.\n    \"\"\"\n    params: QueryParamMapping = {k: v for k, v in kwargs.items() if v is not None}\n    # Ensure that the \"query\" parameter is renamed to \"q\"\n    # We use \"query\" as the parameter name in this library, but \"q\" is the\n    # parameter name used by the Harbor API.\n    if \"query\" in params and not params.get(\"q\"):\n        params[\"q\"] = params.pop(\"query\")\n    return params\n</code></pre>"}, {"location": "reference/ext/api/", "title": "harborapi.ext.api", "text": "<p>The <code>harborapi.ext.api</code> module contains helper functions for performing common tasks with the Harbor API that are not included in the API spec, such as fetching all vulnerabilities for all artifacts in one or more projects or repositories, fetching all repositories in one or more projects, etc. These functions are implemented using the standard endpoint methods from <code>harborapi.HarborAsyncClient</code>.</p>"}, {"location": "reference/ext/api/#harborapi.ext.api.T", "title": "<code>T = TypeVar('T')</code>  <code>module-attribute</code>", "text": ""}, {"location": "reference/ext/api/#harborapi.ext.api.ExceptionCallback", "title": "<code>ExceptionCallback = Callable[[List[Exception]], None]</code>  <code>module-attribute</code>", "text": ""}, {"location": "reference/ext/api/#harborapi.ext.api.get_artifact", "title": "<code>get_artifact(client, project, repository, reference, with_report=True)</code>  <code>async</code>", "text": "<p>Fetch an artifact, optionally with a report.</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>HarborAsyncClient</code> <p>The client to use for the API call.</p> required <code>project</code> <code>str</code> <p>The artifact's project.</p> required <code>repository</code> <code>str</code> <p>The artifact's repository.</p> required <code>reference</code> <code>str</code> <p>The artifact's reference.</p> required <code>with_report</code> <code>bool</code> <p>Whether or not to fetch the artifact's report if it exists.</p> <code>True</code> Source code in <code>harborapi/ext/api.py</code> <pre><code>async def get_artifact(\n    client: HarborAsyncClient,\n    project: str,\n    repository: str,\n    reference: str,\n    with_report: bool = True,\n) -&gt; ArtifactInfo:\n    \"\"\"Fetch an artifact, optionally with a report.\n\n    Parameters\n    ----------\n    client : HarborAsyncClient\n        The client to use for the API call.\n    project : str\n        The artifact's project.\n    repository : str\n        The artifact's repository.\n    reference : str\n        The artifact's reference.\n    with_report : bool\n        Whether or not to fetch the artifact's report if it exists.\n    \"\"\"\n    artifact_task = asyncio.create_task(\n        client.get_artifact(\n            project_name=project,\n            repository_name=repository,\n            reference=reference,\n        )\n    )\n    repo_task = asyncio.create_task(\n        client.get_repository(\n            project_name=project,\n            repository_name=repository,\n        )\n    )\n\n    # Wait for both tasks to complete\n    await asyncio.wait([artifact_task, repo_task])\n\n    # Get the results of the coroutines\n    artifact = artifact_task.result()\n    repo = repo_task.result()\n\n    report = None\n    if with_report:\n        try:\n            report = await client.get_artifact_vulnerabilities(\n                project_name=project,\n                repository_name=repo.base_name,\n                reference=reference,\n            )\n        except NotFound:\n            pass\n\n    kwargs = {\"report\": report} if report else {}\n    return ArtifactInfo(artifact=artifact, repository=repo, **kwargs)\n</code></pre>"}, {"location": "reference/ext/api/#harborapi.ext.api.get_artifacts", "title": "<code>get_artifacts(client, projects=None, repositories=None, tag=None, query=None, callback=None, max_connections=5, **kwargs)</code>  <code>async</code>", "text": "<p>Fetch all artifacts in all repositories. Optionally specify a list of repositories or projects to fetch from.</p> <p>The Harbor API doesn't support getting all artifacts in all projects at once, so we have to retrieve all artifacts in each repository and then combine them.</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>HarborAsyncClient</code> <p>The client to use for the API call.</p> required <code>projects</code> <code>Optional[List[str]]</code> <p>List of projects to fetch artifacts from.</p> <code>None</code> <code>repositories</code> <code>Optional[str]]</code> <p>List of repositories to fetch artifacts from. Can be either the full name or only the repository name: <code>project/repo</code> or <code>repo</code>. <code>repo</code> matches all repositories in the specified projects with that name, while <code>project/repo</code> only matches the exact repository name. Names are case-sensitive. Missing repositories are silently skipped.</p> <code>None</code> <code>tag</code> <code>Optional[str]</code> <p>The tag to filter the artifacts by. A shorthand for <code>query=\"tags=&lt;tag&gt;\"</code>. If specified, the <code>query</code> argument is ignored.</p> <code>None</code> <code>query</code> <code>Optional[str]</code> <p>The query to filter the artifacts by. Follows the same format as the Harbor API. Has no effect if <code>tag</code> is specified.</p> <code>None</code> <code>callback</code> <code>Optional[Callable[[List[Exception]], None]]</code> <p>A callback function to handle exceptions raised by the API calls. The function takes a list of exceptions as its only argument. If not specified, exceptions are ignored. The function always fires even if there are no exceptions.</p> <code>None</code> <code>max_connections</code> <code>Optional[int]</code> <p>The maximum number of concurrent connections to open.</p> <code>5</code> <code>**kwargs</code> <code>Any</code> <p>Additional arguments to pass to the <code>HarborAsyncClient.get_artifacts</code> method.</p> <code>{}</code> <p>Returns:</p> Type Description <code>List[ArtifactInfo]</code> <p>A list of ArtifactInfo objects, without the .report field populated.</p> Source code in <code>harborapi/ext/api.py</code> <pre><code>async def get_artifacts(\n    client: HarborAsyncClient,\n    projects: Optional[List[str]] = None,\n    repositories: Optional[List[str]] = None,\n    tag: Optional[str] = None,\n    query: Optional[str] = None,\n    callback: Optional[Callable[[List[Exception]], None]] = None,\n    max_connections: Optional[int] = 5,\n    **kwargs: Any,\n) -&gt; List[ArtifactInfo]:\n    \"\"\"Fetch all artifacts in all repositories.\n    Optionally specify a list of repositories or projects to fetch from.\n\n    The Harbor API doesn't support getting all artifacts in all projects at once,\n    so we have to retrieve all artifacts in each repository and then combine them.\n\n    Parameters\n    ----------\n    client : HarborAsyncClient\n        The client to use for the API call.\n    projects : Optional[List[str]]\n        List of projects to fetch artifacts from.\n    repositories : Optional[str]]\n        List of repositories to fetch artifacts from.\n        Can be either the full name or only the repository name:\n        `project/repo` or `repo`. `repo` matches all repositories in the\n        specified projects with that name, while `project/repo` only matches\n        the exact repository name.\n        Names are case-sensitive.\n        Missing repositories are silently skipped.\n    tag : Optional[str]\n        The tag to filter the artifacts by.\n        A shorthand for `query=\"tags=&lt;tag&gt;\"`.\n        If specified, the `query` argument is ignored.\n    query : Optional[str]\n        The query to filter the artifacts by.\n        Follows the same format as the Harbor API.\n        Has no effect if `tag` is specified.\n    callback : Optional[Callable[[List[Exception]], None]]\n        A callback function to handle exceptions raised by the API calls.\n        The function takes a list of exceptions as its only argument.\n        If not specified, exceptions are ignored.\n        The function always fires even if there are no exceptions.\n    max_connections : Optional[int]\n        The maximum number of concurrent connections to open.\n    **kwargs : Any\n        Additional arguments to pass to the `HarborAsyncClient.get_artifacts` method.\n\n    Returns\n    -------\n    List[ArtifactInfo]\n        A list of ArtifactInfo objects, without the .report field populated.\n    \"\"\"\n    # Fetch repos first.\n    # We need these to construct the ArtifactInfo objects.\n    repos = await get_repositories(client, projects=projects)\n    if repositories:\n        repos = [\n            r for r in repos if r.name in repositories or r.base_name in repositories\n        ]\n    # FIXME: invalid repository names are silently skipped\n\n    # Fetch artifacts from each repository concurrently\n    coros = [\n        _get_artifacts_in_repository(client, repo, tag=tag, query=query, **kwargs)\n        for repo in repos\n    ]\n    a = await run_coros(coros, max_connections=max_connections)\n    return handle_gather(a, callback=callback)\n</code></pre>"}, {"location": "reference/ext/api/#harborapi.ext.api.get_repositories", "title": "<code>get_repositories(client, projects=None)</code>  <code>async</code>", "text": "<p>Fetch all repositories in all projects or a subset of projects.</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>HarborAsyncClient</code> <p>The client to use for the API call.</p> required <code>projects</code> <code>Optional[List[str]]</code> <p>The list of projects to fetch repositories from. If not specified, fetches all repos in all projects.</p> <code>None</code> <p>Returns:</p> Type Description <code>List[Repository]</code> <p>A list of Repository objects.</p> Source code in <code>harborapi/ext/api.py</code> <pre><code>async def get_repositories(\n    client: HarborAsyncClient,\n    projects: Optional[List[str]] = None,\n) -&gt; List[Repository]:\n    \"\"\"Fetch all repositories in all projects or a subset of projects.\n\n    Parameters\n    ----------\n    client : HarborAsyncClient\n        The client to use for the API call.\n    projects : Optional[List[str]]\n        The list of projects to fetch repositories from.\n        If not specified, fetches all repos in all projects.\n\n    Returns\n    -------\n    List[Repository]\n        A list of Repository objects.\n    \"\"\"\n    # We have 2 options for fetching repositories when projects are specified:\n    # 1. Fetch all repositories from all projects, and filter the results\n    # 2. Fetch all repositories from each project concurrently\n    #\n    # We use the first option, as it is simpler, and only requires 1 API call.\n    # Simple benchmarks revealed that the second option is slightly faster\n    # for a registry with 8 projects and a total of 359 repositories,\n    # but it's probably not worth the additional complexity cost it introduces.\n\n    repos = await client.get_repositories()\n    if projects:\n        # TODO: verify that the project_name property is correct in this regard\n        repos = [r for r in repos if r.project_name in projects]\n        # TODO: add warning if a project is not found\n        #       OR raise an error?!\n    return repos\n</code></pre>"}, {"location": "reference/ext/api/#harborapi.ext.api.get_artifact_vulnerabilities", "title": "<code>get_artifact_vulnerabilities(client, tags=None, projects=None, repositories=None, max_connections=5, callback=None, **kwargs)</code>  <code>async</code>", "text": "<p>Fetch all artifact vulnerability reports in all projects or a subset of projects, optionally filtered by tags.</p> <p>The Harbor API doesn't support getting all artifacts in all projects at once, so we have to retrieve all artifacts in each repository and then combine them into a single list of ArtifactInfo objects afterwards.</p> <p>Attempting to fetch all artifact vulnerability reports in all projects simultaneously will likely DoS your harbor instance, and as such it is not advisable to set <code>max_connections</code> to a large value. The default value of 5 is a known safe value, but you may need to experiment with your own instance to find the optimal value.</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>HarborAsyncClient</code> <p>The client to use for the API call.</p> required <code>tags</code> <code>Optional[List[str]]</code> <p>The tag(s) to filter the artifacts by.</p> <code>None</code> <code>projects</code> <code>Optional[List[str]]</code> <p>The project(s) to fetch artifacts from. If not specified, all projects will be used.</p> <code>None</code> <code>max_connections</code> <code>Optional[int]</code> <p>The maximum number of concurrent connections to the Harbor API. If None, the number of connections is unlimited. WARNING: uncapping connections will likely cause a DoS on the Harbor server.</p> <code>5</code> <code>callback</code> <code>Optional[Callable[[List[Exception]], None]]</code> <p>A callback function to handle exceptions raised by the API calls. The function takes a list of exceptions as its only argument. If not specified, exceptions are ignored. The function always fires even if there are no exceptions.</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Additional arguments to pass to the <code>HarborAsyncClient.get_artifacts</code> method.</p> <code>{}</code> <p>Returns:</p> Type Description <code>List[ArtifactInfo]</code> <p>A list of ArtifactInfo objects, where each object's <code>report</code> field is populated with the vulnerability report.</p> Source code in <code>harborapi/ext/api.py</code> <pre><code>async def get_artifact_vulnerabilities(\n    client: HarborAsyncClient,\n    tags: Optional[List[str]] = None,\n    projects: Optional[List[str]] = None,\n    repositories: Optional[List[str]] = None,\n    max_connections: Optional[int] = 5,\n    callback: Optional[Callable[[List[Exception]], None]] = None,\n    **kwargs: Any,\n) -&gt; List[ArtifactInfo]:\n    \"\"\"Fetch all artifact vulnerability reports in all projects or a subset of projects,\n    optionally filtered by tags.\n\n    The Harbor API doesn't support getting all artifacts in all projects at once,\n    so we have to retrieve all artifacts in each repository and then combine them\n    into a single list of ArtifactInfo objects afterwards.\n\n    Attempting to fetch all artifact vulnerability reports in all projects\n    simultaneously will likely DoS your harbor instance, and as such it is not advisable\n    to set `max_connections` to a large value. The default value of 5 is a known safe value,\n    but you may need to experiment with your own instance to find the optimal value.\n\n    Parameters\n    ----------\n    client : HarborAsyncClient\n        The client to use for the API call.\n    tags : Optional[List[str]]\n        The tag(s) to filter the artifacts by.\n    projects : Optional[List[str]]\n        The project(s) to fetch artifacts from.\n        If not specified, all projects will be used.\n    max_connections : Optional[int]\n        The maximum number of concurrent connections to the Harbor API.\n        If None, the number of connections is unlimited.\n        WARNING: uncapping connections will likely cause a DoS on the Harbor server.\n    callback : Optional[Callable[[List[Exception]], None]]\n        A callback function to handle exceptions raised by the API calls.\n        The function takes a list of exceptions as its only argument.\n        If not specified, exceptions are ignored.\n        The function always fires even if there are no exceptions.\n    **kwargs : Any\n        Additional arguments to pass to the `HarborAsyncClient.get_artifacts` method.\n\n    Returns\n    -------\n    List[ArtifactInfo]\n        A list of ArtifactInfo objects, where each object's `report` field\n        is populated with the vulnerability report.\n    \"\"\"\n\n    # We first retrieve all artifacts before we get the vulnerability reports\n    # since the reports themselves lack information about the artifact.\n    artifacts = await get_artifacts(\n        client,\n        projects=projects,\n        repositories=repositories,\n        tags=tags,\n        max_connections=max_connections,\n        callback=callback,\n        **kwargs,\n    )\n\n    # Filter out artifacts without a successful scan\n    # A failed scan will not produce a report\n    has_scan = []\n    for artifact in artifacts:\n        if artifact.artifact.scan_overview is None:\n            continue\n        try:\n            if artifact.artifact.scan_overview.scan_status == \"Success\":\n                has_scan.append(artifact)\n        except AttributeError:\n            continue\n\n    # We must fetch each report individually, since the API doesn't support\n    # getting all reports in one call.\n    # This is done concurrently to speed up the process.\n    coros = [_get_artifact_report(client, artifact) for artifact in has_scan]\n    artifacts = await run_coros(coros, max_connections=max_connections)\n    return handle_gather(artifacts, callback=callback)\n</code></pre>"}, {"location": "reference/ext/api/#harborapi.ext.api.run_coros", "title": "<code>run_coros(coros, max_connections)</code>  <code>async</code>", "text": "<p>Runs an iterable of coroutines concurrently and returns the results.</p> <p>Given a <code>max_connections</code> value, the number of concurrent coroutines is limited. All coroutines are run with <code>asyncio.gather(..., return_exceptions=True)</code>, so the list of results can contain exceptions, which must be handled by the caller.</p> <p>Parameters:</p> Name Type Description Default <code>coros</code> <code>Sequence[Awaitable[T]]</code> <p>An iterable of coroutines to run.</p> required <code>max_connections</code> <code>Optional[int]</code> <p>The maximum number of concurrent coroutines to run.</p> required <p>Returns:</p> Type Description <code>List[T]</code> <p>A list of results from running the coroutines, which may contain exceptions.</p> Source code in <code>harborapi/ext/api.py</code> <pre><code>async def run_coros(\n    coros: Sequence[Awaitable[T]],\n    max_connections: Optional[int],\n) -&gt; List[T]:\n    \"\"\"Runs an iterable of coroutines concurrently and returns the results.\n\n    Given a `max_connections` value, the number of concurrent coroutines is limited.\n    All coroutines are run with `asyncio.gather(..., return_exceptions=True)`,\n    so the list of results can contain exceptions, which must be handled\n    by the caller.\n\n    Parameters\n    ----------\n    coros : Sequence[Awaitable[T]]\n        An iterable of coroutines to run.\n    max_connections : Optional[int]\n        The maximum number of concurrent coroutines to run.\n\n    Returns\n    -------\n    List[T]\n        A list of results from running the coroutines, which may contain exceptions.\n    \"\"\"\n    results = []\n\n    # Create semaphore to limit concurrent connections\n    maxconn = max_connections or 0  # semamphore expects an int\n    sem = asyncio.Semaphore(maxconn)\n    logger.debug(\"Running with max connections: %s\", maxconn)\n\n    # Instead of passing the semaphore to each coroutine, we wrap each coroutine\n    # in a function that acquires the semaphore before calling the coroutine.\n    # This lets us run any coroutine without having to explicitly pass the semaphore.\n    async def _wrap_coro(coro: Awaitable[T]) -&gt; T:\n        async with sem:\n            return await coro\n\n    res = await asyncio.gather(\n        *[_wrap_coro(coro) for coro in coros], return_exceptions=True\n    )\n    results.extend(res)\n    return results\n</code></pre>"}, {"location": "reference/ext/api/#harborapi.ext.api.handle_gather", "title": "<code>handle_gather(results, callback=None)</code>", "text": "<p>Handles the returned values of an <code>asyncio.gather()</code> call, handling any exceptions and returning a list of the results with exceptions removed. Flattens lists of results. TODO: toggle this?</p> <p>Parameters:</p> Name Type Description Default <code>results</code> <code>(Sequence[Union[T, Sequence[T], Exception]],)</code> <p>The results of an <code>asyncio.gather()</code> call.</p> required <code>callback</code> <code>Optional[Callable[[List[Exception]], None]]</code> <p>A callback function to handle exceptions raised by the API calls. The function takes a list of exceptions as its only argument. If not specified, exceptions are ignored. The function always fires even if there are no exceptions.</p> <code>None</code> <p>Returns:</p> Type Description <code>List[T]</code> <p>The list of results with exceptions removed.</p> Source code in <code>harborapi/ext/api.py</code> <pre><code>def handle_gather(\n    results: Sequence[Union[T, Sequence[T], Exception]],\n    callback: Optional[Callable[[List[Exception]], None]] = None,\n) -&gt; List[T]:\n    \"\"\"Handles the returned values of an `asyncio.gather()` call, handling\n    any exceptions and returning a list of the results with exceptions removed.\n    Flattens lists of results. TODO: toggle this?\n\n    Parameters\n    ----------\n    results : Sequence[Union[T, Sequence[T], Exception]],\n        The results of an `asyncio.gather()` call.\n    callback : Optional[Callable[[List[Exception]], None]]\n        A callback function to handle exceptions raised by the API calls.\n        The function takes a list of exceptions as its only argument.\n        If not specified, exceptions are ignored.\n        The function always fires even if there are no exceptions.\n\n    Returns\n    -------\n    List[T]\n        The list of results with exceptions removed.\n    \"\"\"\n    ok = []  # type: List[T]\n    err = []  # type: List[Exception]\n    for res_or_exc in results:\n        if isinstance(res_or_exc, Exception):\n            err.append(res_or_exc)\n        else:\n            if isinstance(res_or_exc, Sequence):\n                ok.extend(res_or_exc)\n            else:\n                ok.append(res_or_exc)\n\n    if callback is not None:\n        callback(err)\n\n    return ok\n</code></pre>"}, {"location": "reference/ext/api/#harborapi.ext.api.get_artifact_owner", "title": "<code>get_artifact_owner(client, artifact)</code>  <code>async</code>", "text": "<p>Get the full owner information for an artifact.</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>HarborAsyncClient</code> <p>The client to use for the API call.</p> required <code>artifact</code> <code>Union[Artifact, ArtifactInfo]</code> <p>The artifact to get the owner for.</p> required <p>Returns:</p> Type Description <code>UserResp</code> <p>The full owner information for the artifact.</p> Source code in <code>harborapi/ext/api.py</code> <pre><code>async def get_artifact_owner(\n    client: HarborAsyncClient, artifact: Union[Artifact, ArtifactInfo]\n) -&gt; UserResp:\n    \"\"\"Get the full owner information for an artifact.\n\n    Parameters\n    ----------\n    client : HarborAsyncClient\n        The client to use for the API call.\n    artifact : Union[Artifact, ArtifactInfo]\n        The artifact to get the owner for.\n\n    Returns\n    -------\n    UserResp\n        The full owner information for the artifact.\n    \"\"\"\n    if isinstance(artifact, ArtifactInfo):\n        artifact = artifact.artifact\n    project_id = artifact.project_id\n    if project_id is None:\n        raise ValueError(\"Artifact has no project_id\")\n    project = await client.get_project(project_id)\n    if project.owner_id is None:\n        raise ValueError(\"Project has no owner_id\")\n    return await client.get_user(project.owner_id)\n</code></pre>"}, {"location": "reference/ext/artifact/", "title": "harborapi.ext.artifact", "text": "<p>Module that defines the <code>ArtifactInfo</code> class that aggregates information about an artifact from several Harbor API models.</p>"}, {"location": "reference/ext/artifact/#harborapi.ext.artifact.ArtifactInfo", "title": "<code>ArtifactInfo</code>", "text": "<p>               Bases: <code>BaseModel</code></p> <p>Class composed of models returned by the Harbor API that gives information about an artifact.</p> Source code in <code>harborapi/ext/artifact.py</code> <pre><code>class ArtifactInfo(BaseModel):\n    \"\"\"Class composed of models returned by the Harbor API\n    that gives information about an artifact.\"\"\"\n\n    artifact: Artifact\n    repository: Repository\n    report: HarborVulnerabilityReport = HarborVulnerabilityReport()\n    model_config = ConfigDict(ignored_types=(cached_property,))\n\n    @property\n    def __rich_panel_title__(self) -&gt; str:\n        return self.name_with_digest\n\n    @cached_property\n    def cvss(self) -&gt; CVSSData:\n        \"\"\"Key CVSS metrics for the artifact.\n\n        Returns\n        -------\n        CVSSData\n            Key CVSS metrics for the artifact.\n        \"\"\"\n        return CVSSData.from_artifactinfo(self)\n\n    @cached_property\n    def cvss_max(self) -&gt; float:\n        \"\"\"Maximum CVSS score of all vulnerabilities affecting the artifact.\n\n        Returns\n        -------\n        float\n            Maximum CVSS score of all vulnerabilities affecting the artifact.\n        \"\"\"\n        return max(self.report.cvss_scores, default=0.0)\n\n    @property\n    def name_with_digest(self) -&gt; str:\n        \"\"\"The name of the artifact with the first 15 characters of the\n        SHA256 digest, mimicking the notation used in the web interface.\n\n        Returns\n        -------\n        str\n            The artifact's name in the form of `project/repository@digest`.\n        \"\"\"\n        # The digest should always exist, but just in case:\n        digest = self.artifact.digest\n        if digest:\n            digest = digest[:15]  # mimic harbor digest notation\n        return f\"{self.repository.name}@{digest}\"\n\n    @property\n    def name_with_digest_full(self) -&gt; str:\n        \"\"\"The name of the artifact with its full SHA256 digest.\n\n        Returns\n        -------\n        str\n            The artifact's name in the form of `project/repository@digest`.\n        \"\"\"\n        # The digest should always exist, but just in case:\n        digest = self.artifact.digest or \"\"\n        return f\"{self.repository.name}@{digest}\"\n\n    @property\n    def name_with_tag(self) -&gt; str:\n        \"\"\"The name of the artifact as denoted by its primary tag.\n\n        Returns\n        -------\n        str\n            The artifact's name in the form of `project/repository:tag`.\n        \"\"\"\n        if self.tags:\n            tag = self.tags[0]\n        else:\n            tag = \"untagged\"\n        return f\"{self.repository.name}:{tag}\"\n\n    @property\n    def project_name(self) -&gt; str:\n        \"\"\"The name of the project that the artifact belongs to.\n\n        Returns\n        -------\n        str\n            The name of the project that the artifact belongs to.\n        \"\"\"\n        return self.repository.project_name\n\n    @property\n    def repository_name(self) -&gt; str:\n        \"\"\"Name of the repository that the artifact belongs to.\n\n        Returns\n        -------\n        str\n            Name of the repository that the artifact belongs to.\n        \"\"\"\n        return self.repository.base_name\n\n    @property\n    def tags(self) -&gt; List[str]:\n        \"\"\"Name of tags for the artifact.\n\n        Returns\n        -------\n        List[str]\n            The tags of the artifact.\n        \"\"\"\n        if not self.artifact.tags:\n            return []\n        return list(filter(None, (t.name for t in self.artifact.tags)))\n\n    def has_cve(self, cve_id: str) -&gt; bool:\n        \"\"\"Returns whether the artifact is affected by the given CVE ID.\n\n        Parameters\n        ----------\n        cve_id : str\n            The CVE ID, e.g. CVE-2019-1234.\n\n        Returns\n        -------\n        bool\n            Whether the artifact is affected by the given CVE ID.\n        \"\"\"\n        return self.vuln_with_cve(cve_id) is not None\n\n    def has_description(self, description: str, case_sensitive: bool = False) -&gt; bool:\n        \"\"\"Returns whether the artifact is affected by a vulnerability whose description\n        contains the given string.\n\n        Parameters\n        ----------\n        description : str\n            The string to search for in vulnerability descriptions.\n        case_sensitive : bool\n            Case sensitive matching\n\n        Returns\n        -------\n        bool\n            Whether the artifact is affected by a vulnerability whose description\n            contains the given string.\n        \"\"\"\n        for vuln in self.vulns_with_description(description, case_sensitive):\n            return True\n        return False\n\n    def has_package(\n        self,\n        package: str,\n        case_sensitive: bool = False,\n        min_version: Optional[VersionType] = None,\n        max_version: Optional[VersionType] = None,\n    ) -&gt; bool:\n        \"\"\"Returns whether the artifact is affected by a vulnerability whose affected\n        package matches the given string.\n\n        Parameters\n        ----------\n        package : str\n            The name of the package to search for.\n        case_sensitive : bool\n            Case sensitive matching\n        min_version : Optional[VersionType]\n            Minimum version of the package to match\n        max_version : Optional[VersionType]\n            Maximum version of the package to match\n\n        Returns\n        -------\n        bool\n            Whether the artifact is affected by a vulnerability whose affected\n            package matches the given string.\n        \"\"\"\n        minv = get_semver(min_version)\n        maxv = get_semver(max_version)\n        if maxv and minv:\n            if maxv &lt; minv:\n                raise ValueError(\n                    \"max_version must be greater than or equal to min_version\"\n                )\n\n        for vuln in self.vulns_with_package(package, case_sensitive):\n            if not vuln.semver:\n                continue\n            if min_version is not None and vuln.semver &lt; minv:\n                continue\n            if max_version is not None and vuln.semver &gt; maxv:\n                continue\n            return True\n        return False\n\n    def has_tag(self, tag: str) -&gt; bool:\n        \"\"\"Returns whether the artifact has the given tag.\n\n        Parameters\n        ----------\n        tag : str\n            The tag to search for.\n\n        Returns\n        -------\n        bool\n            Whether the artifact has the given tag.\n        \"\"\"\n        if not self.artifact.tags:\n            return False\n        pattern = get_pattern(tag)\n        for t in self.artifact.tags:\n            if t.name is None:\n                continue\n            if match(pattern, t.name):\n                return True\n        return False\n\n    def vuln_with_cve(self, cve: str) -&gt; Optional[VulnerabilityItem]:\n        \"\"\"Returns the vulnerability with the specified CVE ID if the artifact is\n        affected by it.\n\n        To just check if the artifact is affected by a given CVE, use [`has_cve()`][harborapi.ext.artifact.ArtifactInfo.has_cve].\n\n        Parameters\n        ----------\n        cve : str\n            The CVE ID of the vulnerability to return.\n            Supports regular expressions.\n\n        Returns\n        -------\n        Optional[VulnerabilityItem]\n            The vulnerability with the specified CVE ID if it exists, otherwise `None`.\n        \"\"\"\n        pattern = get_pattern(cve, case_sensitive=False)\n        for vuln in self.report.vulnerabilities:\n            if vuln.id is None:\n                continue\n            # Prioritize exact matches (inefficient? Add regex param?)\n            if vuln.id == cve or match(pattern, vuln.id):\n                return vuln\n        return None\n\n    def vulns_with_package(\n        self, package: str, case_sensitive: bool = False\n    ) -&gt; Iterable[VulnerabilityItem]:\n        \"\"\"Generator of all vulnerabilities whose affected package name contains the given string.\n\n        Parameters\n        ----------\n        package : str\n            The name of the affected package to search for.\n            Supports regular expressions.\n        case_sensitive : bool, optional\n            Case sensitive search, by default False\n\n        Yields\n        ------\n        VulnerabilityItem\n            Vulnerability that affects the given package.\n        \"\"\"\n        pattern = get_pattern(package, case_sensitive=case_sensitive)\n        for vuln in self.report.vulnerabilities:\n            # Can't compare with None\n            if vuln.package is None:\n                continue\n            if pattern.match(vuln.package):\n                yield vuln\n\n    def vulns_with_description(\n        self, description: str, case_sensitive: bool = False\n    ) -&gt; Iterable[VulnerabilityItem]:\n        \"\"\"Generator of all vulnerabilities whose description contains the given string.\n        Optionally, the comparison can be case sensitive.\n\n        Parameters\n        ----------\n        description : str\n            The string to search for in the vulnerability descriptions.\n            Supports regular expressions.\n        case_sensitive : Optional[bool]\n            Case sensitive comparison, by default False\n\n        Yields\n        ------\n        VulnerabilityItem\n            A vulnerability whose description contains the given string.\n        \"\"\"\n        pattern = get_pattern(description, case_sensitive=case_sensitive)\n        for vuln in self.report.vulnerabilities:\n            # Can't compare with None\n            if vuln.description is None:\n                continue\n            if match(pattern, vuln.description):\n                yield vuln\n</code></pre>"}, {"location": "reference/ext/artifact/#harborapi.ext.artifact.ArtifactInfo.cvss", "title": "<code>cvss</code>  <code>cached</code> <code>property</code>", "text": "<p>Key CVSS metrics for the artifact.</p> <p>Returns:</p> Type Description <code>CVSSData</code> <p>Key CVSS metrics for the artifact.</p>"}, {"location": "reference/ext/artifact/#harborapi.ext.artifact.ArtifactInfo.cvss_max", "title": "<code>cvss_max</code>  <code>cached</code> <code>property</code>", "text": "<p>Maximum CVSS score of all vulnerabilities affecting the artifact.</p> <p>Returns:</p> Type Description <code>float</code> <p>Maximum CVSS score of all vulnerabilities affecting the artifact.</p>"}, {"location": "reference/ext/artifact/#harborapi.ext.artifact.ArtifactInfo.name_with_digest", "title": "<code>name_with_digest</code>  <code>property</code>", "text": "<p>The name of the artifact with the first 15 characters of the SHA256 digest, mimicking the notation used in the web interface.</p> <p>Returns:</p> Type Description <code>str</code> <p>The artifact's name in the form of <code>project/repository@digest</code>.</p>"}, {"location": "reference/ext/artifact/#harborapi.ext.artifact.ArtifactInfo.name_with_digest_full", "title": "<code>name_with_digest_full</code>  <code>property</code>", "text": "<p>The name of the artifact with its full SHA256 digest.</p> <p>Returns:</p> Type Description <code>str</code> <p>The artifact's name in the form of <code>project/repository@digest</code>.</p>"}, {"location": "reference/ext/artifact/#harborapi.ext.artifact.ArtifactInfo.name_with_tag", "title": "<code>name_with_tag</code>  <code>property</code>", "text": "<p>The name of the artifact as denoted by its primary tag.</p> <p>Returns:</p> Type Description <code>str</code> <p>The artifact's name in the form of <code>project/repository:tag</code>.</p>"}, {"location": "reference/ext/artifact/#harborapi.ext.artifact.ArtifactInfo.project_name", "title": "<code>project_name</code>  <code>property</code>", "text": "<p>The name of the project that the artifact belongs to.</p> <p>Returns:</p> Type Description <code>str</code> <p>The name of the project that the artifact belongs to.</p>"}, {"location": "reference/ext/artifact/#harborapi.ext.artifact.ArtifactInfo.repository_name", "title": "<code>repository_name</code>  <code>property</code>", "text": "<p>Name of the repository that the artifact belongs to.</p> <p>Returns:</p> Type Description <code>str</code> <p>Name of the repository that the artifact belongs to.</p>"}, {"location": "reference/ext/artifact/#harborapi.ext.artifact.ArtifactInfo.tags", "title": "<code>tags</code>  <code>property</code>", "text": "<p>Name of tags for the artifact.</p> <p>Returns:</p> Type Description <code>List[str]</code> <p>The tags of the artifact.</p>"}, {"location": "reference/ext/artifact/#harborapi.ext.artifact.ArtifactInfo.has_cve", "title": "<code>has_cve(cve_id)</code>", "text": "<p>Returns whether the artifact is affected by the given CVE ID.</p> <p>Parameters:</p> Name Type Description Default <code>cve_id</code> <code>str</code> <p>The CVE ID, e.g. CVE-2019-1234.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>Whether the artifact is affected by the given CVE ID.</p> Source code in <code>harborapi/ext/artifact.py</code> <pre><code>def has_cve(self, cve_id: str) -&gt; bool:\n    \"\"\"Returns whether the artifact is affected by the given CVE ID.\n\n    Parameters\n    ----------\n    cve_id : str\n        The CVE ID, e.g. CVE-2019-1234.\n\n    Returns\n    -------\n    bool\n        Whether the artifact is affected by the given CVE ID.\n    \"\"\"\n    return self.vuln_with_cve(cve_id) is not None\n</code></pre>"}, {"location": "reference/ext/artifact/#harborapi.ext.artifact.ArtifactInfo.has_description", "title": "<code>has_description(description, case_sensitive=False)</code>", "text": "<p>Returns whether the artifact is affected by a vulnerability whose description contains the given string.</p> <p>Parameters:</p> Name Type Description Default <code>description</code> <code>str</code> <p>The string to search for in vulnerability descriptions.</p> required <code>case_sensitive</code> <code>bool</code> <p>Case sensitive matching</p> <code>False</code> <p>Returns:</p> Type Description <code>bool</code> <p>Whether the artifact is affected by a vulnerability whose description contains the given string.</p> Source code in <code>harborapi/ext/artifact.py</code> <pre><code>def has_description(self, description: str, case_sensitive: bool = False) -&gt; bool:\n    \"\"\"Returns whether the artifact is affected by a vulnerability whose description\n    contains the given string.\n\n    Parameters\n    ----------\n    description : str\n        The string to search for in vulnerability descriptions.\n    case_sensitive : bool\n        Case sensitive matching\n\n    Returns\n    -------\n    bool\n        Whether the artifact is affected by a vulnerability whose description\n        contains the given string.\n    \"\"\"\n    for vuln in self.vulns_with_description(description, case_sensitive):\n        return True\n    return False\n</code></pre>"}, {"location": "reference/ext/artifact/#harborapi.ext.artifact.ArtifactInfo.has_package", "title": "<code>has_package(package, case_sensitive=False, min_version=None, max_version=None)</code>", "text": "<p>Returns whether the artifact is affected by a vulnerability whose affected package matches the given string.</p> <p>Parameters:</p> Name Type Description Default <code>package</code> <code>str</code> <p>The name of the package to search for.</p> required <code>case_sensitive</code> <code>bool</code> <p>Case sensitive matching</p> <code>False</code> <code>min_version</code> <code>Optional[VersionType]</code> <p>Minimum version of the package to match</p> <code>None</code> <code>max_version</code> <code>Optional[VersionType]</code> <p>Maximum version of the package to match</p> <code>None</code> <p>Returns:</p> Type Description <code>bool</code> <p>Whether the artifact is affected by a vulnerability whose affected package matches the given string.</p> Source code in <code>harborapi/ext/artifact.py</code> <pre><code>def has_package(\n    self,\n    package: str,\n    case_sensitive: bool = False,\n    min_version: Optional[VersionType] = None,\n    max_version: Optional[VersionType] = None,\n) -&gt; bool:\n    \"\"\"Returns whether the artifact is affected by a vulnerability whose affected\n    package matches the given string.\n\n    Parameters\n    ----------\n    package : str\n        The name of the package to search for.\n    case_sensitive : bool\n        Case sensitive matching\n    min_version : Optional[VersionType]\n        Minimum version of the package to match\n    max_version : Optional[VersionType]\n        Maximum version of the package to match\n\n    Returns\n    -------\n    bool\n        Whether the artifact is affected by a vulnerability whose affected\n        package matches the given string.\n    \"\"\"\n    minv = get_semver(min_version)\n    maxv = get_semver(max_version)\n    if maxv and minv:\n        if maxv &lt; minv:\n            raise ValueError(\n                \"max_version must be greater than or equal to min_version\"\n            )\n\n    for vuln in self.vulns_with_package(package, case_sensitive):\n        if not vuln.semver:\n            continue\n        if min_version is not None and vuln.semver &lt; minv:\n            continue\n        if max_version is not None and vuln.semver &gt; maxv:\n            continue\n        return True\n    return False\n</code></pre>"}, {"location": "reference/ext/artifact/#harborapi.ext.artifact.ArtifactInfo.has_tag", "title": "<code>has_tag(tag)</code>", "text": "<p>Returns whether the artifact has the given tag.</p> <p>Parameters:</p> Name Type Description Default <code>tag</code> <code>str</code> <p>The tag to search for.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>Whether the artifact has the given tag.</p> Source code in <code>harborapi/ext/artifact.py</code> <pre><code>def has_tag(self, tag: str) -&gt; bool:\n    \"\"\"Returns whether the artifact has the given tag.\n\n    Parameters\n    ----------\n    tag : str\n        The tag to search for.\n\n    Returns\n    -------\n    bool\n        Whether the artifact has the given tag.\n    \"\"\"\n    if not self.artifact.tags:\n        return False\n    pattern = get_pattern(tag)\n    for t in self.artifact.tags:\n        if t.name is None:\n            continue\n        if match(pattern, t.name):\n            return True\n    return False\n</code></pre>"}, {"location": "reference/ext/artifact/#harborapi.ext.artifact.ArtifactInfo.vuln_with_cve", "title": "<code>vuln_with_cve(cve)</code>", "text": "<p>Returns the vulnerability with the specified CVE ID if the artifact is affected by it.</p> <p>To just check if the artifact is affected by a given CVE, use <code>has_cve()</code>.</p> <p>Parameters:</p> Name Type Description Default <code>cve</code> <code>str</code> <p>The CVE ID of the vulnerability to return. Supports regular expressions.</p> required <p>Returns:</p> Type Description <code>Optional[VulnerabilityItem]</code> <p>The vulnerability with the specified CVE ID if it exists, otherwise <code>None</code>.</p> Source code in <code>harborapi/ext/artifact.py</code> <pre><code>def vuln_with_cve(self, cve: str) -&gt; Optional[VulnerabilityItem]:\n    \"\"\"Returns the vulnerability with the specified CVE ID if the artifact is\n    affected by it.\n\n    To just check if the artifact is affected by a given CVE, use [`has_cve()`][harborapi.ext.artifact.ArtifactInfo.has_cve].\n\n    Parameters\n    ----------\n    cve : str\n        The CVE ID of the vulnerability to return.\n        Supports regular expressions.\n\n    Returns\n    -------\n    Optional[VulnerabilityItem]\n        The vulnerability with the specified CVE ID if it exists, otherwise `None`.\n    \"\"\"\n    pattern = get_pattern(cve, case_sensitive=False)\n    for vuln in self.report.vulnerabilities:\n        if vuln.id is None:\n            continue\n        # Prioritize exact matches (inefficient? Add regex param?)\n        if vuln.id == cve or match(pattern, vuln.id):\n            return vuln\n    return None\n</code></pre>"}, {"location": "reference/ext/artifact/#harborapi.ext.artifact.ArtifactInfo.vulns_with_package", "title": "<code>vulns_with_package(package, case_sensitive=False)</code>", "text": "<p>Generator of all vulnerabilities whose affected package name contains the given string.</p> <p>Parameters:</p> Name Type Description Default <code>package</code> <code>str</code> <p>The name of the affected package to search for. Supports regular expressions.</p> required <code>case_sensitive</code> <code>bool</code> <p>Case sensitive search, by default False</p> <code>False</code> <p>Yields:</p> Type Description <code>VulnerabilityItem</code> <p>Vulnerability that affects the given package.</p> Source code in <code>harborapi/ext/artifact.py</code> <pre><code>def vulns_with_package(\n    self, package: str, case_sensitive: bool = False\n) -&gt; Iterable[VulnerabilityItem]:\n    \"\"\"Generator of all vulnerabilities whose affected package name contains the given string.\n\n    Parameters\n    ----------\n    package : str\n        The name of the affected package to search for.\n        Supports regular expressions.\n    case_sensitive : bool, optional\n        Case sensitive search, by default False\n\n    Yields\n    ------\n    VulnerabilityItem\n        Vulnerability that affects the given package.\n    \"\"\"\n    pattern = get_pattern(package, case_sensitive=case_sensitive)\n    for vuln in self.report.vulnerabilities:\n        # Can't compare with None\n        if vuln.package is None:\n            continue\n        if pattern.match(vuln.package):\n            yield vuln\n</code></pre>"}, {"location": "reference/ext/artifact/#harborapi.ext.artifact.ArtifactInfo.vulns_with_description", "title": "<code>vulns_with_description(description, case_sensitive=False)</code>", "text": "<p>Generator of all vulnerabilities whose description contains the given string. Optionally, the comparison can be case sensitive.</p> <p>Parameters:</p> Name Type Description Default <code>description</code> <code>str</code> <p>The string to search for in the vulnerability descriptions. Supports regular expressions.</p> required <code>case_sensitive</code> <code>Optional[bool]</code> <p>Case sensitive comparison, by default False</p> <code>False</code> <p>Yields:</p> Type Description <code>VulnerabilityItem</code> <p>A vulnerability whose description contains the given string.</p> Source code in <code>harborapi/ext/artifact.py</code> <pre><code>def vulns_with_description(\n    self, description: str, case_sensitive: bool = False\n) -&gt; Iterable[VulnerabilityItem]:\n    \"\"\"Generator of all vulnerabilities whose description contains the given string.\n    Optionally, the comparison can be case sensitive.\n\n    Parameters\n    ----------\n    description : str\n        The string to search for in the vulnerability descriptions.\n        Supports regular expressions.\n    case_sensitive : Optional[bool]\n        Case sensitive comparison, by default False\n\n    Yields\n    ------\n    VulnerabilityItem\n        A vulnerability whose description contains the given string.\n    \"\"\"\n    pattern = get_pattern(description, case_sensitive=case_sensitive)\n    for vuln in self.report.vulnerabilities:\n        # Can't compare with None\n        if vuln.description is None:\n            continue\n        if match(pattern, vuln.description):\n            yield vuln\n</code></pre>"}, {"location": "reference/ext/artifact/#harborapi.ext.artifact.filter_artifacts_latest", "title": "<code>filter_artifacts_latest(artifacts, fallback=None)</code>  <code>async</code>", "text": "<p>Get the latest version of all artifacts from a list of ArtifactInfo objects.</p> <p>Optionally takes a comparison function to fall back on if the push time of two artifacts are the same, or if one of the artifacts being compared doesn't have a push time.</p> Example <pre><code># Our comparison function used to determine which artifact is the latest\n# (don't actually compare digests, use a better heuristic for your use case)\ndef compare_artifacts(latest_artifact, other_artifact):\n    # we know they have no push_time, so we compare digests\n    if latest_artifact.artifact.digest and other_artifact.artifact.digest:\n        return latest_artifact if latest_artifact.artifact.digest &gt; other_artifact.artifact.digest else other_artifact\n    return latest_artifact # fallback if no digest\n\nartifacts = await get_artifacts(client)\nlatest_artifacts = filter_artifacts_latest(artifacts, compare_artifacts)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>artifacts</code> <code>List[ArtifactInfo]</code> <p>The list of artifacts to filter.</p> required <code>fallback</code> <code>Optional[Callable[[ArtifactInfo, ArtifactInfo], ArtifactInfo]]</code> <p>Optional comparison function to use if one of the artifacts has no <code>push_time</code>. The function should take two ArtifactInfo objects <code>(latest_artifact, other_artifact)</code> and return the one deemed to be the latest. If not specified, artifacts without <code>push_time</code> are ignored.</p> <code>None</code> <p>Returns:</p> Type Description <code>List[ArtifactInfo]</code> <p>A list of ArtifactInfo objects, with the latest artifact for each repository.</p> Source code in <code>harborapi/ext/artifact.py</code> <pre><code>async def filter_artifacts_latest(\n    artifacts: List[ArtifactInfo],\n    fallback: Optional[Callable[[ArtifactInfo, ArtifactInfo], ArtifactInfo]] = None,\n) -&gt; List[ArtifactInfo]:\n    \"\"\"Get the latest version of all artifacts from a list of ArtifactInfo objects.\n\n    Optionally takes a comparison function to fall back on if the push time of two artifacts\n    are the same, or if one of the artifacts being compared doesn't have a push time.\n\n    Example\n    -------\n    ```py\n    # Our comparison function used to determine which artifact is the latest\n    # (don't actually compare digests, use a better heuristic for your use case)\n    def compare_artifacts(latest_artifact, other_artifact):\n        # we know they have no push_time, so we compare digests\n        if latest_artifact.artifact.digest and other_artifact.artifact.digest:\n            return latest_artifact if latest_artifact.artifact.digest &gt; other_artifact.artifact.digest else other_artifact\n        return latest_artifact # fallback if no digest\n\n    artifacts = await get_artifacts(client)\n    latest_artifacts = filter_artifacts_latest(artifacts, compare_artifacts)\n    ```\n\n    Parameters\n    ----------\n    artifacts : List[ArtifactInfo]\n        The list of artifacts to filter.\n    fallback : Optional[Callable[[ArtifactInfo, ArtifactInfo], ArtifactInfo]]\n        Optional comparison function to use if one of the artifacts has no `push_time`.\n        The function should take two ArtifactInfo objects `(latest_artifact, other_artifact)`\n        and return the one deemed to be the latest.\n        If not specified, artifacts without `push_time` are ignored.\n\n    Returns\n    -------\n    List[ArtifactInfo]\n        A list of ArtifactInfo objects, with the latest artifact for each repository.\n    \"\"\"\n\n    art = {}  # type: Dict[str, ArtifactInfo]\n    for a in artifacts:\n        # should never happen, but spec says this can be None\n        if not a.repository.name:\n            continue\n\n        newest = art.get(a.repository.name)\n\n        # if no newest, set first as newest\n        if not newest:\n            art[a.repository.name] = a\n            continue\n\n        # if one of the artifacts does not have a push time or the two artifacts\n        # have the same push time, fall back on comparison function or skip it\n        #\n        # FIXME: problematic if art[a.repository.name] has no push time (????)\n        if (\n            not a.artifact.push_time\n            or not newest.artifact.push_time\n            or a.artifact.push_time == newest.artifact.push_time\n        ):\n            # use fallback comparison function if provided, otherwise skip\n            if fallback is not None:\n                art[a.repository.name] = fallback(newest, a)\n            continue\n\n        # compare push times, pick most recent\n        if a.artifact.push_time &gt; newest.artifact.push_time:\n            art[a.repository.name] = a\n            continue\n\n    return list(art.values())\n</code></pre>"}, {"location": "reference/ext/cve/", "title": "harborapi.ext.cve", "text": "<p>The <code>harborapi.ext.cve</code> module provides functionality for working with CVSSv3 data.</p>"}, {"location": "reference/ext/cve/#harborapi.ext.cve.CVSSData", "title": "<code>CVSSData</code>", "text": "<p>               Bases: <code>BaseModel</code></p> <p>Key CVSS statistics for a scanned artifact.</p> Source code in <code>harborapi/ext/cve.py</code> <pre><code>class CVSSData(BaseModel):\n    \"\"\"Key CVSS statistics for a scanned artifact.\"\"\"\n\n    mean: float\n    median: float\n    stdev: float\n    min: float\n    max: float\n\n    @classmethod\n    def from_artifactinfo(cls, artifact: \"ArtifactInfo\") -&gt; \"CVSSData\":\n        \"\"\"Create a CVSSData instance from an ArtifactInfo object.\n\n        Parameters\n        ----------\n        artifact : ArtifactInfo\n            The artifact to extract CVSS data from.\n\n        Returns\n        -------\n        CVSSData\n            The CVSS data for the artifact.\n\n        See Also\n        --------\n        [ArtifactInfo.cvss][harborapi.ext.artifact.ArtifactInfo.cvss]\n        \"\"\"\n        scores = artifact.report.cvss_scores\n        return cls(\n            mean=stats.mean(scores),\n            median=stats.median(scores),\n            stdev=stats.stdev(scores),\n            min=stats.min(scores),\n            max=stats.max(scores),\n        )\n\n    @classmethod\n    def from_report(cls, report: \"ArtifactReport\") -&gt; \"CVSSData\":\n        \"\"\"Create a CVSSData instance from an ArtifactReport object.\n\n        Parameters\n        ----------\n        report : ArtifactReport\n            The report to extract CVSS data from.\n\n        Returns\n        -------\n        CVSSData\n            The CVSS data for the report.\n        \"\"\"\n        # Wrap generator in list to allow for re-use\n        scores = list(\n            chain.from_iterable([a.report.cvss_scores for a in report.artifacts])\n        )\n        return cls(\n            mean=stats.mean(scores),\n            median=stats.median(scores),\n            stdev=stats.stdev(scores),\n            min=stats.min(scores),\n            max=stats.max(scores),\n        )\n</code></pre>"}, {"location": "reference/ext/cve/#harborapi.ext.cve.CVSSData.from_artifactinfo", "title": "<code>from_artifactinfo(artifact)</code>  <code>classmethod</code>", "text": "<p>Create a CVSSData instance from an ArtifactInfo object.</p> <p>Parameters:</p> Name Type Description Default <code>artifact</code> <code>ArtifactInfo</code> <p>The artifact to extract CVSS data from.</p> required <p>Returns:</p> Type Description <code>CVSSData</code> <p>The CVSS data for the artifact.</p> See Also <p>ArtifactInfo.cvss</p> Source code in <code>harborapi/ext/cve.py</code> <pre><code>@classmethod\ndef from_artifactinfo(cls, artifact: \"ArtifactInfo\") -&gt; \"CVSSData\":\n    \"\"\"Create a CVSSData instance from an ArtifactInfo object.\n\n    Parameters\n    ----------\n    artifact : ArtifactInfo\n        The artifact to extract CVSS data from.\n\n    Returns\n    -------\n    CVSSData\n        The CVSS data for the artifact.\n\n    See Also\n    --------\n    [ArtifactInfo.cvss][harborapi.ext.artifact.ArtifactInfo.cvss]\n    \"\"\"\n    scores = artifact.report.cvss_scores\n    return cls(\n        mean=stats.mean(scores),\n        median=stats.median(scores),\n        stdev=stats.stdev(scores),\n        min=stats.min(scores),\n        max=stats.max(scores),\n    )\n</code></pre>"}, {"location": "reference/ext/cve/#harborapi.ext.cve.CVSSData.from_report", "title": "<code>from_report(report)</code>  <code>classmethod</code>", "text": "<p>Create a CVSSData instance from an ArtifactReport object.</p> <p>Parameters:</p> Name Type Description Default <code>report</code> <code>ArtifactReport</code> <p>The report to extract CVSS data from.</p> required <p>Returns:</p> Type Description <code>CVSSData</code> <p>The CVSS data for the report.</p> Source code in <code>harborapi/ext/cve.py</code> <pre><code>@classmethod\ndef from_report(cls, report: \"ArtifactReport\") -&gt; \"CVSSData\":\n    \"\"\"Create a CVSSData instance from an ArtifactReport object.\n\n    Parameters\n    ----------\n    report : ArtifactReport\n        The report to extract CVSS data from.\n\n    Returns\n    -------\n    CVSSData\n        The CVSS data for the report.\n    \"\"\"\n    # Wrap generator in list to allow for re-use\n    scores = list(\n        chain.from_iterable([a.report.cvss_scores for a in report.artifacts])\n    )\n    return cls(\n        mean=stats.mean(scores),\n        median=stats.median(scores),\n        stdev=stats.stdev(scores),\n        min=stats.min(scores),\n        max=stats.max(scores),\n    )\n</code></pre>"}, {"location": "reference/ext/report/", "title": "harborapi.ext.report", "text": "<p><code>harborapi.ext.report</code> defines classes and functions for aggregating the data of multiple artifacts, including their repositories and vulnerability reports.</p>"}, {"location": "reference/ext/report/#harborapi.ext.report.ArtifactCVSS", "title": "<code>ArtifactCVSS</code>  <code>dataclass</code>", "text": "Source code in <code>harborapi/ext/report.py</code> <pre><code>@dataclass\nclass ArtifactCVSS:\n    cvss: CVSSData\n    artifact: ArtifactInfo\n\n    @classmethod\n    def from_artifactinfo_cvss(cls, artifact: ArtifactInfo) -&gt; \"ArtifactCVSS\":\n        \"\"\"Create a CVSSData instance from an ArtifactInfo.\"\"\"\n        return cls(\n            cvss=artifact.cvss,\n            artifact=artifact,\n        )\n</code></pre>"}, {"location": "reference/ext/report/#harborapi.ext.report.ArtifactCVSS.from_artifactinfo_cvss", "title": "<code>from_artifactinfo_cvss(artifact)</code>  <code>classmethod</code>", "text": "<p>Create a CVSSData instance from an ArtifactInfo.</p> Source code in <code>harborapi/ext/report.py</code> <pre><code>@classmethod\ndef from_artifactinfo_cvss(cls, artifact: ArtifactInfo) -&gt; \"ArtifactCVSS\":\n    \"\"\"Create a CVSSData instance from an ArtifactInfo.\"\"\"\n    return cls(\n        cvss=artifact.cvss,\n        artifact=artifact,\n    )\n</code></pre>"}, {"location": "reference/ext/report/#harborapi.ext.report.ArtifactReport", "title": "<code>ArtifactReport</code>", "text": "<p>               Bases: <code>BaseModel</code></p> <p>Aggregation of artifacts and their vulnerabilities.</p> Source code in <code>harborapi/ext/report.py</code> <pre><code>class ArtifactReport(BaseModel):\n    \"\"\"Aggregation of artifacts and their vulnerabilities.\"\"\"\n\n    artifacts: List[ArtifactInfo] = []\n\n    model_config = ConfigDict(ignored_types=(cached_property,))\n\n    @field_validator(\"artifacts\", mode=\"before\")\n    def _none_artifacts_is_empty_list(cls, v: Any) -&gt; Any:\n        \"\"\"If `artifacts` is None, set it to an empty list.\"\"\"\n        if v is None:\n            return []\n        return v\n\n    @classmethod\n    def from_artifacts(cls, artifacts: Iterable[ArtifactInfo]) -&gt; \"ArtifactReport\":\n        \"\"\"Create an ArtifactReport from an iterable of ArtifactInfo instances.\n        Does not validate the artifacts for faster construction.\n\n        !!! warning\n            Only use this with artifacts that have already been validated,\n            (e.g. from an existing ArtifactReport).\n\n        Parameters\n        ----------\n        artifacts : Iterable[ArtifactInfo]\n            The artifacts to include in the report.\n\n        Returns\n        -------\n        ArtifactReport\n            A report with the given artifacts.\n        \"\"\"\n        return cls.model_construct(artifacts=artifacts)\n\n    def __bool__(self) -&gt; bool:\n        return bool(self.artifacts)\n\n    def __len__(self) -&gt; int:\n        return len(self.artifacts)\n\n    @property\n    def is_aggregate(self) -&gt; bool:\n        return len(self.artifacts) &gt; 1\n\n    @cached_property\n    def cvss(self) -&gt; CVSSData:\n        \"\"\"Get an aggregate of CVSS data for the artifacts in this report.\"\"\"\n        return CVSSData.from_report(self)\n\n    # TODO: The methods that return Iterable[Vulnerability] are inconsistent\n    # with the other methods that return ArtifactReport. We should probably\n    # change them to return ArtifactReport or Iterable[ArtifactInfo],\n    # or change their names to reflect that they return invididual vulnerabilities.\n\n    @property\n    def fixable(self) -&gt; Iterable[Vulnerability]:\n        \"\"\"Get all fixable vulnerabilities.\"\"\"\n        for a in self.artifacts:\n            for v in a.report.fixable:\n                yield Vulnerability(v, a)\n\n    @property\n    def unfixable(self) -&gt; Iterable[Vulnerability]:\n        \"\"\"Get all fixable vulnerabilities.\"\"\"\n        for a in self.artifacts:\n            for v in a.report.unfixable:\n                yield Vulnerability(v, a)\n\n    @property\n    def critical(self) -&gt; Iterable[Vulnerability]:\n        \"\"\"Get all critical vulnerabilities.\n\n        Yields\n        ------\n        Vulnerability\n            A vulnerability with its artifact.\n        \"\"\"\n        yield from self.vulnerabilities_by_severity(Severity.critical)\n\n    @property\n    def high(self) -&gt; Iterable[Vulnerability]:\n        \"\"\"Get all high vulnerabilities.\n\n        Yields\n        ------\n        Vulnerability\n            A vulnerability with its artifact.\n        \"\"\"\n        yield from self.vulnerabilities_by_severity(Severity.high)\n\n    @property\n    def medium(self) -&gt; Iterable[Vulnerability]:\n        \"\"\"Get all medium vulnerabilities.\n\n        Yields\n        ------\n        Vulnerability\n            A vulnerability with its artifact.\n        \"\"\"\n        yield from self.vulnerabilities_by_severity(Severity.medium)\n\n    @property\n    def low(self) -&gt; Iterable[Vulnerability]:\n        \"\"\"Get all low vulnerabilities.\n\n        Yields\n        ------\n        Vulnerability\n            A vulnerability with its artifact.\n        \"\"\"\n        yield from self.vulnerabilities_by_severity(Severity.low)\n\n    @property\n    def distribution(self) -&gt; \"Counter[Severity]\":\n        \"\"\"Get the distribution of severities from the vulnerabilities of all artifacts.\n\n        Example\n        -------\n        ```py\n        &gt;&gt;&gt; report.distribution\n        Counter({Severity.high: 2, Severity.medium: 1})\n        ```\n\n        Returns\n        -------\n        Counter[Severity]\n            A counter of the severities.\n        \"\"\"\n        dist = Counter()  # type: Counter[Severity]\n        for artifact in self.artifacts:\n            a_dist = artifact.report.distribution\n            dist.update(a_dist)\n        return dist\n\n    def vulnerabilities_by_severity(\n        self, severity: Severity\n    ) -&gt; Iterable[Vulnerability]:\n        for a in self.artifacts:\n            for v in a.report.vulnerabilities_by_severity(severity):\n                yield Vulnerability(v, a)\n\n    def has_cve(self, cve_id: str) -&gt; bool:\n        \"\"\"Check if any of the artifacts has the given CVE.\n\n        Parameters\n        ----------\n        cve_id : str\n            The CVE ID, e.g. CVE-2019-1234.\n\n        Returns\n        -------\n        bool\n            True if any of the artifacts has the given CVE, False otherwise.\n        \"\"\"\n        return any(a.has_cve(cve_id) for a in self.artifacts)\n\n    def with_cve(self, cve_id: str) -&gt; \"ArtifactReport\":\n        \"\"\"Get all artifacts that have the given CVE.\n\n        Parameters\n        ----------\n        cve_id : str\n            The CVE ID, e.g. CVE-2019-1234.\n\n        Returns\n        -------\n        ArtifactReport\n            A report with all artifacts that are affected by the given CVE.\n        \"\"\"\n        return ArtifactReport.from_artifacts(\n            [a for a in self.artifacts if a.has_cve(cve_id)]\n        )\n\n    def has_description(self, description: str, case_sensitive: bool = False) -&gt; bool:\n        \"\"\"Check if any of the artifacts have a vulnerability with a description\n        that contains the given string.\n\n        Parameters\n        ----------\n        description : str\n            The description to search for.\n        case_sensitive : bool\n            Whether the search should be case sensitive, by default False.\n\n        Returns\n        -------\n        bool\n            True if any of the artifacts has the given description, False otherwise.\n        \"\"\"\n        return any(\n            a.has_description(description, case_sensitive=case_sensitive)\n            for a in self.artifacts\n        )\n\n    def with_description(\n        self, description: str, case_sensitive: bool = False\n    ) -&gt; \"ArtifactReport\":\n        \"\"\"Get all artifacts that have a vulnerability containing the given string.\n\n        Parameters\n        ----------\n        description : str\n            The string to search for in vulnerability descriptions.\n        case_sensitive : bool\n            Case sensitive matching\n\n        Returns\n        -------\n        ArtifactReport\n            A report with all artifacts that have a vulnerability containing the given\n            string.\n        \"\"\"\n        return ArtifactReport.from_artifacts(\n            [\n                a\n                for a in self.artifacts\n                if a.has_description(description, case_sensitive)\n            ]\n        )\n\n    def has_package(\n        self,\n        package: str,\n        case_sensitive: bool = False,\n        min_version: Optional[VersionType] = None,\n        max_version: Optional[VersionType] = None,\n    ) -&gt; bool:\n        \"\"\"Check if any of the artifacts has the given package.\n\n        Parameters\n        ----------\n        package : str\n            The package name to search for.\n        case_sensitive : bool\n            Whether the search should be case sensitive, by default False.\n        min_version : Optional[VersionType]\n            The minimum version of the package to search for, by default None.\n        max_version : Optional[VersionType]\n            The maximum version of the package to search for, by default None.\n\n        Returns\n        -------\n        bool\n            True if any of the artifacts has the given package, False otherwise.\n        \"\"\"\n        return any(\n            a.has_package(\n                package,\n                case_sensitive=case_sensitive,\n                min_version=min_version,\n                max_version=max_version,\n            )\n            for a in self.artifacts\n        )\n\n    def with_package(\n        self,\n        package: str,\n        case_sensitive: bool = False,\n        min_version: Optional[VersionType] = None,\n        max_version: Optional[VersionType] = None,\n    ) -&gt; \"ArtifactReport\":\n        \"\"\"Get all artifacts that have a vulnerability affecting the given package.\n\n        Parameters\n        ----------\n        package : str\n            The name of the package to search for.\n            Supports regular expressions.\n        case_sensitive : bool\n            Case sensitive matching\n        min_version : Optional[VersionType]\n            The minimum version of the package to search for, by default None.\n        max_version : Optional[VersionType]\n            The maximum version of the package to search for, by default None.\n\n        Returns\n        -------\n        ArtifactReport\n            An artifact report with all artifacts that have a vulnerability affecting\n            the given package.\n        \"\"\"\n        return ArtifactReport.from_artifacts(\n            [\n                a\n                for a in self.artifacts\n                if a.has_package(\n                    package,\n                    case_sensitive,\n                    min_version=min_version,\n                    max_version=max_version,\n                )\n            ],\n        )\n\n    def has_severity(self, severity: Severity) -&gt; bool:\n        \"\"\"Check if any of the artifacts has a vulnerability with the given severity.\n\n        Parameters\n        ----------\n        severity : Severity\n            The severity to search for.\n\n        Returns\n        -------\n        bool\n            True if any of the artifacts has the given severity, False otherwise.\n        \"\"\"\n        return bool(self.with_severity(severity).artifacts)\n\n    def with_severity(self, severity: Severity) -&gt; \"ArtifactReport\":\n        \"\"\"Get all artifacts that have a report with the given severity.\n\n        Parameters\n        ----------\n        severity : Severity\n            The severity to search for.\n\n        Returns\n        -------\n        ArtifactReport\n            An artifact report with all artifacts that have a vulnerability with the\n            given severity.\n        \"\"\"\n        return ArtifactReport.from_artifacts(\n            [a for a in self.artifacts if a.report.severity == severity]\n        )\n\n    def has_repository(self, repository: str, case_sensitive: bool = False) -&gt; bool:\n        \"\"\"Check if any of the artifacts belong to the given repository.\n\n        Parameters\n        ----------\n        repository : str\n            The repository name to search for.\n            Supports regular expressons.\n        case_sensitive : bool, optional\n            Case sensitive search, by default False\n\n        Returns\n        -------\n        bool\n            Whether any of the artifacts belong to the given repository.\n        \"\"\"\n        return bool(self.with_repository(repository, case_sensitive).artifacts)\n\n    def with_repository(\n        self, repositories: Union[str, List[str]], case_sensitive: bool = False\n    ) -&gt; \"ArtifactReport\":\n        \"\"\"Return a new report with all artifacts belonging to one or more repositories.\n\n        Parameters\n        ----------\n        repositories : Union[str, List[str]]\n            A repository or a list of repositories to filter for.\n            Supports regular expressions.\n        case_sensitive : bool\n            Case sensitive repository name matching, by default False\n\n        Returns\n        -------\n        ArtifactReport\n            A new ArtifactReport where all artifacts belong to one of the given\n            repositories.\n        \"\"\"\n        # Docker doesn't allow upper-case letters in repository names, but\n        # I could not find any documentation on whether Harbor allows it.\n        # So we'll just assume that it does. Worst case scenario, the `case_sensitive`\n        # parameter will be redundant, but that's fine just to ensure compatibility.\n\n        if isinstance(repositories, str):\n            repositories = [repositories]\n        elif not isinstance(repositories, list) or not all(\n            isinstance(r, str) for r in repositories\n        ):\n            raise TypeError(\n                \"repositories must be either a string or a list of strings\"\n            )  # pragma: no cover\n\n        # Make regex pattern for each repository\n        # Our cache function only accepts string arguments, but it's fine to not\n        # use it here, since this method is not called nearly as often as the underlying\n        # `has_*` methods on the ArtifactInfo objects.\n        pattern = re.compile(\n            \"|\".join(repositories), flags=re.IGNORECASE if not case_sensitive else 0\n        )\n        return ArtifactReport.from_artifacts(\n            [\n                a\n                for a in self.artifacts\n                if a.repository.name and pattern.match(a.repository.name)\n            ]\n        )\n\n    def has_tag(self, tag: str) -&gt; bool:\n        \"\"\"Check if any of the artifacts has the given tag.\n\n        Parameters\n        ----------\n        tag : str\n            The tag to search for.\n\n        Returns\n        -------\n        bool\n            True if any of the artifacts has the given tag, False otherwise.\n        \"\"\"\n        return any(a.has_tag(tag) for a in self.artifacts)\n\n    def with_tag(self, tag: str) -&gt; \"ArtifactReport\":\n        \"\"\"Return a new report with all artifacts having the given tag.\n\n        Parameters\n        ----------\n        tag : str\n            The tag to filter for.\n\n        Returns\n        -------\n        ArtifactReport\n            A new ArtifactReport where all artifacts have the given tag.\n        \"\"\"\n        return ArtifactReport.from_artifacts(\n            [a for a in self.artifacts if a.has_tag(tag)]\n        )\n</code></pre>"}, {"location": "reference/ext/report/#harborapi.ext.report.ArtifactReport.cvss", "title": "<code>cvss</code>  <code>cached</code> <code>property</code>", "text": "<p>Get an aggregate of CVSS data for the artifacts in this report.</p>"}, {"location": "reference/ext/report/#harborapi.ext.report.ArtifactReport.fixable", "title": "<code>fixable</code>  <code>property</code>", "text": "<p>Get all fixable vulnerabilities.</p>"}, {"location": "reference/ext/report/#harborapi.ext.report.ArtifactReport.unfixable", "title": "<code>unfixable</code>  <code>property</code>", "text": "<p>Get all fixable vulnerabilities.</p>"}, {"location": "reference/ext/report/#harborapi.ext.report.ArtifactReport.critical", "title": "<code>critical</code>  <code>property</code>", "text": "<p>Get all critical vulnerabilities.</p> <p>Yields:</p> Type Description <code>Vulnerability</code> <p>A vulnerability with its artifact.</p>"}, {"location": "reference/ext/report/#harborapi.ext.report.ArtifactReport.high", "title": "<code>high</code>  <code>property</code>", "text": "<p>Get all high vulnerabilities.</p> <p>Yields:</p> Type Description <code>Vulnerability</code> <p>A vulnerability with its artifact.</p>"}, {"location": "reference/ext/report/#harborapi.ext.report.ArtifactReport.medium", "title": "<code>medium</code>  <code>property</code>", "text": "<p>Get all medium vulnerabilities.</p> <p>Yields:</p> Type Description <code>Vulnerability</code> <p>A vulnerability with its artifact.</p>"}, {"location": "reference/ext/report/#harborapi.ext.report.ArtifactReport.low", "title": "<code>low</code>  <code>property</code>", "text": "<p>Get all low vulnerabilities.</p> <p>Yields:</p> Type Description <code>Vulnerability</code> <p>A vulnerability with its artifact.</p>"}, {"location": "reference/ext/report/#harborapi.ext.report.ArtifactReport.distribution", "title": "<code>distribution</code>  <code>property</code>", "text": "<p>Get the distribution of severities from the vulnerabilities of all artifacts.</p> Example <pre><code>&gt;&gt;&gt; report.distribution\nCounter({Severity.high: 2, Severity.medium: 1})\n</code></pre> <p>Returns:</p> Type Description <code>Counter[Severity]</code> <p>A counter of the severities.</p>"}, {"location": "reference/ext/report/#harborapi.ext.report.ArtifactReport.from_artifacts", "title": "<code>from_artifacts(artifacts)</code>  <code>classmethod</code>", "text": "<p>Create an ArtifactReport from an iterable of ArtifactInfo instances. Does not validate the artifacts for faster construction.</p> <p>Warning</p> <p>Only use this with artifacts that have already been validated, (e.g. from an existing ArtifactReport).</p> <p>Parameters:</p> Name Type Description Default <code>artifacts</code> <code>Iterable[ArtifactInfo]</code> <p>The artifacts to include in the report.</p> required <p>Returns:</p> Type Description <code>ArtifactReport</code> <p>A report with the given artifacts.</p> Source code in <code>harborapi/ext/report.py</code> <pre><code>@classmethod\ndef from_artifacts(cls, artifacts: Iterable[ArtifactInfo]) -&gt; \"ArtifactReport\":\n    \"\"\"Create an ArtifactReport from an iterable of ArtifactInfo instances.\n    Does not validate the artifacts for faster construction.\n\n    !!! warning\n        Only use this with artifacts that have already been validated,\n        (e.g. from an existing ArtifactReport).\n\n    Parameters\n    ----------\n    artifacts : Iterable[ArtifactInfo]\n        The artifacts to include in the report.\n\n    Returns\n    -------\n    ArtifactReport\n        A report with the given artifacts.\n    \"\"\"\n    return cls.model_construct(artifacts=artifacts)\n</code></pre>"}, {"location": "reference/ext/report/#harborapi.ext.report.ArtifactReport.has_cve", "title": "<code>has_cve(cve_id)</code>", "text": "<p>Check if any of the artifacts has the given CVE.</p> <p>Parameters:</p> Name Type Description Default <code>cve_id</code> <code>str</code> <p>The CVE ID, e.g. CVE-2019-1234.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if any of the artifacts has the given CVE, False otherwise.</p> Source code in <code>harborapi/ext/report.py</code> <pre><code>def has_cve(self, cve_id: str) -&gt; bool:\n    \"\"\"Check if any of the artifacts has the given CVE.\n\n    Parameters\n    ----------\n    cve_id : str\n        The CVE ID, e.g. CVE-2019-1234.\n\n    Returns\n    -------\n    bool\n        True if any of the artifacts has the given CVE, False otherwise.\n    \"\"\"\n    return any(a.has_cve(cve_id) for a in self.artifacts)\n</code></pre>"}, {"location": "reference/ext/report/#harborapi.ext.report.ArtifactReport.with_cve", "title": "<code>with_cve(cve_id)</code>", "text": "<p>Get all artifacts that have the given CVE.</p> <p>Parameters:</p> Name Type Description Default <code>cve_id</code> <code>str</code> <p>The CVE ID, e.g. CVE-2019-1234.</p> required <p>Returns:</p> Type Description <code>ArtifactReport</code> <p>A report with all artifacts that are affected by the given CVE.</p> Source code in <code>harborapi/ext/report.py</code> <pre><code>def with_cve(self, cve_id: str) -&gt; \"ArtifactReport\":\n    \"\"\"Get all artifacts that have the given CVE.\n\n    Parameters\n    ----------\n    cve_id : str\n        The CVE ID, e.g. CVE-2019-1234.\n\n    Returns\n    -------\n    ArtifactReport\n        A report with all artifacts that are affected by the given CVE.\n    \"\"\"\n    return ArtifactReport.from_artifacts(\n        [a for a in self.artifacts if a.has_cve(cve_id)]\n    )\n</code></pre>"}, {"location": "reference/ext/report/#harborapi.ext.report.ArtifactReport.has_description", "title": "<code>has_description(description, case_sensitive=False)</code>", "text": "<p>Check if any of the artifacts have a vulnerability with a description that contains the given string.</p> <p>Parameters:</p> Name Type Description Default <code>description</code> <code>str</code> <p>The description to search for.</p> required <code>case_sensitive</code> <code>bool</code> <p>Whether the search should be case sensitive, by default False.</p> <code>False</code> <p>Returns:</p> Type Description <code>bool</code> <p>True if any of the artifacts has the given description, False otherwise.</p> Source code in <code>harborapi/ext/report.py</code> <pre><code>def has_description(self, description: str, case_sensitive: bool = False) -&gt; bool:\n    \"\"\"Check if any of the artifacts have a vulnerability with a description\n    that contains the given string.\n\n    Parameters\n    ----------\n    description : str\n        The description to search for.\n    case_sensitive : bool\n        Whether the search should be case sensitive, by default False.\n\n    Returns\n    -------\n    bool\n        True if any of the artifacts has the given description, False otherwise.\n    \"\"\"\n    return any(\n        a.has_description(description, case_sensitive=case_sensitive)\n        for a in self.artifacts\n    )\n</code></pre>"}, {"location": "reference/ext/report/#harborapi.ext.report.ArtifactReport.with_description", "title": "<code>with_description(description, case_sensitive=False)</code>", "text": "<p>Get all artifacts that have a vulnerability containing the given string.</p> <p>Parameters:</p> Name Type Description Default <code>description</code> <code>str</code> <p>The string to search for in vulnerability descriptions.</p> required <code>case_sensitive</code> <code>bool</code> <p>Case sensitive matching</p> <code>False</code> <p>Returns:</p> Type Description <code>ArtifactReport</code> <p>A report with all artifacts that have a vulnerability containing the given string.</p> Source code in <code>harborapi/ext/report.py</code> <pre><code>def with_description(\n    self, description: str, case_sensitive: bool = False\n) -&gt; \"ArtifactReport\":\n    \"\"\"Get all artifacts that have a vulnerability containing the given string.\n\n    Parameters\n    ----------\n    description : str\n        The string to search for in vulnerability descriptions.\n    case_sensitive : bool\n        Case sensitive matching\n\n    Returns\n    -------\n    ArtifactReport\n        A report with all artifacts that have a vulnerability containing the given\n        string.\n    \"\"\"\n    return ArtifactReport.from_artifacts(\n        [\n            a\n            for a in self.artifacts\n            if a.has_description(description, case_sensitive)\n        ]\n    )\n</code></pre>"}, {"location": "reference/ext/report/#harborapi.ext.report.ArtifactReport.has_package", "title": "<code>has_package(package, case_sensitive=False, min_version=None, max_version=None)</code>", "text": "<p>Check if any of the artifacts has the given package.</p> <p>Parameters:</p> Name Type Description Default <code>package</code> <code>str</code> <p>The package name to search for.</p> required <code>case_sensitive</code> <code>bool</code> <p>Whether the search should be case sensitive, by default False.</p> <code>False</code> <code>min_version</code> <code>Optional[VersionType]</code> <p>The minimum version of the package to search for, by default None.</p> <code>None</code> <code>max_version</code> <code>Optional[VersionType]</code> <p>The maximum version of the package to search for, by default None.</p> <code>None</code> <p>Returns:</p> Type Description <code>bool</code> <p>True if any of the artifacts has the given package, False otherwise.</p> Source code in <code>harborapi/ext/report.py</code> <pre><code>def has_package(\n    self,\n    package: str,\n    case_sensitive: bool = False,\n    min_version: Optional[VersionType] = None,\n    max_version: Optional[VersionType] = None,\n) -&gt; bool:\n    \"\"\"Check if any of the artifacts has the given package.\n\n    Parameters\n    ----------\n    package : str\n        The package name to search for.\n    case_sensitive : bool\n        Whether the search should be case sensitive, by default False.\n    min_version : Optional[VersionType]\n        The minimum version of the package to search for, by default None.\n    max_version : Optional[VersionType]\n        The maximum version of the package to search for, by default None.\n\n    Returns\n    -------\n    bool\n        True if any of the artifacts has the given package, False otherwise.\n    \"\"\"\n    return any(\n        a.has_package(\n            package,\n            case_sensitive=case_sensitive,\n            min_version=min_version,\n            max_version=max_version,\n        )\n        for a in self.artifacts\n    )\n</code></pre>"}, {"location": "reference/ext/report/#harborapi.ext.report.ArtifactReport.with_package", "title": "<code>with_package(package, case_sensitive=False, min_version=None, max_version=None)</code>", "text": "<p>Get all artifacts that have a vulnerability affecting the given package.</p> <p>Parameters:</p> Name Type Description Default <code>package</code> <code>str</code> <p>The name of the package to search for. Supports regular expressions.</p> required <code>case_sensitive</code> <code>bool</code> <p>Case sensitive matching</p> <code>False</code> <code>min_version</code> <code>Optional[VersionType]</code> <p>The minimum version of the package to search for, by default None.</p> <code>None</code> <code>max_version</code> <code>Optional[VersionType]</code> <p>The maximum version of the package to search for, by default None.</p> <code>None</code> <p>Returns:</p> Type Description <code>ArtifactReport</code> <p>An artifact report with all artifacts that have a vulnerability affecting the given package.</p> Source code in <code>harborapi/ext/report.py</code> <pre><code>def with_package(\n    self,\n    package: str,\n    case_sensitive: bool = False,\n    min_version: Optional[VersionType] = None,\n    max_version: Optional[VersionType] = None,\n) -&gt; \"ArtifactReport\":\n    \"\"\"Get all artifacts that have a vulnerability affecting the given package.\n\n    Parameters\n    ----------\n    package : str\n        The name of the package to search for.\n        Supports regular expressions.\n    case_sensitive : bool\n        Case sensitive matching\n    min_version : Optional[VersionType]\n        The minimum version of the package to search for, by default None.\n    max_version : Optional[VersionType]\n        The maximum version of the package to search for, by default None.\n\n    Returns\n    -------\n    ArtifactReport\n        An artifact report with all artifacts that have a vulnerability affecting\n        the given package.\n    \"\"\"\n    return ArtifactReport.from_artifacts(\n        [\n            a\n            for a in self.artifacts\n            if a.has_package(\n                package,\n                case_sensitive,\n                min_version=min_version,\n                max_version=max_version,\n            )\n        ],\n    )\n</code></pre>"}, {"location": "reference/ext/report/#harborapi.ext.report.ArtifactReport.has_severity", "title": "<code>has_severity(severity)</code>", "text": "<p>Check if any of the artifacts has a vulnerability with the given severity.</p> <p>Parameters:</p> Name Type Description Default <code>severity</code> <code>Severity</code> <p>The severity to search for.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if any of the artifacts has the given severity, False otherwise.</p> Source code in <code>harborapi/ext/report.py</code> <pre><code>def has_severity(self, severity: Severity) -&gt; bool:\n    \"\"\"Check if any of the artifacts has a vulnerability with the given severity.\n\n    Parameters\n    ----------\n    severity : Severity\n        The severity to search for.\n\n    Returns\n    -------\n    bool\n        True if any of the artifacts has the given severity, False otherwise.\n    \"\"\"\n    return bool(self.with_severity(severity).artifacts)\n</code></pre>"}, {"location": "reference/ext/report/#harborapi.ext.report.ArtifactReport.with_severity", "title": "<code>with_severity(severity)</code>", "text": "<p>Get all artifacts that have a report with the given severity.</p> <p>Parameters:</p> Name Type Description Default <code>severity</code> <code>Severity</code> <p>The severity to search for.</p> required <p>Returns:</p> Type Description <code>ArtifactReport</code> <p>An artifact report with all artifacts that have a vulnerability with the given severity.</p> Source code in <code>harborapi/ext/report.py</code> <pre><code>def with_severity(self, severity: Severity) -&gt; \"ArtifactReport\":\n    \"\"\"Get all artifacts that have a report with the given severity.\n\n    Parameters\n    ----------\n    severity : Severity\n        The severity to search for.\n\n    Returns\n    -------\n    ArtifactReport\n        An artifact report with all artifacts that have a vulnerability with the\n        given severity.\n    \"\"\"\n    return ArtifactReport.from_artifacts(\n        [a for a in self.artifacts if a.report.severity == severity]\n    )\n</code></pre>"}, {"location": "reference/ext/report/#harborapi.ext.report.ArtifactReport.has_repository", "title": "<code>has_repository(repository, case_sensitive=False)</code>", "text": "<p>Check if any of the artifacts belong to the given repository.</p> <p>Parameters:</p> Name Type Description Default <code>repository</code> <code>str</code> <p>The repository name to search for. Supports regular expressons.</p> required <code>case_sensitive</code> <code>bool</code> <p>Case sensitive search, by default False</p> <code>False</code> <p>Returns:</p> Type Description <code>bool</code> <p>Whether any of the artifacts belong to the given repository.</p> Source code in <code>harborapi/ext/report.py</code> <pre><code>def has_repository(self, repository: str, case_sensitive: bool = False) -&gt; bool:\n    \"\"\"Check if any of the artifacts belong to the given repository.\n\n    Parameters\n    ----------\n    repository : str\n        The repository name to search for.\n        Supports regular expressons.\n    case_sensitive : bool, optional\n        Case sensitive search, by default False\n\n    Returns\n    -------\n    bool\n        Whether any of the artifacts belong to the given repository.\n    \"\"\"\n    return bool(self.with_repository(repository, case_sensitive).artifacts)\n</code></pre>"}, {"location": "reference/ext/report/#harborapi.ext.report.ArtifactReport.with_repository", "title": "<code>with_repository(repositories, case_sensitive=False)</code>", "text": "<p>Return a new report with all artifacts belonging to one or more repositories.</p> <p>Parameters:</p> Name Type Description Default <code>repositories</code> <code>Union[str, List[str]]</code> <p>A repository or a list of repositories to filter for. Supports regular expressions.</p> required <code>case_sensitive</code> <code>bool</code> <p>Case sensitive repository name matching, by default False</p> <code>False</code> <p>Returns:</p> Type Description <code>ArtifactReport</code> <p>A new ArtifactReport where all artifacts belong to one of the given repositories.</p> Source code in <code>harborapi/ext/report.py</code> <pre><code>def with_repository(\n    self, repositories: Union[str, List[str]], case_sensitive: bool = False\n) -&gt; \"ArtifactReport\":\n    \"\"\"Return a new report with all artifacts belonging to one or more repositories.\n\n    Parameters\n    ----------\n    repositories : Union[str, List[str]]\n        A repository or a list of repositories to filter for.\n        Supports regular expressions.\n    case_sensitive : bool\n        Case sensitive repository name matching, by default False\n\n    Returns\n    -------\n    ArtifactReport\n        A new ArtifactReport where all artifacts belong to one of the given\n        repositories.\n    \"\"\"\n    # Docker doesn't allow upper-case letters in repository names, but\n    # I could not find any documentation on whether Harbor allows it.\n    # So we'll just assume that it does. Worst case scenario, the `case_sensitive`\n    # parameter will be redundant, but that's fine just to ensure compatibility.\n\n    if isinstance(repositories, str):\n        repositories = [repositories]\n    elif not isinstance(repositories, list) or not all(\n        isinstance(r, str) for r in repositories\n    ):\n        raise TypeError(\n            \"repositories must be either a string or a list of strings\"\n        )  # pragma: no cover\n\n    # Make regex pattern for each repository\n    # Our cache function only accepts string arguments, but it's fine to not\n    # use it here, since this method is not called nearly as often as the underlying\n    # `has_*` methods on the ArtifactInfo objects.\n    pattern = re.compile(\n        \"|\".join(repositories), flags=re.IGNORECASE if not case_sensitive else 0\n    )\n    return ArtifactReport.from_artifacts(\n        [\n            a\n            for a in self.artifacts\n            if a.repository.name and pattern.match(a.repository.name)\n        ]\n    )\n</code></pre>"}, {"location": "reference/ext/report/#harborapi.ext.report.ArtifactReport.has_tag", "title": "<code>has_tag(tag)</code>", "text": "<p>Check if any of the artifacts has the given tag.</p> <p>Parameters:</p> Name Type Description Default <code>tag</code> <code>str</code> <p>The tag to search for.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if any of the artifacts has the given tag, False otherwise.</p> Source code in <code>harborapi/ext/report.py</code> <pre><code>def has_tag(self, tag: str) -&gt; bool:\n    \"\"\"Check if any of the artifacts has the given tag.\n\n    Parameters\n    ----------\n    tag : str\n        The tag to search for.\n\n    Returns\n    -------\n    bool\n        True if any of the artifacts has the given tag, False otherwise.\n    \"\"\"\n    return any(a.has_tag(tag) for a in self.artifacts)\n</code></pre>"}, {"location": "reference/ext/report/#harborapi.ext.report.ArtifactReport.with_tag", "title": "<code>with_tag(tag)</code>", "text": "<p>Return a new report with all artifacts having the given tag.</p> <p>Parameters:</p> Name Type Description Default <code>tag</code> <code>str</code> <p>The tag to filter for.</p> required <p>Returns:</p> Type Description <code>ArtifactReport</code> <p>A new ArtifactReport where all artifacts have the given tag.</p> Source code in <code>harborapi/ext/report.py</code> <pre><code>def with_tag(self, tag: str) -&gt; \"ArtifactReport\":\n    \"\"\"Return a new report with all artifacts having the given tag.\n\n    Parameters\n    ----------\n    tag : str\n        The tag to filter for.\n\n    Returns\n    -------\n    ArtifactReport\n        A new ArtifactReport where all artifacts have the given tag.\n    \"\"\"\n    return ArtifactReport.from_artifacts(\n        [a for a in self.artifacts if a.has_tag(tag)]\n    )\n</code></pre>"}, {"location": "reference/models/_models/", "title": "harborapi.models._models", "text": "<p>These models have been generated from the official Harbor REST API Swagger 2.0 Schema using datamodel-code-generator version 0.13.0.</p> <p>DEPRECATED: This module will be removed in a future version. Module kept only for backwards compatibility with old code generation scheme.</p>"}, {"location": "reference/models/_models/#harborapi.models._models.logger", "title": "<code>logger = logging.getLogger('harborapi')</code>  <code>module-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.BaseModel", "title": "<code>BaseModel</code>", "text": "Source code in <code>harborapi/models/base.py</code> <pre><code>class BaseModel(PydanticBaseModel):\n    model_config = ConfigDict(extra=\"allow\", validate_assignment=True, strict=False)\n\n    # Validators\n\n    # The __rich* properties are only used by methods defined when Rich\n    # is installed, but they are defined here, so that static typing works\n    # when overriding the properties in subclasses.\n    @property\n    def __rich_table_title__(self) -&gt; str:\n        \"\"\"The title to use for the table representation of the model.\n        By default, the model's class name is be used.\n        \"\"\"\n        try:\n            title = self.__name__\n            assert isinstance(title, str)\n        except (AttributeError, AssertionError):\n            title = self.__class__.__name__\n        return title\n\n    @property\n    def __rich_panel_title__(self) -&gt; Optional[str]:\n        \"\"\"Title of the panel that wraps the table representation of the model.\"\"\"\n        return None\n\n    def convert_to(\n        self, model: Type[BaseModelType], extra: bool = False\n    ) -&gt; BaseModelType:\n        \"\"\"Converts the model to a different model type.\n\n        By default, only fields that are defined in the destination model\n        are included in the converted model.\n\n        Parameters\n        ----------\n        model : Type[BaseModelType]\n            The model type to convert to.\n        extra : bool\n            Whether to include fields that are not defined in the destination model.\n\n        Returns\n        -------\n        BaseModelType\n            The converted model.\n        \"\"\"\n        # TODO: include mapping of source fields to destination fields\n        # e.g. Project.name -&gt; ProjectReq.project_name\n        # pass in mapping: {\"name\": \"project_name\"}\n        if extra:\n            include = None\n        else:\n            include = model.get_model_fields()\n        return model.model_validate(self.model_dump(include=include))\n\n    @classmethod\n    def get_model_fields(cls) -&gt; Set[str]:\n        \"\"\"Get a list of the names of the model's fields.\n\n        Returns\n        -------\n        List[str]\n            The names of the model's fields.\n        \"\"\"\n        return set(cls.model_fields)\n\n    if rich_installed:\n\n        def __rich_console__(\n            self, console: Console, options: ConsoleOptions\n        ) -&gt; RenderResult:\n            \"\"\"Rich console representation of the model.\n            Returns a panel containing tables representing the model's\n            fields and values.\n            If the model has a nested model, the nested model's table representation\n            is printed after the main table.\n\n            See: https://rich.readthedocs.io/en/latest/protocol.html#console-render\n            \"\"\"\n            yield self.as_panel(with_description=False)\n\n        def as_panel(self, title: Optional[str] = None, **kwargs: Any) -&gt; Panel:\n            \"\"\"Returns table representation of model wrapped in a Panel.\n            Passes all keyword arguments to `as_table`.\n\n            Returns\n            -------\n            Panel\n                A Rich panel containing the table representation of the model.\n            \"\"\"\n            title = title or self.__rich_panel_title__\n            return Panel(Group(*self.as_table(**kwargs)), title=title)\n\n        def as_table(\n            self,\n            with_description: bool = False,\n            max_depth: Optional[int] = None,\n            parent_field: Optional[str] = None,\n            _depth: int = 1,\n        ) -&gt; Iterable[Table]:\n            \"\"\"Returns a Rich table representation of the model, and any nested models.\n\n            Parameters\n            ----------\n            with_description : bool\n                Whether to include the description of the model fields.\n            max_depth : Optional[int]\n                The maximum depth to print nested models.\n                `None` means no limit.\n            parent_field : Optional[str]\n                The title of the parent field that contains this model.\n                Used when printing submodels.\n            _depth : int\n                DO NOT SET THIS.\n                This is used internally to track the current depth level.\n\n            Returns\n            -------\n            Iterable[Table]\n                A generator of Rich tables representing the model and any nested models.\n            \"\"\"\n            # VOCABULARY:\n            # \"field\" -&gt; a field in the model spec\n            # \"field name\" -&gt; the name of the field in the model spec\n            # \"submodel\" -&gt; a nested model\n            # \"submodel table\" -&gt; the table representation of a nested model\n\n            # None and n &lt;= 0 means no limit to recursion depth\n            if max_depth is not None and max_depth &lt;= 0:\n                max_depth = None\n\n            # TODO: add list index indicator for list fields\n            if not parent_field:\n                title = type(self).__qualname__\n            else:\n                title = f\"{parent_field}\"\n\n            columns = [\n                Column(\n                    header=\"Field\", justify=\"left\", style=\"green\", header_style=\"bold\"\n                ),\n                Column(header=\"Value\", style=\"blue\", justify=\"left\", overflow=\"fold\"),\n            ]\n            if with_description:\n                columns.append(\n                    Column(header=\"Description\", style=\"yellow\", justify=\"left\"),\n                )\n\n            table = Table(\n                title=f\"[bold]{title}[/bold]\",\n                title_style=DEPTH_TITLE_COLORS.get(_depth, \"magenta\"),\n                title_justify=\"left\",\n                expand=True,\n                *columns,\n            )\n\n            subtables = []  # type: list[Iterable[Table]]\n\n            def add_submodel_table(field_title: str, submodel: \"BaseModel\") -&gt; str:\n                \"\"\"Adds a submodel table to the subtables list.\"\"\"\n                if parent_field:\n                    pfield = f\"{parent_field}.{field_title}\"\n                else:\n                    pfield = f\"{type(self).__qualname__}.{field_title}\"\n                submodel_table = submodel.as_table(\n                    with_description=with_description,\n                    max_depth=max_depth,\n                    _depth=_depth + 1,\n                    parent_field=pfield,\n                )\n                subtables.append(submodel_table)\n                return pfield\n\n            # Iterate over self to get model fields + extra fields\n            for field_name, value in super(BaseModel, self).__iter__():\n                # Prioritize getting field info from __fields__ dict\n                # since this dict contains more metadata for the field\n                field = self.model_fields.get(field_name)\n                if field is not None:\n                    # Try to use field title if available\n                    field_title = str(field.title or field_name)\n                    # Get the field value\n                    value = getattr(self, field_name)\n                    description = str(field.description) or \"\"\n                else:\n                    field_title = field_name\n                    description = \"\"\n\n                submodels = []  # type: Iterable[BaseModel]\n                if isinstance(value, BaseModel):\n                    submodels = [value]\n                elif isinstance(value, Iterable):\n                    if all(isinstance(v, BaseModel) for v in value):\n                        submodels = value\n\n                # Only print the submodel table if we are not at the max depth\n                # If we don't enter this, we print the string representation of the\n                # submodel(s) in the main table.\n                if submodels and (max_depth is None or _depth &lt; max_depth):\n                    # consume iterable immediately so we can get table title\n                    # It's likely this is NOT a generator, but we don't want to\n                    # assume that.\n                    submodels = list(submodels)\n                    table_title = \"\"\n                    for submodel in submodels:\n                        table_title = add_submodel_table(field_title, submodel)\n                    value = f\"[bold]See below ({table_title})[/bold]\"\n\n                row = [field_title, str(value)]\n                if with_description:\n                    row.append(description)\n                table.add_row(*row)\n\n            # TODO: sort table rows by field name\n\n            yield table\n            for subtable in subtables:\n                yield from subtable\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.BaseModel.model_config", "title": "<code>model_config = ConfigDict(extra='allow', validate_assignment=True, strict=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.BaseModel.__rich_table_title__", "title": "<code>__rich_table_title__</code>  <code>property</code>", "text": "<p>The title to use for the table representation of the model. By default, the model's class name is be used.</p>"}, {"location": "reference/models/_models/#harborapi.models._models.BaseModel.__rich_panel_title__", "title": "<code>__rich_panel_title__</code>  <code>property</code>", "text": "<p>Title of the panel that wraps the table representation of the model.</p>"}, {"location": "reference/models/_models/#harborapi.models._models.BaseModel.convert_to", "title": "<code>convert_to(model, extra=False)</code>", "text": "<p>Converts the model to a different model type.</p> <p>By default, only fields that are defined in the destination model are included in the converted model.</p> <p>Parameters:</p> Name Type Description Default <code>model</code> <code>Type[BaseModelType]</code> <p>The model type to convert to.</p> required <code>extra</code> <code>bool</code> <p>Whether to include fields that are not defined in the destination model.</p> <code>False</code> <p>Returns:</p> Type Description <code>BaseModelType</code> <p>The converted model.</p> Source code in <code>harborapi/models/base.py</code> <pre><code>def convert_to(\n    self, model: Type[BaseModelType], extra: bool = False\n) -&gt; BaseModelType:\n    \"\"\"Converts the model to a different model type.\n\n    By default, only fields that are defined in the destination model\n    are included in the converted model.\n\n    Parameters\n    ----------\n    model : Type[BaseModelType]\n        The model type to convert to.\n    extra : bool\n        Whether to include fields that are not defined in the destination model.\n\n    Returns\n    -------\n    BaseModelType\n        The converted model.\n    \"\"\"\n    # TODO: include mapping of source fields to destination fields\n    # e.g. Project.name -&gt; ProjectReq.project_name\n    # pass in mapping: {\"name\": \"project_name\"}\n    if extra:\n        include = None\n    else:\n        include = model.get_model_fields()\n    return model.model_validate(self.model_dump(include=include))\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.BaseModel.get_model_fields", "title": "<code>get_model_fields()</code>  <code>classmethod</code>", "text": "<p>Get a list of the names of the model's fields.</p> <p>Returns:</p> Type Description <code>List[str]</code> <p>The names of the model's fields.</p> Source code in <code>harborapi/models/base.py</code> <pre><code>@classmethod\ndef get_model_fields(cls) -&gt; Set[str]:\n    \"\"\"Get a list of the names of the model's fields.\n\n    Returns\n    -------\n    List[str]\n        The names of the model's fields.\n    \"\"\"\n    return set(cls.model_fields)\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.BaseModel.__rich_console__", "title": "<code>__rich_console__(console, options)</code>", "text": "<p>Rich console representation of the model. Returns a panel containing tables representing the model's fields and values. If the model has a nested model, the nested model's table representation is printed after the main table.</p> <p>See: https://rich.readthedocs.io/en/latest/protocol.html#console-render</p> Source code in <code>harborapi/models/base.py</code> <pre><code>def __rich_console__(\n    self, console: Console, options: ConsoleOptions\n) -&gt; RenderResult:\n    \"\"\"Rich console representation of the model.\n    Returns a panel containing tables representing the model's\n    fields and values.\n    If the model has a nested model, the nested model's table representation\n    is printed after the main table.\n\n    See: https://rich.readthedocs.io/en/latest/protocol.html#console-render\n    \"\"\"\n    yield self.as_panel(with_description=False)\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.BaseModel.as_panel", "title": "<code>as_panel(title=None, **kwargs)</code>", "text": "<p>Returns table representation of model wrapped in a Panel. Passes all keyword arguments to <code>as_table</code>.</p> <p>Returns:</p> Type Description <code>Panel</code> <p>A Rich panel containing the table representation of the model.</p> Source code in <code>harborapi/models/base.py</code> <pre><code>def as_panel(self, title: Optional[str] = None, **kwargs: Any) -&gt; Panel:\n    \"\"\"Returns table representation of model wrapped in a Panel.\n    Passes all keyword arguments to `as_table`.\n\n    Returns\n    -------\n    Panel\n        A Rich panel containing the table representation of the model.\n    \"\"\"\n    title = title or self.__rich_panel_title__\n    return Panel(Group(*self.as_table(**kwargs)), title=title)\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.BaseModel.as_table", "title": "<code>as_table(with_description=False, max_depth=None, parent_field=None, _depth=1)</code>", "text": "<p>Returns a Rich table representation of the model, and any nested models.</p> <p>Parameters:</p> Name Type Description Default <code>with_description</code> <code>bool</code> <p>Whether to include the description of the model fields.</p> <code>False</code> <code>max_depth</code> <code>Optional[int]</code> <p>The maximum depth to print nested models. <code>None</code> means no limit.</p> <code>None</code> <code>parent_field</code> <code>Optional[str]</code> <p>The title of the parent field that contains this model. Used when printing submodels.</p> <code>None</code> <code>_depth</code> <code>int</code> <p>DO NOT SET THIS. This is used internally to track the current depth level.</p> <code>1</code> <p>Returns:</p> Type Description <code>Iterable[Table]</code> <p>A generator of Rich tables representing the model and any nested models.</p> Source code in <code>harborapi/models/base.py</code> <pre><code>def as_table(\n    self,\n    with_description: bool = False,\n    max_depth: Optional[int] = None,\n    parent_field: Optional[str] = None,\n    _depth: int = 1,\n) -&gt; Iterable[Table]:\n    \"\"\"Returns a Rich table representation of the model, and any nested models.\n\n    Parameters\n    ----------\n    with_description : bool\n        Whether to include the description of the model fields.\n    max_depth : Optional[int]\n        The maximum depth to print nested models.\n        `None` means no limit.\n    parent_field : Optional[str]\n        The title of the parent field that contains this model.\n        Used when printing submodels.\n    _depth : int\n        DO NOT SET THIS.\n        This is used internally to track the current depth level.\n\n    Returns\n    -------\n    Iterable[Table]\n        A generator of Rich tables representing the model and any nested models.\n    \"\"\"\n    # VOCABULARY:\n    # \"field\" -&gt; a field in the model spec\n    # \"field name\" -&gt; the name of the field in the model spec\n    # \"submodel\" -&gt; a nested model\n    # \"submodel table\" -&gt; the table representation of a nested model\n\n    # None and n &lt;= 0 means no limit to recursion depth\n    if max_depth is not None and max_depth &lt;= 0:\n        max_depth = None\n\n    # TODO: add list index indicator for list fields\n    if not parent_field:\n        title = type(self).__qualname__\n    else:\n        title = f\"{parent_field}\"\n\n    columns = [\n        Column(\n            header=\"Field\", justify=\"left\", style=\"green\", header_style=\"bold\"\n        ),\n        Column(header=\"Value\", style=\"blue\", justify=\"left\", overflow=\"fold\"),\n    ]\n    if with_description:\n        columns.append(\n            Column(header=\"Description\", style=\"yellow\", justify=\"left\"),\n        )\n\n    table = Table(\n        title=f\"[bold]{title}[/bold]\",\n        title_style=DEPTH_TITLE_COLORS.get(_depth, \"magenta\"),\n        title_justify=\"left\",\n        expand=True,\n        *columns,\n    )\n\n    subtables = []  # type: list[Iterable[Table]]\n\n    def add_submodel_table(field_title: str, submodel: \"BaseModel\") -&gt; str:\n        \"\"\"Adds a submodel table to the subtables list.\"\"\"\n        if parent_field:\n            pfield = f\"{parent_field}.{field_title}\"\n        else:\n            pfield = f\"{type(self).__qualname__}.{field_title}\"\n        submodel_table = submodel.as_table(\n            with_description=with_description,\n            max_depth=max_depth,\n            _depth=_depth + 1,\n            parent_field=pfield,\n        )\n        subtables.append(submodel_table)\n        return pfield\n\n    # Iterate over self to get model fields + extra fields\n    for field_name, value in super(BaseModel, self).__iter__():\n        # Prioritize getting field info from __fields__ dict\n        # since this dict contains more metadata for the field\n        field = self.model_fields.get(field_name)\n        if field is not None:\n            # Try to use field title if available\n            field_title = str(field.title or field_name)\n            # Get the field value\n            value = getattr(self, field_name)\n            description = str(field.description) or \"\"\n        else:\n            field_title = field_name\n            description = \"\"\n\n        submodels = []  # type: Iterable[BaseModel]\n        if isinstance(value, BaseModel):\n            submodels = [value]\n        elif isinstance(value, Iterable):\n            if all(isinstance(v, BaseModel) for v in value):\n                submodels = value\n\n        # Only print the submodel table if we are not at the max depth\n        # If we don't enter this, we print the string representation of the\n        # submodel(s) in the main table.\n        if submodels and (max_depth is None or _depth &lt; max_depth):\n            # consume iterable immediately so we can get table title\n            # It's likely this is NOT a generator, but we don't want to\n            # assume that.\n            submodels = list(submodels)\n            table_title = \"\"\n            for submodel in submodels:\n                table_title = add_submodel_table(field_title, submodel)\n            value = f\"[bold]See below ({table_title})[/bold]\"\n\n        row = [field_title, str(value)]\n        if with_description:\n            row.append(description)\n        table.add_row(*row)\n\n    # TODO: sort table rows by field name\n\n    yield table\n    for subtable in subtables:\n        yield from subtable\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.Severity", "title": "<code>Severity</code>", "text": "<p>A standard scale for measuring the severity of a vulnerability.</p> <ul> <li><code>Unknown</code> - either a security problem that has not been assigned to a priority yet or a priority that the   scanner did not recognize.</li> <li><code>Negligible</code> - technically a security problem, but is only theoretical in nature, requires a very special   situation, has almost no install base, or does no real damage.</li> <li><code>Low</code> - a security problem, but is hard to exploit due to environment, requires a user-assisted attack,   a small install base, or does very little damage.</li> <li><code>Medium</code> - a real security problem, and is exploitable for many people. Includes network daemon denial of   service attacks, cross-site scripting, and gaining user privileges.</li> <li><code>High</code> - a real problem, exploitable for many people in a default installation. Includes serious remote denial   of service, local root privilege escalations, or data loss.</li> <li><code>Critical</code> - a world-burning problem, exploitable for nearly all people in a default installation. Includes   remote root privilege escalations, or massive data loss.</li> </ul> Source code in <code>harborapi/models/scanner.py</code> <pre><code>class Severity(Enum):\n    \"\"\"\n    A standard scale for measuring the severity of a vulnerability.\n\n    * `Unknown` - either a security problem that has not been assigned to a priority yet or a priority that the\n      scanner did not recognize.\n    * `Negligible` - technically a security problem, but is only theoretical in nature, requires a very special\n      situation, has almost no install base, or does no real damage.\n    * `Low` - a security problem, but is hard to exploit due to environment, requires a user-assisted attack,\n      a small install base, or does very little damage.\n    * `Medium` - a real security problem, and is exploitable for many people. Includes network daemon denial of\n      service attacks, cross-site scripting, and gaining user privileges.\n    * `High` - a real problem, exploitable for many people in a default installation. Includes serious remote denial\n      of service, local root privilege escalations, or data loss.\n    * `Critical` - a world-burning problem, exploitable for nearly all people in a default installation. Includes\n      remote root privilege escalations, or massive data loss.\n\n    \"\"\"\n\n    unknown = \"Unknown\"\n    negligible = \"Negligible\"\n    low = \"Low\"\n    medium = \"Medium\"\n    high = \"High\"\n    critical = \"Critical\"\n    none = \"None\"\n\n    def __gt__(self, other: Severity) -&gt; bool:\n        return SEVERITY_PRIORITY[self] &gt; SEVERITY_PRIORITY[other]\n\n    def __ge__(self, other: Severity) -&gt; bool:\n        return SEVERITY_PRIORITY[self] &gt;= SEVERITY_PRIORITY[other]\n\n    def __lt__(self, other: Severity) -&gt; bool:\n        return SEVERITY_PRIORITY[self] &lt; SEVERITY_PRIORITY[other]\n\n    def __le__(self, other: Severity) -&gt; bool:\n        return SEVERITY_PRIORITY[self] &lt;= SEVERITY_PRIORITY[other]\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.Severity.unknown", "title": "<code>unknown = 'Unknown'</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Severity.negligible", "title": "<code>negligible = 'Negligible'</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Severity.low", "title": "<code>low = 'Low'</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Severity.medium", "title": "<code>medium = 'Medium'</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Severity.high", "title": "<code>high = 'High'</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Severity.critical", "title": "<code>critical = 'Critical'</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Severity.none", "title": "<code>none = 'None'</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Severity.__gt__", "title": "<code>__gt__(other)</code>", "text": "Source code in <code>harborapi/models/scanner.py</code> <pre><code>def __gt__(self, other: Severity) -&gt; bool:\n    return SEVERITY_PRIORITY[self] &gt; SEVERITY_PRIORITY[other]\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.Severity.__ge__", "title": "<code>__ge__(other)</code>", "text": "Source code in <code>harborapi/models/scanner.py</code> <pre><code>def __ge__(self, other: Severity) -&gt; bool:\n    return SEVERITY_PRIORITY[self] &gt;= SEVERITY_PRIORITY[other]\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.Severity.__lt__", "title": "<code>__lt__(other)</code>", "text": "Source code in <code>harborapi/models/scanner.py</code> <pre><code>def __lt__(self, other: Severity) -&gt; bool:\n    return SEVERITY_PRIORITY[self] &lt; SEVERITY_PRIORITY[other]\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.Severity.__le__", "title": "<code>__le__(other)</code>", "text": "Source code in <code>harborapi/models/scanner.py</code> <pre><code>def __le__(self, other: Severity) -&gt; bool:\n    return SEVERITY_PRIORITY[self] &lt;= SEVERITY_PRIORITY[other]\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.Error", "title": "<code>Error</code>", "text": "<p>Error response from Harbor.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class Error(BaseModel):\n    \"\"\"Error response from Harbor.\"\"\"\n\n    code: Optional[str] = Field(default=None, description=\"The error code\")\n    message: Optional[str] = Field(default=None, description=\"The error message\")\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.Error.code", "title": "<code>code = Field(default=None, description='The error code')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Error.message", "title": "<code>message = Field(default=None, description='The error message')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.SearchRepository", "title": "<code>SearchRepository</code>", "text": "<p>Repository search result.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class SearchRepository(BaseModel):\n    \"\"\"Repository search result.\"\"\"\n\n    project_id: Optional[int] = Field(\n        default=None, description=\"The ID of the project that the repository belongs to\"\n    )\n    project_name: Optional[str] = Field(\n        default=None,\n        description=\"The name of the project that the repository belongs to\",\n    )\n    project_public: Optional[bool] = Field(\n        default=None,\n        description=\"The flag to indicate the publicity of the project that the repository belongs to (1 is public, 0 is not)\",\n    )\n    repository_name: Optional[str] = Field(\n        default=None, description=\"The name of the repository\"\n    )\n    pull_count: Optional[int] = Field(\n        default=None, description=\"The count how many times the repository is pulled\"\n    )\n    artifact_count: Optional[int] = Field(\n        default=None, description=\"The count of artifacts in the repository\"\n    )\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.SearchRepository.project_id", "title": "<code>project_id = Field(default=None, description='The ID of the project that the repository belongs to')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.SearchRepository.project_name", "title": "<code>project_name = Field(default=None, description='The name of the project that the repository belongs to')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.SearchRepository.project_public", "title": "<code>project_public = Field(default=None, description='The flag to indicate the publicity of the project that the repository belongs to (1 is public, 0 is not)')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.SearchRepository.repository_name", "title": "<code>repository_name = Field(default=None, description='The name of the repository')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.SearchRepository.pull_count", "title": "<code>pull_count = Field(default=None, description='The count how many times the repository is pulled')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.SearchRepository.artifact_count", "title": "<code>artifact_count = Field(default=None, description='The count of artifacts in the repository')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Repository", "title": "<code>Repository</code>", "text": "Source code in <code>harborapi/models/models.py</code> <pre><code>class Repository(BaseModel):\n    id: Optional[int] = Field(default=None, description=\"The ID of the repository\")\n    project_id: Optional[int] = Field(\n        default=None, description=\"The ID of the project that the repository belongs to\"\n    )\n    name: Optional[str] = Field(default=None, description=\"The name of the repository\")\n    description: Optional[str] = Field(\n        default=None, description=\"The description of the repository\"\n    )\n    artifact_count: Optional[int] = Field(\n        default=None, description=\"The count of the artifacts inside the repository\"\n    )\n    pull_count: Optional[int] = Field(\n        default=None,\n        description=\"The count that the artifact inside the repository pulled\",\n    )\n    creation_time: Optional[datetime] = Field(\n        default=None, description=\"The creation time of the repository\"\n    )\n    update_time: Optional[datetime] = Field(\n        default=None, description=\"The update time of the repository\"\n    )\n\n    @property\n    def base_name(self) -&gt; str:\n        \"\"\"The repository name without the project name\n\n        Returns\n        -------\n        Optional[str]\n            The basename of the repository name\n        \"\"\"\n        s = self.split_name()\n        return s[1] if s else \"\"\n\n    @property\n    def project_name(self) -&gt; str:\n        \"\"\"The name of the project that the repository belongs to\n\n        Returns\n        -------\n        Optional[str]\n            The name of the project that the repository belongs to\n        \"\"\"\n        s = self.split_name()\n        return s[0] if s else \"\"\n\n    def split_name(self) -&gt; Optional[Tuple[str, str]]:\n        \"\"\"Split name into tuple of project and repository name\n\n        Returns\n        -------\n        Optional[Tuple[str, str]]\n            Tuple of project name and repo name\n        \"\"\"\n        if not self.name:\n            return None\n        components = self.name.split(\"/\", 1)\n        if len(components) != 2:\n            logger.warning(\n                \"Repository name '%s' is not in the format &lt;project&gt;/&lt;repo&gt;\", self.name\n            )\n            return None\n        return (components[0], components[1])\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.Repository.id", "title": "<code>id = Field(default=None, description='The ID of the repository')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Repository.project_id", "title": "<code>project_id = Field(default=None, description='The ID of the project that the repository belongs to')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Repository.name", "title": "<code>name = Field(default=None, description='The name of the repository')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Repository.description", "title": "<code>description = Field(default=None, description='The description of the repository')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Repository.artifact_count", "title": "<code>artifact_count = Field(default=None, description='The count of the artifacts inside the repository')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Repository.pull_count", "title": "<code>pull_count = Field(default=None, description='The count that the artifact inside the repository pulled')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Repository.creation_time", "title": "<code>creation_time = Field(default=None, description='The creation time of the repository')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Repository.update_time", "title": "<code>update_time = Field(default=None, description='The update time of the repository')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Repository.base_name", "title": "<code>base_name</code>  <code>property</code>", "text": "<p>The repository name without the project name</p> <p>Returns:</p> Type Description <code>Optional[str]</code> <p>The basename of the repository name</p>"}, {"location": "reference/models/_models/#harborapi.models._models.Repository.project_name", "title": "<code>project_name</code>  <code>property</code>", "text": "<p>The name of the project that the repository belongs to</p> <p>Returns:</p> Type Description <code>Optional[str]</code> <p>The name of the project that the repository belongs to</p>"}, {"location": "reference/models/_models/#harborapi.models._models.Repository.split_name", "title": "<code>split_name()</code>", "text": "<p>Split name into tuple of project and repository name</p> <p>Returns:</p> Type Description <code>Optional[Tuple[str, str]]</code> <p>Tuple of project name and repo name</p> Source code in <code>harborapi/models/models.py</code> <pre><code>def split_name(self) -&gt; Optional[Tuple[str, str]]:\n    \"\"\"Split name into tuple of project and repository name\n\n    Returns\n    -------\n    Optional[Tuple[str, str]]\n        Tuple of project name and repo name\n    \"\"\"\n    if not self.name:\n        return None\n    components = self.name.split(\"/\", 1)\n    if len(components) != 2:\n        logger.warning(\n            \"Repository name '%s' is not in the format &lt;project&gt;/&lt;repo&gt;\", self.name\n        )\n        return None\n    return (components[0], components[1])\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.Tag", "title": "<code>Tag</code>", "text": "Source code in <code>harborapi/models/models.py</code> <pre><code>class Tag(BaseModel):\n    id: Optional[int] = Field(default=None, description=\"The ID of the tag\")\n    repository_id: Optional[int] = Field(\n        default=None, description=\"The ID of the repository that the tag belongs to\"\n    )\n    artifact_id: Optional[int] = Field(\n        default=None, description=\"The ID of the artifact that the tag attached to\"\n    )\n    name: Optional[str] = Field(default=None, description=\"The name of the tag\")\n    push_time: Optional[datetime] = Field(\n        default=None, description=\"The push time of the tag\"\n    )\n    pull_time: Optional[datetime] = Field(\n        default=None, description=\"The latest pull time of the tag\"\n    )\n    immutable: Optional[bool] = Field(\n        default=None, description=\"The immutable status of the tag\"\n    )\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.Tag.id", "title": "<code>id = Field(default=None, description='The ID of the tag')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Tag.repository_id", "title": "<code>repository_id = Field(default=None, description='The ID of the repository that the tag belongs to')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Tag.artifact_id", "title": "<code>artifact_id = Field(default=None, description='The ID of the artifact that the tag attached to')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Tag.name", "title": "<code>name = Field(default=None, description='The name of the tag')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Tag.push_time", "title": "<code>push_time = Field(default=None, description='The push time of the tag')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Tag.pull_time", "title": "<code>pull_time = Field(default=None, description='The latest pull time of the tag')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Tag.immutable", "title": "<code>immutable = Field(default=None, description='The immutable status of the tag')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ExtraAttrs", "title": "<code>ExtraAttrs</code>", "text": "Source code in <code>harborapi/models/models.py</code> <pre><code>class ExtraAttrs(RootModel[Optional[Dict[str, Dict[str, Any]]]]):\n    root: Optional[Dict[str, Any]] = None\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.ExtraAttrs.root", "title": "<code>root = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Annotations", "title": "<code>Annotations</code>", "text": "Source code in <code>harborapi/models/models.py</code> <pre><code>class Annotations(RootModel[Optional[Dict[str, str]]]):\n    root: Optional[Dict[str, str]] = None\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.Annotations.root", "title": "<code>root = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.AdditionLink", "title": "<code>AdditionLink</code>", "text": "Source code in <code>harborapi/models/models.py</code> <pre><code>class AdditionLink(BaseModel):\n    href: Optional[str] = Field(default=None, description=\"The link of the addition\")\n    absolute: Optional[bool] = Field(\n        default=None, description=\"Determine whether the link is an absolute URL or not\"\n    )\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.AdditionLink.href", "title": "<code>href = Field(default=None, description='The link of the addition')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.AdditionLink.absolute", "title": "<code>absolute = Field(default=None, description='Determine whether the link is an absolute URL or not')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Platform", "title": "<code>Platform</code>", "text": "Source code in <code>harborapi/models/models.py</code> <pre><code>class Platform(BaseModel):\n    architecture: Optional[str] = Field(\n        default=None, description=\"The architecture that the artifact applys to\"\n    )\n    os: Optional[str] = Field(\n        default=None, description=\"The OS that the artifact applys to\"\n    )\n    field_os_version_: Optional[str] = Field(\n        default=None,\n        alias=\"'os.version'\",\n        description=\"The version of the OS that the artifact applys to\",\n    )\n    field_os_features_: Optional[List[str]] = Field(\n        default=None,\n        alias=\"'os.features'\",\n        description=\"The features of the OS that the artifact applys to\",\n    )\n    variant: Optional[str] = Field(default=None, description=\"The variant of the CPU\")\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.Platform.architecture", "title": "<code>architecture = Field(default=None, description='The architecture that the artifact applys to')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Platform.os", "title": "<code>os = Field(default=None, description='The OS that the artifact applys to')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Platform.field_os_version_", "title": "<code>field_os_version_ = Field(default=None, alias=\"'os.version'\", description='The version of the OS that the artifact applys to')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Platform.field_os_features_", "title": "<code>field_os_features_ = Field(default=None, alias=\"'os.features'\", description='The features of the OS that the artifact applys to')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Platform.variant", "title": "<code>variant = Field(default=None, description='The variant of the CPU')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Label", "title": "<code>Label</code>", "text": "Source code in <code>harborapi/models/models.py</code> <pre><code>class Label(BaseModel):\n    id: Optional[int] = Field(default=None, description=\"The ID of the label\")\n    name: Optional[str] = Field(default=None, description=\"The name the label\")\n    description: Optional[str] = Field(\n        default=None, description=\"The description the label\"\n    )\n    color: Optional[str] = Field(default=None, description=\"The color the label\")\n    scope: Optional[str] = Field(default=None, description=\"The scope the label\")\n    project_id: Optional[int] = Field(\n        default=None, description=\"The ID of project that the label belongs to\"\n    )\n    creation_time: Optional[datetime] = Field(\n        default=None, description=\"The creation time the label\"\n    )\n    update_time: Optional[datetime] = Field(\n        default=None, description=\"The update time of the label\"\n    )\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.Label.id", "title": "<code>id = Field(default=None, description='The ID of the label')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Label.name", "title": "<code>name = Field(default=None, description='The name the label')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Label.description", "title": "<code>description = Field(default=None, description='The description the label')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Label.color", "title": "<code>color = Field(default=None, description='The color the label')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Label.scope", "title": "<code>scope = Field(default=None, description='The scope the label')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Label.project_id", "title": "<code>project_id = Field(default=None, description='The ID of project that the label belongs to')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Label.creation_time", "title": "<code>creation_time = Field(default=None, description='The creation time the label')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Label.update_time", "title": "<code>update_time = Field(default=None, description='The update time of the label')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Scanner", "title": "<code>Scanner</code>", "text": "Source code in <code>harborapi/models/models.py</code> <pre><code>class Scanner(BaseModel):\n    name: Optional[str] = Field(\n        default=None, description=\"Name of the scanner\", examples=[\"Trivy\"]\n    )\n    vendor: Optional[str] = Field(\n        default=None,\n        description=\"Name of the scanner provider\",\n        examples=[\"Aqua Security\"],\n    )\n    version: Optional[str] = Field(\n        default=None, description=\"Version of the scanner adapter\", examples=[\"v0.9.1\"]\n    )\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.Scanner.name", "title": "<code>name = Field(default=None, description='Name of the scanner', examples=['Trivy'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Scanner.vendor", "title": "<code>vendor = Field(default=None, description='Name of the scanner provider', examples=['Aqua Security'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Scanner.version", "title": "<code>version = Field(default=None, description='Version of the scanner adapter', examples=['v0.9.1'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.SBOMOverview", "title": "<code>SBOMOverview</code>", "text": "<p>The generate SBOM overview information</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class SBOMOverview(BaseModel):\n    \"\"\"\n    The generate SBOM overview information\n    \"\"\"\n\n    start_time: Optional[datetime] = Field(\n        default=None,\n        description=\"The start time of the generating sbom report task\",\n        examples=[\"2006-01-02T14:04:05Z\"],\n    )\n    end_time: Optional[datetime] = Field(\n        default=None,\n        description=\"The end time of the generating sbom report task\",\n        examples=[\"2006-01-02T15:04:05Z\"],\n    )\n    scan_status: Optional[str] = Field(\n        default=None, description=\"The status of the generating SBOM task\"\n    )\n    sbom_digest: Optional[str] = Field(\n        default=None, description=\"The digest of the generated SBOM accessory\"\n    )\n    report_id: Optional[str] = Field(\n        default=None,\n        description=\"id of the native scan report\",\n        examples=[\"5f62c830-f996-11e9-957f-0242c0a89008\"],\n    )\n    duration: Optional[int] = Field(\n        default=None,\n        description=\"Time in seconds required to create the report\",\n        examples=[300],\n    )\n    scanner: Optional[Scanner] = None\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.SBOMOverview.start_time", "title": "<code>start_time = Field(default=None, description='The start time of the generating sbom report task', examples=['2006-01-02T14:04:05Z'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.SBOMOverview.end_time", "title": "<code>end_time = Field(default=None, description='The end time of the generating sbom report task', examples=['2006-01-02T15:04:05Z'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.SBOMOverview.scan_status", "title": "<code>scan_status = Field(default=None, description='The status of the generating SBOM task')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.SBOMOverview.sbom_digest", "title": "<code>sbom_digest = Field(default=None, description='The digest of the generated SBOM accessory')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.SBOMOverview.report_id", "title": "<code>report_id = Field(default=None, description='id of the native scan report', examples=['5f62c830-f996-11e9-957f-0242c0a89008'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.SBOMOverview.duration", "title": "<code>duration = Field(default=None, description='Time in seconds required to create the report', examples=[300])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.SBOMOverview.scanner", "title": "<code>scanner = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.VulnerabilitySummary", "title": "<code>VulnerabilitySummary</code>", "text": "<p>Summary of vulnerabilities found in a scan.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class VulnerabilitySummary(BaseModel):\n    \"\"\"Summary of vulnerabilities found in a scan.\"\"\"\n\n    total: Optional[int] = Field(\n        default=None,\n        description=\"The total number of the found vulnerabilities\",\n        examples=[500],\n    )\n    fixable: Optional[int] = Field(\n        default=None,\n        description=\"The number of the fixable vulnerabilities\",\n        examples=[100],\n    )\n    summary: Optional[Dict[str, int]] = Field(\n        default=None,\n        description=\"Numbers of the vulnerabilities with different severity\",\n        examples=[{\"Critical\": 5, \"High\": 5}],\n    )\n    critical: int = Field(\n        default=0,\n        alias=\"Critical\",\n        description=\"The number of critical vulnerabilities detected.\",\n    )\n    high: int = Field(\n        default=0,\n        alias=\"High\",\n        description=\"The number of critical vulnerabilities detected.\",\n    )\n    medium: int = Field(\n        default=0,\n        alias=\"Medium\",\n        description=\"The number of critical vulnerabilities detected.\",\n    )\n    low: int = Field(\n        default=0,\n        alias=\"Low\",\n        description=\"The number of critical vulnerabilities detected.\",\n    )\n    unknown: int = Field(\n        default=0,\n        alias=\"Unknown\",\n        description=\"The number of critical vulnerabilities detected.\",\n    )\n\n    @model_validator(mode=\"before\")\n    @classmethod\n    def _assign_severity_breakdown(cls, values: Dict[str, Any]) -&gt; Dict[str, Any]:\n        summary = values.get(\"summary\") or {}\n        if not isinstance(summary, dict):\n            raise ValueError(\"'summary' must be a dict\")\n        return {**values, **summary}\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.VulnerabilitySummary.total", "title": "<code>total = Field(default=None, description='The total number of the found vulnerabilities', examples=[500])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.VulnerabilitySummary.fixable", "title": "<code>fixable = Field(default=None, description='The number of the fixable vulnerabilities', examples=[100])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.VulnerabilitySummary.summary", "title": "<code>summary = Field(default=None, description='Numbers of the vulnerabilities with different severity', examples=[{'Critical': 5, 'High': 5}])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.VulnerabilitySummary.critical", "title": "<code>critical = Field(default=0, alias='Critical', description='The number of critical vulnerabilities detected.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.VulnerabilitySummary.high", "title": "<code>high = Field(default=0, alias='High', description='The number of critical vulnerabilities detected.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.VulnerabilitySummary.medium", "title": "<code>medium = Field(default=0, alias='Medium', description='The number of critical vulnerabilities detected.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.VulnerabilitySummary.low", "title": "<code>low = Field(default=0, alias='Low', description='The number of critical vulnerabilities detected.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.VulnerabilitySummary.unknown", "title": "<code>unknown = Field(default=0, alias='Unknown', description='The number of critical vulnerabilities detected.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.AuditLog", "title": "<code>AuditLog</code>", "text": "Source code in <code>harborapi/models/models.py</code> <pre><code>class AuditLog(BaseModel):\n    id: Optional[int] = Field(\n        default=None, description=\"The ID of the audit log entry.\"\n    )\n    username: Optional[str] = Field(\n        default=None, description=\"Username of the user in this log entry.\"\n    )\n    resource: Optional[str] = Field(\n        default=None, description=\"Name of the repository in this log entry.\"\n    )\n    resource_type: Optional[str] = Field(\n        default=None, description=\"Tag of the repository in this log entry.\"\n    )\n    operation: Optional[str] = Field(\n        default=None,\n        description=\"The operation against the repository in this log entry.\",\n    )\n    op_time: Optional[datetime] = Field(\n        default=None,\n        description=\"The time when this operation is triggered.\",\n        examples=[\"2006-01-02T15:04:05Z\"],\n    )\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.AuditLog.id", "title": "<code>id = Field(default=None, description='The ID of the audit log entry.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.AuditLog.username", "title": "<code>username = Field(default=None, description='Username of the user in this log entry.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.AuditLog.resource", "title": "<code>resource = Field(default=None, description='Name of the repository in this log entry.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.AuditLog.resource_type", "title": "<code>resource_type = Field(default=None, description='Tag of the repository in this log entry.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.AuditLog.operation", "title": "<code>operation = Field(default=None, description='The operation against the repository in this log entry.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.AuditLog.op_time", "title": "<code>op_time = Field(default=None, description='The time when this operation is triggered.', examples=['2006-01-02T15:04:05Z'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Metadata", "title": "<code>Metadata</code>", "text": "Source code in <code>harborapi/models/models.py</code> <pre><code>class Metadata(BaseModel):\n    id: Optional[str] = Field(default=None, description=\"id\")\n    name: Optional[str] = Field(default=None, description=\"name\")\n    icon: Optional[str] = Field(default=None, description=\"icon\")\n    maintainers: Optional[List[str]] = Field(default=None, description=\"maintainers\")\n    version: Optional[str] = Field(default=None, description=\"version\")\n    source: Optional[str] = Field(default=None, description=\"source\")\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.Metadata.id", "title": "<code>id = Field(default=None, description='id')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Metadata.name", "title": "<code>name = Field(default=None, description='name')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Metadata.icon", "title": "<code>icon = Field(default=None, description='icon')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Metadata.maintainers", "title": "<code>maintainers = Field(default=None, description='maintainers')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Metadata.version", "title": "<code>version = Field(default=None, description='version')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Metadata.source", "title": "<code>source = Field(default=None, description='source')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Instance", "title": "<code>Instance</code>", "text": "Source code in <code>harborapi/models/models.py</code> <pre><code>class Instance(BaseModel):\n    id: Optional[int] = Field(default=None, description=\"Unique ID\")\n    name: Optional[str] = Field(default=None, description=\"Instance name\")\n    description: Optional[str] = Field(\n        default=None, description=\"Description of instance\"\n    )\n    vendor: Optional[str] = Field(\n        default=None, description=\"Based on which driver, identified by ID\"\n    )\n    endpoint: Optional[str] = Field(\n        default=None, description=\"The service endpoint of this instance\"\n    )\n    auth_mode: Optional[str] = Field(\n        default=None, description=\"The authentication way supported\"\n    )\n    auth_info: Optional[Dict[str, str]] = Field(\n        default=None, description=\"The auth credential data if exists\"\n    )\n    status: Optional[str] = Field(default=None, description=\"The health status\")\n    enabled: Optional[bool] = Field(\n        default=None, description=\"Whether the instance is activated or not\"\n    )\n    default: Optional[bool] = Field(\n        default=None, description=\"Whether the instance is default or not\"\n    )\n    insecure: Optional[bool] = Field(\n        default=None, description=\"Whether the instance endpoint is insecure or not\"\n    )\n    setup_timestamp: Optional[int] = Field(\n        default=None, description=\"The timestamp of instance setting up\"\n    )\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.Instance.id", "title": "<code>id = Field(default=None, description='Unique ID')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Instance.name", "title": "<code>name = Field(default=None, description='Instance name')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Instance.description", "title": "<code>description = Field(default=None, description='Description of instance')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Instance.vendor", "title": "<code>vendor = Field(default=None, description='Based on which driver, identified by ID')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Instance.endpoint", "title": "<code>endpoint = Field(default=None, description='The service endpoint of this instance')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Instance.auth_mode", "title": "<code>auth_mode = Field(default=None, description='The authentication way supported')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Instance.auth_info", "title": "<code>auth_info = Field(default=None, description='The auth credential data if exists')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Instance.status", "title": "<code>status = Field(default=None, description='The health status')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Instance.enabled", "title": "<code>enabled = Field(default=None, description='Whether the instance is activated or not')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Instance.default", "title": "<code>default = Field(default=None, description='Whether the instance is default or not')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Instance.insecure", "title": "<code>insecure = Field(default=None, description='Whether the instance endpoint is insecure or not')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Instance.setup_timestamp", "title": "<code>setup_timestamp = Field(default=None, description='The timestamp of instance setting up')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.PreheatPolicy", "title": "<code>PreheatPolicy</code>", "text": "Source code in <code>harborapi/models/models.py</code> <pre><code>class PreheatPolicy(BaseModel):\n    id: Optional[int] = Field(default=None, description=\"The ID of preheat policy\")\n    name: Optional[str] = Field(default=None, description=\"The Name of preheat policy\")\n    description: Optional[str] = Field(\n        default=None, description=\"The Description of preheat policy\"\n    )\n    project_id: Optional[int] = Field(\n        default=None, description=\"The ID of preheat policy project\"\n    )\n    provider_id: Optional[int] = Field(\n        default=None, description=\"The ID of preheat policy provider\"\n    )\n    provider_name: Optional[str] = Field(\n        default=None, description=\"The Name of preheat policy provider\"\n    )\n    filters: Optional[str] = Field(\n        default=None, description=\"The Filters of preheat policy\"\n    )\n    trigger: Optional[str] = Field(\n        default=None, description=\"The Trigger of preheat policy\"\n    )\n    enabled: Optional[bool] = Field(\n        default=None, description=\"Whether the preheat policy enabled\"\n    )\n    scope: Optional[str] = Field(\n        default=None, description=\"The scope of preheat policy\"\n    )\n    creation_time: Optional[datetime] = Field(\n        default=None, description=\"The Create Time of preheat policy\"\n    )\n    update_time: Optional[datetime] = Field(\n        default=None, description=\"The Update Time of preheat policy\"\n    )\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.PreheatPolicy.id", "title": "<code>id = Field(default=None, description='The ID of preheat policy')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.PreheatPolicy.name", "title": "<code>name = Field(default=None, description='The Name of preheat policy')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.PreheatPolicy.description", "title": "<code>description = Field(default=None, description='The Description of preheat policy')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.PreheatPolicy.project_id", "title": "<code>project_id = Field(default=None, description='The ID of preheat policy project')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.PreheatPolicy.provider_id", "title": "<code>provider_id = Field(default=None, description='The ID of preheat policy provider')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.PreheatPolicy.provider_name", "title": "<code>provider_name = Field(default=None, description='The Name of preheat policy provider')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.PreheatPolicy.filters", "title": "<code>filters = Field(default=None, description='The Filters of preheat policy')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.PreheatPolicy.trigger", "title": "<code>trigger = Field(default=None, description='The Trigger of preheat policy')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.PreheatPolicy.enabled", "title": "<code>enabled = Field(default=None, description='Whether the preheat policy enabled')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.PreheatPolicy.scope", "title": "<code>scope = Field(default=None, description='The scope of preheat policy')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.PreheatPolicy.creation_time", "title": "<code>creation_time = Field(default=None, description='The Create Time of preheat policy')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.PreheatPolicy.update_time", "title": "<code>update_time = Field(default=None, description='The Update Time of preheat policy')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Metrics", "title": "<code>Metrics</code>", "text": "Source code in <code>harborapi/models/models.py</code> <pre><code>class Metrics(BaseModel):\n    task_count: Optional[int] = Field(default=None, description=\"The count of task\")\n    success_task_count: Optional[int] = Field(\n        default=None, description=\"The count of success task\"\n    )\n    error_task_count: Optional[int] = Field(\n        default=None, description=\"The count of error task\"\n    )\n    pending_task_count: Optional[int] = Field(\n        default=None, description=\"The count of pending task\"\n    )\n    running_task_count: Optional[int] = Field(\n        default=None, description=\"The count of running task\"\n    )\n    scheduled_task_count: Optional[int] = Field(\n        default=None, description=\"The count of scheduled task\"\n    )\n    stopped_task_count: Optional[int] = Field(\n        default=None, description=\"The count of stopped task\"\n    )\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.Metrics.task_count", "title": "<code>task_count = Field(default=None, description='The count of task')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Metrics.success_task_count", "title": "<code>success_task_count = Field(default=None, description='The count of success task')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Metrics.error_task_count", "title": "<code>error_task_count = Field(default=None, description='The count of error task')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Metrics.pending_task_count", "title": "<code>pending_task_count = Field(default=None, description='The count of pending task')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Metrics.running_task_count", "title": "<code>running_task_count = Field(default=None, description='The count of running task')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Metrics.scheduled_task_count", "title": "<code>scheduled_task_count = Field(default=None, description='The count of scheduled task')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Metrics.stopped_task_count", "title": "<code>stopped_task_count = Field(default=None, description='The count of stopped task')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Execution", "title": "<code>Execution</code>", "text": "Source code in <code>harborapi/models/models.py</code> <pre><code>class Execution(BaseModel):\n    id: Optional[int] = Field(default=None, description=\"The ID of execution\")\n    vendor_type: Optional[str] = Field(\n        default=None, description=\"The vendor type of execution\"\n    )\n    vendor_id: Optional[int] = Field(\n        default=None, description=\"The vendor id of execution\"\n    )\n    status: Optional[str] = Field(default=None, description=\"The status of execution\")\n    status_message: Optional[str] = Field(\n        default=None, description=\"The status message of execution\"\n    )\n    metrics: Optional[Metrics] = None\n    trigger: Optional[str] = Field(default=None, description=\"The trigger of execution\")\n    extra_attrs: Optional[ExtraAttrs] = None\n    start_time: Optional[str] = Field(\n        default=None, description=\"The start time of execution\"\n    )\n    end_time: Optional[str] = Field(\n        default=None, description=\"The end time of execution\"\n    )\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.Execution.id", "title": "<code>id = Field(default=None, description='The ID of execution')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Execution.vendor_type", "title": "<code>vendor_type = Field(default=None, description='The vendor type of execution')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Execution.vendor_id", "title": "<code>vendor_id = Field(default=None, description='The vendor id of execution')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Execution.status", "title": "<code>status = Field(default=None, description='The status of execution')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Execution.status_message", "title": "<code>status_message = Field(default=None, description='The status message of execution')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Execution.metrics", "title": "<code>metrics = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Execution.trigger", "title": "<code>trigger = Field(default=None, description='The trigger of execution')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Execution.extra_attrs", "title": "<code>extra_attrs = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Execution.start_time", "title": "<code>start_time = Field(default=None, description='The start time of execution')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Execution.end_time", "title": "<code>end_time = Field(default=None, description='The end time of execution')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Task", "title": "<code>Task</code>", "text": "Source code in <code>harborapi/models/models.py</code> <pre><code>class Task(BaseModel):\n    id: Optional[int] = Field(default=None, description=\"The ID of task\")\n    execution_id: Optional[int] = Field(\n        default=None, description=\"The ID of task execution\"\n    )\n    status: Optional[str] = Field(default=None, description=\"The status of task\")\n    status_message: Optional[str] = Field(\n        default=None, description=\"The status message of task\"\n    )\n    run_count: Optional[int] = Field(default=None, description=\"The count of task run\")\n    extra_attrs: Optional[ExtraAttrs] = None\n    creation_time: Optional[str] = Field(\n        default=None, description=\"The creation time of task\"\n    )\n    update_time: Optional[str] = Field(\n        default=None, description=\"The update time of task\"\n    )\n    start_time: Optional[str] = Field(\n        default=None, description=\"The start time of task\"\n    )\n    end_time: Optional[str] = Field(default=None, description=\"The end time of task\")\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.Task.id", "title": "<code>id = Field(default=None, description='The ID of task')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Task.execution_id", "title": "<code>execution_id = Field(default=None, description='The ID of task execution')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Task.status", "title": "<code>status = Field(default=None, description='The status of task')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Task.status_message", "title": "<code>status_message = Field(default=None, description='The status message of task')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Task.run_count", "title": "<code>run_count = Field(default=None, description='The count of task run')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Task.extra_attrs", "title": "<code>extra_attrs = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Task.creation_time", "title": "<code>creation_time = Field(default=None, description='The creation time of task')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Task.update_time", "title": "<code>update_time = Field(default=None, description='The update time of task')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Task.start_time", "title": "<code>start_time = Field(default=None, description='The start time of task')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Task.end_time", "title": "<code>end_time = Field(default=None, description='The end time of task')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ProviderUnderProject", "title": "<code>ProviderUnderProject</code>", "text": "Source code in <code>harborapi/models/models.py</code> <pre><code>class ProviderUnderProject(BaseModel):\n    id: Optional[int] = None\n    provider: Optional[str] = None\n    enabled: Optional[bool] = None\n    default: Optional[bool] = None\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.ProviderUnderProject.id", "title": "<code>id = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ProviderUnderProject.provider", "title": "<code>provider = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ProviderUnderProject.enabled", "title": "<code>enabled = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ProviderUnderProject.default", "title": "<code>default = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Icon", "title": "<code>Icon</code>", "text": "Source code in <code>harborapi/models/models.py</code> <pre><code>class Icon(BaseModel):\n    content_type: Optional[str] = Field(\n        default=None, alias=\"content-type\", description=\"The content type of the icon\"\n    )\n    content: Optional[str] = Field(\n        default=None, description=\"The base64 encoded content of the icon\"\n    )\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.Icon.content_type", "title": "<code>content_type = Field(default=None, alias='content-type', description='The content type of the icon')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Icon.content", "title": "<code>content = Field(default=None, description='The base64 encoded content of the icon')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ProjectDeletable", "title": "<code>ProjectDeletable</code>", "text": "Source code in <code>harborapi/models/models.py</code> <pre><code>class ProjectDeletable(BaseModel):\n    deletable: Optional[bool] = Field(\n        default=None, description=\"Whether the project can be deleted.\"\n    )\n    message: Optional[str] = Field(\n        default=None,\n        description=\"The detail message when the project can not be deleted.\",\n    )\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.ProjectDeletable.deletable", "title": "<code>deletable = Field(default=None, description='Whether the project can be deleted.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ProjectDeletable.message", "title": "<code>message = Field(default=None, description='The detail message when the project can not be deleted.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ProjectMetadata", "title": "<code>ProjectMetadata</code>", "text": "Source code in <code>harborapi/models/models.py</code> <pre><code>class ProjectMetadata(BaseModel):\n    public: Optional[str] = Field(\n        default=None,\n        description='The public status of the project. The valid values are \"true\", \"false\".',\n    )\n    enable_content_trust: Optional[str] = Field(\n        default=None,\n        description='Whether content trust is enabled or not. If it is enabled, user can\\'t pull unsigned images from this project. The valid values are \"true\", \"false\".',\n    )\n    enable_content_trust_cosign: Optional[str] = Field(\n        default=None,\n        description='Whether cosign content trust is enabled or not. If it is enabled, user can\\'t pull images without cosign signature from this project. The valid values are \"true\", \"false\".',\n    )\n    prevent_vul: Optional[str] = Field(\n        default=None,\n        description='Whether prevent the vulnerable images from running. The valid values are \"true\", \"false\".',\n    )\n    severity: Optional[str] = Field(\n        default=None,\n        description='If the vulnerability is high than severity defined here, the images can\\'t be pulled. The valid values are \"none\", \"low\", \"medium\", \"high\", \"critical\".',\n    )\n    auto_scan: Optional[str] = Field(\n        default=None,\n        description='Whether scan images automatically when pushing. The valid values are \"true\", \"false\".',\n    )\n    auto_sbom_generation: Optional[str] = Field(\n        default=None,\n        description='Whether generating SBOM automatically when pushing a subject artifact. The valid values are \"true\", \"false\".',\n    )\n    reuse_sys_cve_allowlist: Optional[str] = Field(\n        default=None,\n        description='Whether this project reuse the system level CVE allowlist as the allowlist of its own.  The valid values are \"true\", \"false\". If it is set to \"true\" the actual allowlist associate with this project, if any, will be ignored.',\n    )\n    retention_id: Optional[Union[str, int]] = Field(\n        default=None, description=\"The ID of the tag retention policy for the project\"\n    )\n    proxy_speed_kb: Optional[str] = Field(\n        default=None,\n        description=\"The bandwidth limit of proxy cache, in Kbps (kilobits per second). It limits the communication between Harbor and the upstream registry, not the client and the Harbor.\",\n    )\n\n    @field_validator(\"*\", mode=\"before\")\n    @classmethod\n    def _validate_strbool(\n        cls: PyType[\"BaseModel\"], v: Any, info: ValidationInfo\n    ) -&gt; Any:\n        \"\"\"The project metadata model spec specifies that all fields are\n        strings, but their valid values are 'true' and 'false'.\n\n        Pydantic has built-in conversion from bool to str, but it yields\n        'True' and 'False' instead of 'true' and 'false'. This validator\n        converts bools to the strings 'true' and 'false' instead.\n\n        This validator only converts the values if the field\n        description contains the word '\"true\"' (with double quotes).\n        \"\"\"\n        if not isinstance(v, bool):\n            return v\n        if not info.field_name:\n            raise ValueError(\"Validator is not attached to a field.\")\n        field = cls.model_fields[info.field_name]\n        if not field.description or '\"true\"' not in field.description:\n            return v\n        return str(v).lower()\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.ProjectMetadata.public", "title": "<code>public = Field(default=None, description='The public status of the project. The valid values are \"true\", \"false\".')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ProjectMetadata.enable_content_trust", "title": "<code>enable_content_trust = Field(default=None, description='Whether content trust is enabled or not. If it is enabled, user can\\'t pull unsigned images from this project. The valid values are \"true\", \"false\".')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ProjectMetadata.enable_content_trust_cosign", "title": "<code>enable_content_trust_cosign = Field(default=None, description='Whether cosign content trust is enabled or not. If it is enabled, user can\\'t pull images without cosign signature from this project. The valid values are \"true\", \"false\".')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ProjectMetadata.prevent_vul", "title": "<code>prevent_vul = Field(default=None, description='Whether prevent the vulnerable images from running. The valid values are \"true\", \"false\".')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ProjectMetadata.severity", "title": "<code>severity = Field(default=None, description='If the vulnerability is high than severity defined here, the images can\\'t be pulled. The valid values are \"none\", \"low\", \"medium\", \"high\", \"critical\".')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ProjectMetadata.auto_scan", "title": "<code>auto_scan = Field(default=None, description='Whether scan images automatically when pushing. The valid values are \"true\", \"false\".')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ProjectMetadata.auto_sbom_generation", "title": "<code>auto_sbom_generation = Field(default=None, description='Whether generating SBOM automatically when pushing a subject artifact. The valid values are \"true\", \"false\".')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ProjectMetadata.reuse_sys_cve_allowlist", "title": "<code>reuse_sys_cve_allowlist = Field(default=None, description='Whether this project reuse the system level CVE allowlist as the allowlist of its own.  The valid values are \"true\", \"false\". If it is set to \"true\" the actual allowlist associate with this project, if any, will be ignored.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ProjectMetadata.retention_id", "title": "<code>retention_id = Field(default=None, description='The ID of the tag retention policy for the project')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ProjectMetadata.proxy_speed_kb", "title": "<code>proxy_speed_kb = Field(default=None, description='The bandwidth limit of proxy cache, in Kbps (kilobits per second). It limits the communication between Harbor and the upstream registry, not the client and the Harbor.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ProjectScanner", "title": "<code>ProjectScanner</code>", "text": "Source code in <code>harborapi/models/models.py</code> <pre><code>class ProjectScanner(BaseModel):\n    uuid: str = Field(..., description=\"The identifier of the scanner registration\")\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.ProjectScanner.uuid", "title": "<code>uuid = Field(..., description='The identifier of the scanner registration')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.CVEAllowlistItem", "title": "<code>CVEAllowlistItem</code>", "text": "<p>CVE allowlist item.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class CVEAllowlistItem(BaseModel):\n    \"\"\"CVE allowlist item.\"\"\"\n\n    cve_id: Optional[str] = Field(\n        default=None, description='The ID of the CVE, such as \"CVE-2019-10164\"'\n    )\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.CVEAllowlistItem.cve_id", "title": "<code>cve_id = Field(default=None, description='The ID of the CVE, such as \"CVE-2019-10164\"')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ReplicationTriggerSettings", "title": "<code>ReplicationTriggerSettings</code>", "text": "Source code in <code>harborapi/models/models.py</code> <pre><code>class ReplicationTriggerSettings(BaseModel):\n    cron: Optional[str] = Field(\n        default=None, description=\"The cron string for scheduled trigger\"\n    )\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.ReplicationTriggerSettings.cron", "title": "<code>cron = Field(default=None, description='The cron string for scheduled trigger')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ReplicationFilter", "title": "<code>ReplicationFilter</code>", "text": "Source code in <code>harborapi/models/models.py</code> <pre><code>class ReplicationFilter(BaseModel):\n    type: Optional[str] = Field(\n        default=None, description=\"The replication policy filter type.\"\n    )\n    value: Union[str, Dict[str, Any], None] = Field(\n        default=None, description=\"The value of replication policy filter.\"\n    )\n    decoration: Optional[str] = Field(\n        default=None, description=\"matches or excludes the result\"\n    )\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.ReplicationFilter.type", "title": "<code>type = Field(default=None, description='The replication policy filter type.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ReplicationFilter.value", "title": "<code>value = Field(default=None, description='The value of replication policy filter.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ReplicationFilter.decoration", "title": "<code>decoration = Field(default=None, description='matches or excludes the result')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RegistryCredential", "title": "<code>RegistryCredential</code>", "text": "Source code in <code>harborapi/models/models.py</code> <pre><code>class RegistryCredential(BaseModel):\n    type: Optional[str] = Field(\n        default=None, description=\"Credential type, such as 'basic', 'oauth'.\"\n    )\n    access_key: Optional[str] = Field(\n        default=None,\n        description=\"Access key, e.g. user name when credential type is 'basic'.\",\n    )\n    access_secret: Optional[str] = Field(\n        default=None,\n        description=\"Access secret, e.g. password when credential type is 'basic'.\",\n    )\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.RegistryCredential.type", "title": "<code>type = Field(default=None, description=\"Credential type, such as 'basic', 'oauth'.\")</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RegistryCredential.access_key", "title": "<code>access_key = Field(default=None, description=\"Access key, e.g. user name when credential type is 'basic'.\")</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RegistryCredential.access_secret", "title": "<code>access_secret = Field(default=None, description=\"Access secret, e.g. password when credential type is 'basic'.\")</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Registry", "title": "<code>Registry</code>", "text": "Source code in <code>harborapi/models/models.py</code> <pre><code>class Registry(BaseModel):\n    id: Optional[int] = Field(default=None, description=\"The registry ID.\")\n    url: Optional[str] = Field(default=None, description=\"The registry URL string.\")\n    name: Optional[str] = Field(default=None, description=\"The registry name.\")\n    credential: Optional[RegistryCredential] = None\n    type: Optional[str] = Field(\n        default=None, description=\"Type of the registry, e.g. 'harbor'.\"\n    )\n    insecure: Optional[bool] = Field(\n        default=None,\n        description=\"Whether or not the certificate will be verified when Harbor tries to access the server.\",\n    )\n    description: Optional[str] = Field(\n        default=None, description=\"Description of the registry.\"\n    )\n    status: Optional[str] = Field(\n        default=None, description=\"Health status of the registry.\"\n    )\n    creation_time: Optional[datetime] = Field(\n        default=None, description=\"The create time of the policy.\"\n    )\n    update_time: Optional[datetime] = Field(\n        default=None, description=\"The update time of the policy.\"\n    )\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.Registry.id", "title": "<code>id = Field(default=None, description='The registry ID.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Registry.url", "title": "<code>url = Field(default=None, description='The registry URL string.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Registry.name", "title": "<code>name = Field(default=None, description='The registry name.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Registry.credential", "title": "<code>credential = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Registry.type", "title": "<code>type = Field(default=None, description=\"Type of the registry, e.g. 'harbor'.\")</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Registry.insecure", "title": "<code>insecure = Field(default=None, description='Whether or not the certificate will be verified when Harbor tries to access the server.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Registry.description", "title": "<code>description = Field(default=None, description='Description of the registry.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Registry.status", "title": "<code>status = Field(default=None, description='Health status of the registry.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Registry.creation_time", "title": "<code>creation_time = Field(default=None, description='The create time of the policy.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Registry.update_time", "title": "<code>update_time = Field(default=None, description='The update time of the policy.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RegistryUpdate", "title": "<code>RegistryUpdate</code>", "text": "Source code in <code>harborapi/models/models.py</code> <pre><code>class RegistryUpdate(BaseModel):\n    name: Optional[str] = Field(default=None, description=\"The registry name.\")\n    description: Optional[str] = Field(\n        default=None, description=\"Description of the registry.\"\n    )\n    url: Optional[str] = Field(default=None, description=\"The registry URL.\")\n    credential_type: Optional[str] = Field(\n        default=None, description=\"Credential type of the registry, e.g. 'basic'.\"\n    )\n    access_key: Optional[str] = Field(\n        default=None, description=\"The registry access key.\"\n    )\n    access_secret: Optional[str] = Field(\n        default=None, description=\"The registry access secret.\"\n    )\n    insecure: Optional[bool] = Field(\n        default=None,\n        description=\"Whether or not the certificate will be verified when Harbor tries to access the server.\",\n    )\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.RegistryUpdate.name", "title": "<code>name = Field(default=None, description='The registry name.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RegistryUpdate.description", "title": "<code>description = Field(default=None, description='Description of the registry.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RegistryUpdate.url", "title": "<code>url = Field(default=None, description='The registry URL.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RegistryUpdate.credential_type", "title": "<code>credential_type = Field(default=None, description=\"Credential type of the registry, e.g. 'basic'.\")</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RegistryUpdate.access_key", "title": "<code>access_key = Field(default=None, description='The registry access key.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RegistryUpdate.access_secret", "title": "<code>access_secret = Field(default=None, description='The registry access secret.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RegistryUpdate.insecure", "title": "<code>insecure = Field(default=None, description='Whether or not the certificate will be verified when Harbor tries to access the server.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RegistryPing", "title": "<code>RegistryPing</code>", "text": "Source code in <code>harborapi/models/models.py</code> <pre><code>class RegistryPing(BaseModel):\n    id: Optional[int] = Field(default=None, description=\"The registry ID.\")\n    type: Optional[str] = Field(\n        default=None, description=\"Type of the registry, e.g. 'harbor'.\"\n    )\n    url: Optional[str] = Field(default=None, description=\"The registry URL.\")\n    credential_type: Optional[str] = Field(\n        default=None, description=\"Credential type of the registry, e.g. 'basic'.\"\n    )\n    access_key: Optional[str] = Field(\n        default=None, description=\"The registry access key.\"\n    )\n    access_secret: Optional[str] = Field(\n        default=None, description=\"The registry access secret.\"\n    )\n    insecure: Optional[bool] = Field(\n        default=None,\n        description=\"Whether or not the certificate will be verified when Harbor tries to access the server.\",\n    )\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.RegistryPing.id", "title": "<code>id = Field(default=None, description='The registry ID.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RegistryPing.type", "title": "<code>type = Field(default=None, description=\"Type of the registry, e.g. 'harbor'.\")</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RegistryPing.url", "title": "<code>url = Field(default=None, description='The registry URL.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RegistryPing.credential_type", "title": "<code>credential_type = Field(default=None, description=\"Credential type of the registry, e.g. 'basic'.\")</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RegistryPing.access_key", "title": "<code>access_key = Field(default=None, description='The registry access key.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RegistryPing.access_secret", "title": "<code>access_secret = Field(default=None, description='The registry access secret.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RegistryPing.insecure", "title": "<code>insecure = Field(default=None, description='Whether or not the certificate will be verified when Harbor tries to access the server.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RegistryProviderCredentialPattern", "title": "<code>RegistryProviderCredentialPattern</code>", "text": "<p>Pattern for a registry credential.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class RegistryProviderCredentialPattern(BaseModel):\n    \"\"\"Pattern for a registry credential.\"\"\"\n\n    access_key_type: Optional[str] = Field(\n        default=None, description=\"The access key type\"\n    )\n    access_key_data: Optional[str] = Field(\n        default=None, description=\"The access key data\"\n    )\n    access_secret_type: Optional[str] = Field(\n        default=None, description=\"The access secret type\"\n    )\n    access_secret_data: Optional[str] = Field(\n        default=None, description=\"The access secret data\"\n    )\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.RegistryProviderCredentialPattern.access_key_type", "title": "<code>access_key_type = Field(default=None, description='The access key type')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RegistryProviderCredentialPattern.access_key_data", "title": "<code>access_key_data = Field(default=None, description='The access key data')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RegistryProviderCredentialPattern.access_secret_type", "title": "<code>access_secret_type = Field(default=None, description='The access secret type')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RegistryProviderCredentialPattern.access_secret_data", "title": "<code>access_secret_data = Field(default=None, description='The access secret data')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RegistryEndpoint", "title": "<code>RegistryEndpoint</code>", "text": "<p>Registry endpoint configuration.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class RegistryEndpoint(BaseModel):\n    \"\"\"Registry endpoint configuration.\"\"\"\n\n    key: Optional[str] = Field(default=None, description=\"The endpoint key\")\n    value: Optional[str] = Field(default=None, description=\"The endpoint value\")\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.RegistryEndpoint.key", "title": "<code>key = Field(default=None, description='The endpoint key')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RegistryEndpoint.value", "title": "<code>value = Field(default=None, description='The endpoint value')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.FilterStyle", "title": "<code>FilterStyle</code>", "text": "<p>Style of the resource filter.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class FilterStyle(BaseModel):\n    \"\"\"Style of the resource filter.\"\"\"\n\n    type: Optional[str] = Field(default=None, description=\"The filter type\")\n    style: Optional[str] = Field(default=None, description=\"The filter style\")\n    values: Optional[List[str]] = Field(default=None, description=\"The filter values\")\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.FilterStyle.type", "title": "<code>type = Field(default=None, description='The filter type')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.FilterStyle.style", "title": "<code>style = Field(default=None, description='The filter style')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.FilterStyle.values", "title": "<code>values = Field(default=None, description='The filter values')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ResourceList", "title": "<code>ResourceList</code>", "text": "Source code in <code>harborapi/models/models.py</code> <pre><code>class ResourceList(RootModel[Optional[Dict[str, int]]]):\n    root: Optional[Dict[str, int]] = None\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.ResourceList.root", "title": "<code>root = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ReplicationExecution", "title": "<code>ReplicationExecution</code>", "text": "<p>The execution of a replication job.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class ReplicationExecution(BaseModel):\n    \"\"\"The execution of a replication job.\"\"\"\n\n    id: Optional[int] = Field(default=None, description=\"The ID of the execution\")\n    policy_id: Optional[int] = Field(\n        default=None, description=\"The ID if the policy that the execution belongs to\"\n    )\n    status: Optional[str] = Field(\n        default=None, description=\"The status of the execution\"\n    )\n    trigger: Optional[str] = Field(default=None, description=\"The trigger mode\")\n    start_time: Optional[datetime] = Field(default=None, description=\"The start time\")\n    end_time: Optional[datetime] = Field(default=None, description=\"The end time\")\n    status_text: Optional[str] = Field(default=None, description=\"The status text\")\n    total: Optional[int] = Field(\n        default=None, description=\"The total count of all executions\"\n    )\n    failed: Optional[int] = Field(\n        default=None, description=\"The count of failed executions\"\n    )\n    succeed: Optional[int] = Field(\n        default=None, description=\"The count of succeed executions\"\n    )\n    in_progress: Optional[int] = Field(\n        default=None, description=\"The count of in_progress executions\"\n    )\n    stopped: Optional[int] = Field(\n        default=None, description=\"The count of stopped executions\"\n    )\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.ReplicationExecution.id", "title": "<code>id = Field(default=None, description='The ID of the execution')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ReplicationExecution.policy_id", "title": "<code>policy_id = Field(default=None, description='The ID if the policy that the execution belongs to')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ReplicationExecution.status", "title": "<code>status = Field(default=None, description='The status of the execution')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ReplicationExecution.trigger", "title": "<code>trigger = Field(default=None, description='The trigger mode')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ReplicationExecution.start_time", "title": "<code>start_time = Field(default=None, description='The start time')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ReplicationExecution.end_time", "title": "<code>end_time = Field(default=None, description='The end time')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ReplicationExecution.status_text", "title": "<code>status_text = Field(default=None, description='The status text')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ReplicationExecution.total", "title": "<code>total = Field(default=None, description='The total count of all executions')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ReplicationExecution.failed", "title": "<code>failed = Field(default=None, description='The count of failed executions')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ReplicationExecution.succeed", "title": "<code>succeed = Field(default=None, description='The count of succeed executions')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ReplicationExecution.in_progress", "title": "<code>in_progress = Field(default=None, description='The count of in_progress executions')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ReplicationExecution.stopped", "title": "<code>stopped = Field(default=None, description='The count of stopped executions')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.StartReplicationExecution", "title": "<code>StartReplicationExecution</code>", "text": "Source code in <code>harborapi/models/models.py</code> <pre><code>class StartReplicationExecution(BaseModel):\n    policy_id: Optional[int] = Field(\n        default=None, description=\"The ID of policy that the execution belongs to.\"\n    )\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.StartReplicationExecution.policy_id", "title": "<code>policy_id = Field(default=None, description='The ID of policy that the execution belongs to.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ReplicationTask", "title": "<code>ReplicationTask</code>", "text": "<p>A task that is a part of a replication job.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class ReplicationTask(BaseModel):\n    \"\"\"A task that is a part of a replication job.\"\"\"\n\n    id: Optional[int] = Field(default=None, description=\"The ID of the task\")\n    execution_id: Optional[int] = Field(\n        default=None, description=\"The ID of the execution that the task belongs to\"\n    )\n    status: Optional[str] = Field(default=None, description=\"The status of the task\")\n    job_id: Optional[str] = Field(\n        default=None,\n        description=\"The ID of the underlying job that the task related to\",\n    )\n    operation: Optional[str] = Field(\n        default=None, description=\"The operation of the task\"\n    )\n    resource_type: Optional[str] = Field(\n        default=None, description=\"The type of the resource that the task operates\"\n    )\n    src_resource: Optional[str] = Field(\n        default=None, description=\"The source resource that the task operates\"\n    )\n    dst_resource: Optional[str] = Field(\n        default=None, description=\"The destination resource that the task operates\"\n    )\n    start_time: Optional[datetime] = Field(\n        default=None, description=\"The start time of the task\"\n    )\n    end_time: Optional[datetime] = Field(\n        default=None, description=\"The end time of the task\"\n    )\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.ReplicationTask.id", "title": "<code>id = Field(default=None, description='The ID of the task')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ReplicationTask.execution_id", "title": "<code>execution_id = Field(default=None, description='The ID of the execution that the task belongs to')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ReplicationTask.status", "title": "<code>status = Field(default=None, description='The status of the task')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ReplicationTask.job_id", "title": "<code>job_id = Field(default=None, description='The ID of the underlying job that the task related to')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ReplicationTask.operation", "title": "<code>operation = Field(default=None, description='The operation of the task')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ReplicationTask.resource_type", "title": "<code>resource_type = Field(default=None, description='The type of the resource that the task operates')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ReplicationTask.src_resource", "title": "<code>src_resource = Field(default=None, description='The source resource that the task operates')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ReplicationTask.dst_resource", "title": "<code>dst_resource = Field(default=None, description='The destination resource that the task operates')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ReplicationTask.start_time", "title": "<code>start_time = Field(default=None, description='The start time of the task')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ReplicationTask.end_time", "title": "<code>end_time = Field(default=None, description='The end time of the task')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RobotCreated", "title": "<code>RobotCreated</code>", "text": "<p>Response for robot account creation.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class RobotCreated(BaseModel):\n    \"\"\"Response for robot account creation.\"\"\"\n\n    id: Optional[int] = Field(default=None, description=\"The ID of the robot\")\n    name: Optional[str] = Field(default=None, description=\"The name of the robot\")\n    secret: Optional[str] = Field(default=None, description=\"The secret of the robot\")\n    creation_time: Optional[datetime] = Field(\n        default=None, description=\"The creation time of the robot.\"\n    )\n    expires_at: Optional[int] = Field(\n        default=None, description=\"The expiration date of the robot\"\n    )\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.RobotCreated.id", "title": "<code>id = Field(default=None, description='The ID of the robot')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RobotCreated.name", "title": "<code>name = Field(default=None, description='The name of the robot')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RobotCreated.secret", "title": "<code>secret = Field(default=None, description='The secret of the robot')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RobotCreated.creation_time", "title": "<code>creation_time = Field(default=None, description='The creation time of the robot.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RobotCreated.expires_at", "title": "<code>expires_at = Field(default=None, description='The expiration date of the robot')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RobotSec", "title": "<code>RobotSec</code>", "text": "<p>Response for robot account secret refresh/update.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class RobotSec(BaseModel):\n    \"\"\"Response for robot account secret refresh/update.\"\"\"\n\n    secret: Optional[str] = Field(default=None, description=\"The secret of the robot\")\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.RobotSec.secret", "title": "<code>secret = Field(default=None, description='The secret of the robot')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Access", "title": "<code>Access</code>", "text": "Source code in <code>harborapi/models/models.py</code> <pre><code>class Access(BaseModel):\n    resource: Optional[str] = Field(\n        default=None,\n        description=\"The resource of the access. Possible resources are listed here for system and project level https://github.com/goharbor/harbor/blob/main/src/common/rbac/const.go\",\n    )\n    action: Optional[str] = Field(\n        default=None,\n        description=\"The action of the access. Possible actions are *, pull, push, create, read, update, delete, list, operate, scanner-pull and stop.\",\n    )\n    effect: Optional[str] = Field(default=None, description=\"The effect of the access\")\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.Access.resource", "title": "<code>resource = Field(default=None, description='The resource of the access. Possible resources are listed here for system and project level https://github.com/goharbor/harbor/blob/main/src/common/rbac/const.go')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Access.action", "title": "<code>action = Field(default=None, description='The action of the access. Possible actions are *, pull, push, create, read, update, delete, list, operate, scanner-pull and stop.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Access.effect", "title": "<code>effect = Field(default=None, description='The effect of the access')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RobotCreateV1", "title": "<code>RobotCreateV1</code>", "text": "Source code in <code>harborapi/models/models.py</code> <pre><code>class RobotCreateV1(BaseModel):\n    name: Optional[str] = Field(default=None, description=\"The name of robot account\")\n    description: Optional[str] = Field(\n        default=None, description=\"The description of robot account\"\n    )\n    expires_at: Optional[int] = Field(\n        default=None,\n        description=\"The expiration time on or after which the JWT MUST NOT be accepted for processing.\",\n    )\n    access: Optional[List[Access]] = Field(\n        default=None, description=\"The permission of robot account\"\n    )\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.RobotCreateV1.name", "title": "<code>name = Field(default=None, description='The name of robot account')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RobotCreateV1.description", "title": "<code>description = Field(default=None, description='The description of robot account')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RobotCreateV1.expires_at", "title": "<code>expires_at = Field(default=None, description='The expiration time on or after which the JWT MUST NOT be accepted for processing.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RobotCreateV1.access", "title": "<code>access = Field(default=None, description='The permission of robot account')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Storage", "title": "<code>Storage</code>", "text": "Source code in <code>harborapi/models/models.py</code> <pre><code>class Storage(BaseModel):\n    total: Optional[int] = Field(default=None, description=\"Total volume size.\")\n    free: Optional[int] = Field(default=None, description=\"Free volume size.\")\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.Storage.total", "title": "<code>total = Field(default=None, description='Total volume size.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Storage.free", "title": "<code>free = Field(default=None, description='Free volume size.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.AuthproxySetting", "title": "<code>AuthproxySetting</code>", "text": "Source code in <code>harborapi/models/models.py</code> <pre><code>class AuthproxySetting(BaseModel):\n    endpoint: Optional[str] = Field(\n        default=None,\n        description=\"The fully qualified URI of login endpoint of authproxy, such as 'https://192.168.1.2:8443/login'\",\n    )\n    tokenreivew_endpoint: Optional[str] = Field(\n        default=None,\n        description=\"The fully qualified URI of token review endpoint of authproxy, such as 'https://192.168.1.2:8443/tokenreview'\",\n    )\n    skip_search: Optional[bool] = Field(\n        default=None,\n        description=\"The flag to determine whether Harbor can skip search the user/group when adding him as a member.\",\n    )\n    verify_cert: Optional[bool] = Field(\n        default=None,\n        description=\"The flag to determine whether Harbor should verify the certificate when connecting to the auth proxy.\",\n    )\n    server_certificate: Optional[str] = Field(\n        default=None,\n        description=\"The certificate to be pinned when connecting auth proxy.\",\n    )\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.AuthproxySetting.endpoint", "title": "<code>endpoint = Field(default=None, description=\"The fully qualified URI of login endpoint of authproxy, such as 'https://192.168.1.2:8443/login'\")</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.AuthproxySetting.tokenreivew_endpoint", "title": "<code>tokenreivew_endpoint = Field(default=None, description=\"The fully qualified URI of token review endpoint of authproxy, such as 'https://192.168.1.2:8443/tokenreview'\")</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.AuthproxySetting.skip_search", "title": "<code>skip_search = Field(default=None, description='The flag to determine whether Harbor can skip search the user/group when adding him as a member.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.AuthproxySetting.verify_cert", "title": "<code>verify_cert = Field(default=None, description='The flag to determine whether Harbor should verify the certificate when connecting to the auth proxy.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.AuthproxySetting.server_certificate", "title": "<code>server_certificate = Field(default=None, description='The certificate to be pinned when connecting auth proxy.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.SystemInfo", "title": "<code>SystemInfo</code>", "text": "Source code in <code>harborapi/models/models.py</code> <pre><code>class SystemInfo(BaseModel):\n    storage: Optional[List[Storage]] = Field(\n        default=None, description=\"The storage of system.\"\n    )\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.SystemInfo.storage", "title": "<code>storage = Field(default=None, description='The storage of system.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Type", "title": "<code>Type</code>", "text": "<p>The schedule type. The valid values are 'Hourly', 'Daily', 'Weekly', 'Custom', 'Manual', 'None' and 'Schedule'. 'Manual' means to trigger it right away, 'Schedule' means to trigger it by a specified cron schedule and 'None' means to cancel the schedule.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class Type(Enum):\n    \"\"\"\n    The schedule type. The valid values are 'Hourly', 'Daily', 'Weekly', 'Custom', 'Manual', 'None' and 'Schedule'.\n    'Manual' means to trigger it right away, 'Schedule' means to trigger it by a specified cron schedule and\n    'None' means to cancel the schedule.\n\n    \"\"\"\n\n    hourly = \"Hourly\"\n    daily = \"Daily\"\n    weekly = \"Weekly\"\n    custom = \"Custom\"\n    manual = \"Manual\"\n    \"Trigger schedule right away.\"\n    none = \"None\"\n    \"Cancel the schedule.\"\n    schedule = \"Schedule\"\n    \"Trigger based on cron schedule.\"\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.Type.hourly", "title": "<code>hourly = 'Hourly'</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Type.daily", "title": "<code>daily = 'Daily'</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Type.weekly", "title": "<code>weekly = 'Weekly'</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Type.custom", "title": "<code>custom = 'Custom'</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Type.manual", "title": "<code>manual = 'Manual'</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": "<p>Trigger schedule right away.</p>"}, {"location": "reference/models/_models/#harborapi.models._models.Type.none", "title": "<code>none = 'None'</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": "<p>Cancel the schedule.</p>"}, {"location": "reference/models/_models/#harborapi.models._models.Type.schedule", "title": "<code>schedule = 'Schedule'</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": "<p>Trigger based on cron schedule.</p>"}, {"location": "reference/models/_models/#harborapi.models._models.ScheduleObj", "title": "<code>ScheduleObj</code>", "text": "Source code in <code>harborapi/models/models.py</code> <pre><code>class ScheduleObj(BaseModel):\n    type: Optional[Type] = Field(\n        default=None,\n        description=\"The schedule type. The valid values are 'Hourly', 'Daily', 'Weekly', 'Custom', 'Manual', 'None' and 'Schedule'.\\n'Manual' means to trigger it right away, 'Schedule' means to trigger it by a specified cron schedule and\\n'None' means to cancel the schedule.\\n\",\n    )\n    cron: Optional[str] = Field(\n        default=None, description=\"A cron expression, a time-based job scheduler.\"\n    )\n    next_scheduled_time: Optional[datetime] = Field(\n        default=None, description=\"The next time to schedule to run the job.\"\n    )\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.ScheduleObj.type", "title": "<code>type = Field(default=None, description=\"The schedule type. The valid values are 'Hourly', 'Daily', 'Weekly', 'Custom', 'Manual', 'None' and 'Schedule'.\\n'Manual' means to trigger it right away, 'Schedule' means to trigger it by a specified cron schedule and\\n'None' means to cancel the schedule.\\n\")</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ScheduleObj.cron", "title": "<code>cron = Field(default=None, description='A cron expression, a time-based job scheduler.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ScheduleObj.next_scheduled_time", "title": "<code>next_scheduled_time = Field(default=None, description='The next time to schedule to run the job.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Trigger", "title": "<code>Trigger</code>", "text": "<p>Trigger type for a 'scan all' job.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class Trigger(Enum):\n    \"\"\"Trigger type for a 'scan all' job.\"\"\"\n\n    manual = \"Manual\"\n    schedule = \"Schedule\"\n    event = \"Event\"\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.Trigger.manual", "title": "<code>manual = 'Manual'</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Trigger.schedule", "title": "<code>schedule = 'Schedule'</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Trigger.event", "title": "<code>event = 'Event'</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Stats", "title": "<code>Stats</code>", "text": "<p>Progress of the 'scan all' process.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class Stats(BaseModel):\n    \"\"\"Progress of the 'scan all' process.\"\"\"\n\n    total: Optional[int] = Field(\n        default=None,\n        description=\"The total number of scan processes triggered by the scan all action\",\n        examples=[100],\n    )\n    completed: Optional[int] = Field(\n        default=None,\n        description=\"The number of the finished scan processes triggered by the scan all action\",\n        examples=[90],\n    )\n    metrics: Optional[Dict[str, int]] = Field(\n        default=None,\n        description=\"The metrics data for the each status\",\n        examples=[{\"Success\": 5, \"Error\": 2, \"Running\": 3}],\n    )\n    ongoing: Optional[bool] = Field(\n        default=None, description=\"A flag indicating job status of scan all.\"\n    )\n    trigger: Optional[Trigger] = Field(\n        default=None, description=\"The trigger of the scan all job.\"\n    )\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.Stats.total", "title": "<code>total = Field(default=None, description='The total number of scan processes triggered by the scan all action', examples=[100])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Stats.completed", "title": "<code>completed = Field(default=None, description='The number of the finished scan processes triggered by the scan all action', examples=[90])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Stats.metrics", "title": "<code>metrics = Field(default=None, description='The metrics data for the each status', examples=[{'Success': 5, 'Error': 2, 'Running': 3}])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Stats.ongoing", "title": "<code>ongoing = Field(default=None, description='A flag indicating job status of scan all.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Stats.trigger", "title": "<code>trigger = Field(default=None, description='The trigger of the scan all job.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RetentionRuleParamMetadata", "title": "<code>RetentionRuleParamMetadata</code>", "text": "<p>Parameters for a retention rule.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class RetentionRuleParamMetadata(BaseModel):\n    \"\"\"Parameters for a retention rule.\"\"\"\n\n    type: Optional[str] = None\n    unit: Optional[str] = None\n    required: Optional[bool] = None\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.RetentionRuleParamMetadata.type", "title": "<code>type = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RetentionRuleParamMetadata.unit", "title": "<code>unit = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RetentionRuleParamMetadata.required", "title": "<code>required = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RetentionSelectorMetadata", "title": "<code>RetentionSelectorMetadata</code>", "text": "<p>Metadata for a retention rule selector.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class RetentionSelectorMetadata(BaseModel):\n    \"\"\"Metadata for a retention rule selector.\"\"\"\n\n    display_text: Optional[str] = None\n    kind: Optional[str] = None\n    decorations: Optional[List[str]] = None\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.RetentionSelectorMetadata.display_text", "title": "<code>display_text = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RetentionSelectorMetadata.kind", "title": "<code>kind = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RetentionSelectorMetadata.decorations", "title": "<code>decorations = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RetentionRuleTrigger", "title": "<code>RetentionRuleTrigger</code>", "text": "Source code in <code>harborapi/models/models.py</code> <pre><code>class RetentionRuleTrigger(BaseModel):\n    kind: Optional[str] = None\n    settings: Optional[Dict[str, Any]] = None\n    references: Optional[Dict[str, Any]] = None\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.RetentionRuleTrigger.kind", "title": "<code>kind = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RetentionRuleTrigger.settings", "title": "<code>settings = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RetentionRuleTrigger.references", "title": "<code>references = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RetentionPolicyScope", "title": "<code>RetentionPolicyScope</code>", "text": "Source code in <code>harborapi/models/models.py</code> <pre><code>class RetentionPolicyScope(BaseModel):\n    level: Optional[str] = None\n    ref: Optional[int] = None\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.RetentionPolicyScope.level", "title": "<code>level = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RetentionPolicyScope.ref", "title": "<code>ref = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RetentionSelector", "title": "<code>RetentionSelector</code>", "text": "Source code in <code>harborapi/models/models.py</code> <pre><code>class RetentionSelector(BaseModel):\n    kind: Optional[str] = None\n    decoration: Optional[str] = None\n    pattern: Optional[str] = None\n    extras: Optional[str] = None\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.RetentionSelector.kind", "title": "<code>kind = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RetentionSelector.decoration", "title": "<code>decoration = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RetentionSelector.pattern", "title": "<code>pattern = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RetentionSelector.extras", "title": "<code>extras = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RetentionExecution", "title": "<code>RetentionExecution</code>", "text": "Source code in <code>harborapi/models/models.py</code> <pre><code>class RetentionExecution(BaseModel):\n    id: Optional[int] = None\n    policy_id: Optional[int] = None\n    start_time: Optional[str] = None\n    end_time: Optional[str] = None\n    status: Optional[str] = None\n    trigger: Optional[str] = None\n    dry_run: Optional[bool] = None\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.RetentionExecution.id", "title": "<code>id = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RetentionExecution.policy_id", "title": "<code>policy_id = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RetentionExecution.start_time", "title": "<code>start_time = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RetentionExecution.end_time", "title": "<code>end_time = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RetentionExecution.status", "title": "<code>status = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RetentionExecution.trigger", "title": "<code>trigger = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RetentionExecution.dry_run", "title": "<code>dry_run = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RetentionExecutionTask", "title": "<code>RetentionExecutionTask</code>", "text": "Source code in <code>harborapi/models/models.py</code> <pre><code>class RetentionExecutionTask(BaseModel):\n    id: Optional[int] = None\n    execution_id: Optional[int] = None\n    repository: Optional[str] = None\n    job_id: Optional[str] = None\n    status: Optional[str] = None\n    status_code: Optional[int] = None\n    status_revision: Optional[int] = None\n    start_time: Optional[str] = None\n    end_time: Optional[str] = None\n    total: Optional[int] = None\n    retained: Optional[int] = None\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.RetentionExecutionTask.id", "title": "<code>id = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RetentionExecutionTask.execution_id", "title": "<code>execution_id = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RetentionExecutionTask.repository", "title": "<code>repository = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RetentionExecutionTask.job_id", "title": "<code>job_id = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RetentionExecutionTask.status", "title": "<code>status = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RetentionExecutionTask.status_code", "title": "<code>status_code = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RetentionExecutionTask.status_revision", "title": "<code>status_revision = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RetentionExecutionTask.start_time", "title": "<code>start_time = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RetentionExecutionTask.end_time", "title": "<code>end_time = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RetentionExecutionTask.total", "title": "<code>total = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RetentionExecutionTask.retained", "title": "<code>retained = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.QuotaUpdateReq", "title": "<code>QuotaUpdateReq</code>", "text": "Source code in <code>harborapi/models/models.py</code> <pre><code>class QuotaUpdateReq(BaseModel):\n    hard: Optional[ResourceList] = None\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.QuotaUpdateReq.hard", "title": "<code>hard = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.QuotaRefObject", "title": "<code>QuotaRefObject</code>", "text": "Source code in <code>harborapi/models/models.py</code> <pre><code>class QuotaRefObject(RootModel[Optional[Dict[str, Dict[str, Any]]]]):\n    root: Optional[Dict[str, Any]] = None\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.QuotaRefObject.root", "title": "<code>root = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Quota", "title": "<code>Quota</code>", "text": "<p>Quota object.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class Quota(BaseModel):\n    \"\"\"Quota object.\"\"\"\n\n    id: Optional[int] = Field(default=None, description=\"ID of the quota\")\n    ref: Optional[QuotaRefObject] = None\n    hard: Optional[ResourceList] = None\n    used: Optional[ResourceList] = None\n    creation_time: Optional[datetime] = Field(\n        default=None, description=\"the creation time of the quota\"\n    )\n    update_time: Optional[datetime] = Field(\n        default=None, description=\"the update time of the quota\"\n    )\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.Quota.id", "title": "<code>id = Field(default=None, description='ID of the quota')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Quota.ref", "title": "<code>ref = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Quota.hard", "title": "<code>hard = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Quota.used", "title": "<code>used = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Quota.creation_time", "title": "<code>creation_time = Field(default=None, description='the creation time of the quota')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Quota.update_time", "title": "<code>update_time = Field(default=None, description='the update time of the quota')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ScannerRegistration", "title": "<code>ScannerRegistration</code>", "text": "<p>A registered scanner adapter.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class ScannerRegistration(BaseModel):\n    \"\"\"A registered scanner adapter.\"\"\"\n\n    uuid: Optional[str] = Field(\n        default=None, description=\"The unique identifier of this registration.\"\n    )\n    name: Optional[str] = Field(\n        default=None, description=\"The name of this registration.\", examples=[\"Trivy\"]\n    )\n    description: Optional[str] = Field(\n        default=None,\n        description=\"An optional description of this registration.\",\n        examples=[\n            \"A free-to-use tool that scans container images for package vulnerabilities.\\n\"\n        ],\n    )\n    url: Optional[AnyUrl] = Field(\n        default=None,\n        description=\"A base URL of the scanner adapter\",\n        examples=[\"http://harbor-scanner-trivy:8080\"],\n    )\n    disabled: Optional[bool] = Field(\n        default=False, description=\"Indicate whether the registration is enabled or not\"\n    )\n    is_default: Optional[bool] = Field(\n        default=False,\n        description=\"Indicate if the registration is set as the system default one\",\n    )\n    auth: Optional[str] = Field(\n        default=\"\",\n        description='Specify what authentication approach is adopted for the HTTP communications.\\nSupported types Basic\", \"Bearer\" and api key header \"X-ScannerAdapter-API-Key\"\\n',\n        examples=[\"Bearer\"],\n    )\n    access_credential: Optional[str] = Field(\n        default=None,\n        description=\"An optional value of the HTTP Authorization header sent with each request to the Scanner Adapter API.\\n\",\n        examples=[\"Bearer: JWTTOKENGOESHERE\"],\n    )\n    skip_cert_verify: Optional[bool] = Field(\n        default=False,\n        alias=\"skip_certVerify\",\n        description=\"Indicate if skip the certificate verification when sending HTTP requests\",\n    )\n    use_internal_addr: Optional[bool] = Field(\n        default=False,\n        description=\"Indicate whether use internal registry addr for the scanner to pull content or not\",\n    )\n    create_time: Optional[datetime] = Field(\n        default=None, description=\"The creation time of this registration\"\n    )\n    update_time: Optional[datetime] = Field(\n        default=None, description=\"The update time of this registration\"\n    )\n    adapter: Optional[str] = Field(\n        default=None,\n        description=\"Optional property to describe the name of the scanner registration\",\n        examples=[\"Trivy\"],\n    )\n    vendor: Optional[str] = Field(\n        default=None,\n        description=\"Optional property to describe the vendor of the scanner registration\",\n        examples=[\"CentOS\"],\n    )\n    version: Optional[str] = Field(\n        default=None,\n        description=\"Optional property to describe the version of the scanner registration\",\n        examples=[\"1.0.1\"],\n    )\n    health: Optional[str] = Field(\n        default=\"\",\n        description=\"Indicate the healthy of the registration\",\n        examples=[\"healthy\"],\n    )\n    capabilities: Optional[Dict[str, Any]] = Field(\n        default=None,\n        description=\"Indicates the capabilities of the scanner, e.g. support_vulnerability or support_sbom.\",\n        examples=[{\"support_vulnerability\": True, \"support_sbom\": True}],\n    )\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.ScannerRegistration.uuid", "title": "<code>uuid = Field(default=None, description='The unique identifier of this registration.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ScannerRegistration.name", "title": "<code>name = Field(default=None, description='The name of this registration.', examples=['Trivy'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ScannerRegistration.description", "title": "<code>description = Field(default=None, description='An optional description of this registration.', examples=['A free-to-use tool that scans container images for package vulnerabilities.\\n'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ScannerRegistration.url", "title": "<code>url = Field(default=None, description='A base URL of the scanner adapter', examples=['http://harbor-scanner-trivy:8080'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ScannerRegistration.disabled", "title": "<code>disabled = Field(default=False, description='Indicate whether the registration is enabled or not')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ScannerRegistration.is_default", "title": "<code>is_default = Field(default=False, description='Indicate if the registration is set as the system default one')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ScannerRegistration.auth", "title": "<code>auth = Field(default='', description='Specify what authentication approach is adopted for the HTTP communications.\\nSupported types Basic\", \"Bearer\" and api key header \"X-ScannerAdapter-API-Key\"\\n', examples=['Bearer'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ScannerRegistration.access_credential", "title": "<code>access_credential = Field(default=None, description='An optional value of the HTTP Authorization header sent with each request to the Scanner Adapter API.\\n', examples=['Bearer: JWTTOKENGOESHERE'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ScannerRegistration.skip_cert_verify", "title": "<code>skip_cert_verify = Field(default=False, alias='skip_certVerify', description='Indicate if skip the certificate verification when sending HTTP requests')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ScannerRegistration.use_internal_addr", "title": "<code>use_internal_addr = Field(default=False, description='Indicate whether use internal registry addr for the scanner to pull content or not')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ScannerRegistration.create_time", "title": "<code>create_time = Field(default=None, description='The creation time of this registration')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ScannerRegistration.update_time", "title": "<code>update_time = Field(default=None, description='The update time of this registration')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ScannerRegistration.adapter", "title": "<code>adapter = Field(default=None, description='Optional property to describe the name of the scanner registration', examples=['Trivy'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ScannerRegistration.vendor", "title": "<code>vendor = Field(default=None, description='Optional property to describe the vendor of the scanner registration', examples=['CentOS'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ScannerRegistration.version", "title": "<code>version = Field(default=None, description='Optional property to describe the version of the scanner registration', examples=['1.0.1'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ScannerRegistration.health", "title": "<code>health = Field(default='', description='Indicate the healthy of the registration', examples=['healthy'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ScannerRegistration.capabilities", "title": "<code>capabilities = Field(default=None, description='Indicates the capabilities of the scanner, e.g. support_vulnerability or support_sbom.', examples=[{'support_vulnerability': True, 'support_sbom': True}])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ScannerRegistrationReq", "title": "<code>ScannerRegistrationReq</code>", "text": "Source code in <code>harborapi/models/models.py</code> <pre><code>class ScannerRegistrationReq(BaseModel):\n    name: str = Field(\n        ..., description=\"The name of this registration\", examples=[\"Trivy\"]\n    )\n    description: Optional[str] = Field(\n        default=None,\n        description=\"An optional description of this registration.\",\n        examples=[\n            \"A free-to-use tool that scans container images for package vulnerabilities.\\n\"\n        ],\n    )\n    url: AnyUrl = Field(\n        ...,\n        description=\"A base URL of the scanner adapter.\",\n        examples=[\"http://harbor-scanner-trivy:8080\"],\n    )\n    auth: Optional[str] = Field(\n        default=None,\n        description='Specify what authentication approach is adopted for the HTTP communications.\\nSupported types Basic\", \"Bearer\" and api key header \"X-ScannerAdapter-API-Key\"\\n',\n        examples=[\"Bearer\"],\n    )\n    access_credential: Optional[str] = Field(\n        default=None,\n        description=\"An optional value of the HTTP Authorization header sent with each request to the Scanner Adapter API.\\n\",\n        examples=[\"Bearer: JWTTOKENGOESHERE\"],\n    )\n    skip_cert_verify: Optional[bool] = Field(\n        default=False,\n        alias=\"skip_certVerify\",\n        description=\"Indicate if skip the certificate verification when sending HTTP requests\",\n    )\n    use_internal_addr: Optional[bool] = Field(\n        default=False,\n        description=\"Indicate whether use internal registry addr for the scanner to pull content or not\",\n    )\n    disabled: Optional[bool] = Field(\n        default=False, description=\"Indicate whether the registration is enabled or not\"\n    )\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.ScannerRegistrationReq.name", "title": "<code>name = Field(..., description='The name of this registration', examples=['Trivy'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ScannerRegistrationReq.description", "title": "<code>description = Field(default=None, description='An optional description of this registration.', examples=['A free-to-use tool that scans container images for package vulnerabilities.\\n'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ScannerRegistrationReq.url", "title": "<code>url = Field(..., description='A base URL of the scanner adapter.', examples=['http://harbor-scanner-trivy:8080'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ScannerRegistrationReq.auth", "title": "<code>auth = Field(default=None, description='Specify what authentication approach is adopted for the HTTP communications.\\nSupported types Basic\", \"Bearer\" and api key header \"X-ScannerAdapter-API-Key\"\\n', examples=['Bearer'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ScannerRegistrationReq.access_credential", "title": "<code>access_credential = Field(default=None, description='An optional value of the HTTP Authorization header sent with each request to the Scanner Adapter API.\\n', examples=['Bearer: JWTTOKENGOESHERE'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ScannerRegistrationReq.skip_cert_verify", "title": "<code>skip_cert_verify = Field(default=False, alias='skip_certVerify', description='Indicate if skip the certificate verification when sending HTTP requests')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ScannerRegistrationReq.use_internal_addr", "title": "<code>use_internal_addr = Field(default=False, description='Indicate whether use internal registry addr for the scanner to pull content or not')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ScannerRegistrationReq.disabled", "title": "<code>disabled = Field(default=False, description='Indicate whether the registration is enabled or not')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ScannerRegistrationSettings", "title": "<code>ScannerRegistrationSettings</code>", "text": "Source code in <code>harborapi/models/models.py</code> <pre><code>class ScannerRegistrationSettings(BaseModel):\n    name: str = Field(\n        ..., description=\"The name of this registration\", examples=[\"Trivy\"]\n    )\n    url: AnyUrl = Field(\n        ...,\n        description=\"A base URL of the scanner adapter.\",\n        examples=[\"http://harbor-scanner-trivy:8080\"],\n    )\n    auth: Optional[str] = Field(\n        default=\"\",\n        description='Specify what authentication approach is adopted for the HTTP communications.\\nSupported types Basic\", \"Bearer\" and api key header \"X-ScannerAdapter-API-Key\"\\n',\n    )\n    access_credential: Optional[str] = Field(\n        default=None,\n        description=\"An optional value of the HTTP Authorization header sent with each request to the Scanner Adapter API.\\n\",\n        examples=[\"Bearer: JWTTOKENGOESHERE\"],\n    )\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.ScannerRegistrationSettings.name", "title": "<code>name = Field(..., description='The name of this registration', examples=['Trivy'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ScannerRegistrationSettings.url", "title": "<code>url = Field(..., description='A base URL of the scanner adapter.', examples=['http://harbor-scanner-trivy:8080'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ScannerRegistrationSettings.auth", "title": "<code>auth = Field(default='', description='Specify what authentication approach is adopted for the HTTP communications.\\nSupported types Basic\", \"Bearer\" and api key header \"X-ScannerAdapter-API-Key\"\\n')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ScannerRegistrationSettings.access_credential", "title": "<code>access_credential = Field(default=None, description='An optional value of the HTTP Authorization header sent with each request to the Scanner Adapter API.\\n', examples=['Bearer: JWTTOKENGOESHERE'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.IsDefault", "title": "<code>IsDefault</code>", "text": "Source code in <code>harborapi/models/models.py</code> <pre><code>class IsDefault(BaseModel):\n    is_default: Optional[bool] = Field(\n        default=None,\n        description=\"A flag indicating whether a scanner registration is default.\",\n    )\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.IsDefault.is_default", "title": "<code>is_default = Field(default=None, description='A flag indicating whether a scanner registration is default.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ScannerCapability", "title": "<code>ScannerCapability</code>", "text": "Source code in <code>harborapi/models/models.py</code> <pre><code>class ScannerCapability(BaseModel):\n    type: Optional[str] = Field(\n        default=None,\n        description=\"Specify the type of scanner capability, like vulnerability or sbom\\n\",\n        examples=[\"sbom\"],\n    )\n    consumes_mime_types: Optional[List[str]] = None\n    produces_mime_types: Optional[List[str]] = None\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.ScannerCapability.type", "title": "<code>type = Field(default=None, description='Specify the type of scanner capability, like vulnerability or sbom\\n', examples=['sbom'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ScannerCapability.consumes_mime_types", "title": "<code>consumes_mime_types = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ScannerCapability.produces_mime_types", "title": "<code>produces_mime_types = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ScannerAdapterMetadata", "title": "<code>ScannerAdapterMetadata</code>", "text": "<p>Metadata for a scanner adapter.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class ScannerAdapterMetadata(BaseModel):\n    \"\"\"Metadata for a scanner adapter.\"\"\"\n\n    scanner: Optional[Scanner] = None\n    capabilities: Optional[List[ScannerCapability]] = None\n    properties: Optional[Dict[str, str]] = Field(\n        default=None,\n        examples=[{\"harbor.scanner-adapter/registry-authorization-type\": \"Bearer\"}],\n    )\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.ScannerAdapterMetadata.scanner", "title": "<code>scanner = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ScannerAdapterMetadata.capabilities", "title": "<code>capabilities = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ScannerAdapterMetadata.properties", "title": "<code>properties = Field(default=None, examples=[{'harbor.scanner-adapter/registry-authorization-type': 'Bearer'}])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ImmutableSelector", "title": "<code>ImmutableSelector</code>", "text": "Source code in <code>harborapi/models/models.py</code> <pre><code>class ImmutableSelector(BaseModel):\n    kind: Optional[str] = None\n    decoration: Optional[str] = None\n    pattern: Optional[str] = None\n    extras: Optional[str] = None\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.ImmutableSelector.kind", "title": "<code>kind = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ImmutableSelector.decoration", "title": "<code>decoration = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ImmutableSelector.pattern", "title": "<code>pattern = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ImmutableSelector.extras", "title": "<code>extras = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.LdapConf", "title": "<code>LdapConf</code>", "text": "<p>LDAP configuration properties.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class LdapConf(BaseModel):\n    \"\"\"LDAP configuration properties.\"\"\"\n\n    ldap_url: Optional[str] = Field(\n        default=None, description=\"The url of ldap service.\"\n    )\n    ldap_search_dn: Optional[str] = Field(\n        default=None, description=\"The search dn of ldap service.\"\n    )\n    ldap_search_password: Optional[str] = Field(\n        default=None, description=\"The search password of ldap service.\"\n    )\n    ldap_base_dn: Optional[str] = Field(\n        default=None, description=\"The base dn of ldap service.\"\n    )\n    ldap_filter: Optional[str] = Field(\n        default=None, description=\"The serach filter of ldap service.\"\n    )\n    ldap_uid: Optional[str] = Field(\n        default=None, description=\"The serach uid from ldap service attributes.\"\n    )\n    ldap_scope: Optional[int] = Field(\n        default=None, description=\"The serach scope of ldap service.\"\n    )\n    ldap_connection_timeout: Optional[int] = Field(\n        default=None, description=\"The connect timeout of ldap service(second).\"\n    )\n    ldap_verify_cert: Optional[bool] = Field(\n        default=None, description=\"Verify Ldap server certificate.\"\n    )\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.LdapConf.ldap_url", "title": "<code>ldap_url = Field(default=None, description='The url of ldap service.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.LdapConf.ldap_search_dn", "title": "<code>ldap_search_dn = Field(default=None, description='The search dn of ldap service.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.LdapConf.ldap_search_password", "title": "<code>ldap_search_password = Field(default=None, description='The search password of ldap service.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.LdapConf.ldap_base_dn", "title": "<code>ldap_base_dn = Field(default=None, description='The base dn of ldap service.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.LdapConf.ldap_filter", "title": "<code>ldap_filter = Field(default=None, description='The serach filter of ldap service.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.LdapConf.ldap_uid", "title": "<code>ldap_uid = Field(default=None, description='The serach uid from ldap service attributes.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.LdapConf.ldap_scope", "title": "<code>ldap_scope = Field(default=None, description='The serach scope of ldap service.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.LdapConf.ldap_connection_timeout", "title": "<code>ldap_connection_timeout = Field(default=None, description='The connect timeout of ldap service(second).')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.LdapConf.ldap_verify_cert", "title": "<code>ldap_verify_cert = Field(default=None, description='Verify Ldap server certificate.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.LdapPingResult", "title": "<code>LdapPingResult</code>", "text": "<p>Result of a ping to an LDAP server.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class LdapPingResult(BaseModel):\n    \"\"\"Result of a ping to an LDAP server.\"\"\"\n\n    success: Optional[bool] = Field(default=None, description=\"Test success\")\n    message: Optional[str] = Field(\n        default=None, description=\"The ping operation output message.\"\n    )\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.LdapPingResult.success", "title": "<code>success = Field(default=None, description='Test success')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.LdapPingResult.message", "title": "<code>message = Field(default=None, description='The ping operation output message.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.LdapImportUsers", "title": "<code>LdapImportUsers</code>", "text": "Source code in <code>harborapi/models/models.py</code> <pre><code>class LdapImportUsers(BaseModel):\n    ldap_uid_list: Optional[List[str]] = Field(\n        default=None, description=\"selected uid list\"\n    )\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.LdapImportUsers.ldap_uid_list", "title": "<code>ldap_uid_list = Field(default=None, description='selected uid list')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.LdapFailedImportUser", "title": "<code>LdapFailedImportUser</code>", "text": "Source code in <code>harborapi/models/models.py</code> <pre><code>class LdapFailedImportUser(BaseModel):\n    uid: Optional[str] = Field(default=None, description=\"the uid can't add to system.\")\n    error: Optional[str] = Field(default=None, description=\"fail reason.\")\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.LdapFailedImportUser.uid", "title": "<code>uid = Field(default=None, description=\"the uid can't add to system.\")</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.LdapFailedImportUser.error", "title": "<code>error = Field(default=None, description='fail reason.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.LdapUser", "title": "<code>LdapUser</code>", "text": "Source code in <code>harborapi/models/models.py</code> <pre><code>class LdapUser(BaseModel):\n    username: Optional[str] = Field(default=None, description=\"ldap username.\")\n    realname: Optional[str] = Field(\n        default=None, description='The user realname from \"uid\" or \"cn\" attribute.'\n    )\n    email: Optional[str] = Field(\n        default=None,\n        description='The user email address from \"mail\" or \"email\" attribute.',\n    )\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.LdapUser.username", "title": "<code>username = Field(default=None, description='ldap username.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.LdapUser.realname", "title": "<code>realname = Field(default=None, description='The user realname from \"uid\" or \"cn\" attribute.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.LdapUser.email", "title": "<code>email = Field(default=None, description='The user email address from \"mail\" or \"email\" attribute.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.UserGroup", "title": "<code>UserGroup</code>", "text": "Source code in <code>harborapi/models/models.py</code> <pre><code>class UserGroup(BaseModel):\n    id: Optional[int] = Field(default=None, description=\"The ID of the user group\")\n    group_name: Optional[str] = Field(\n        default=None, description=\"The name of the user group\"\n    )\n    group_type: Optional[int] = Field(\n        default=None,\n        description=\"The group type, 1 for LDAP group, 2 for HTTP group, 3 for OIDC group.\",\n    )\n    ldap_group_dn: Optional[str] = Field(\n        default=None,\n        description=\"The DN of the LDAP group if group type is 1 (LDAP group).\",\n    )\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.UserGroup.id", "title": "<code>id = Field(default=None, description='The ID of the user group')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.UserGroup.group_name", "title": "<code>group_name = Field(default=None, description='The name of the user group')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.UserGroup.group_type", "title": "<code>group_type = Field(default=None, description='The group type, 1 for LDAP group, 2 for HTTP group, 3 for OIDC group.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.UserGroup.ldap_group_dn", "title": "<code>ldap_group_dn = Field(default=None, description='The DN of the LDAP group if group type is 1 (LDAP group).')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.UserGroupSearchItem", "title": "<code>UserGroupSearchItem</code>", "text": "Source code in <code>harborapi/models/models.py</code> <pre><code>class UserGroupSearchItem(BaseModel):\n    id: Optional[int] = Field(default=None, description=\"The ID of the user group\")\n    group_name: Optional[str] = Field(\n        default=None, description=\"The name of the user group\"\n    )\n    group_type: Optional[int] = Field(\n        default=None,\n        description=\"The group type, 1 for LDAP group, 2 for HTTP group, 3 for OIDC group.\",\n    )\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.UserGroupSearchItem.id", "title": "<code>id = Field(default=None, description='The ID of the user group')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.UserGroupSearchItem.group_name", "title": "<code>group_name = Field(default=None, description='The name of the user group')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.UserGroupSearchItem.group_type", "title": "<code>group_type = Field(default=None, description='The group type, 1 for LDAP group, 2 for HTTP group, 3 for OIDC group.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.EventType", "title": "<code>EventType</code>", "text": "Source code in <code>harborapi/models/models.py</code> <pre><code>class EventType(RootModel[str]):\n    root: str = Field(\n        ..., description=\"Webhook supported event type.\", examples=[\"PULL_ARTIFACT\"]\n    )\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.EventType.root", "title": "<code>root = Field(..., description='Webhook supported event type.', examples=['PULL_ARTIFACT'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.NotifyType", "title": "<code>NotifyType</code>", "text": "Source code in <code>harborapi/models/models.py</code> <pre><code>class NotifyType(RootModel[str]):\n    root: str = Field(\n        ..., description=\"Webhook supported notify type.\", examples=[\"http\"]\n    )\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.NotifyType.root", "title": "<code>root = Field(..., description='Webhook supported notify type.', examples=['http'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.PayloadFormatType", "title": "<code>PayloadFormatType</code>", "text": "Source code in <code>harborapi/models/models.py</code> <pre><code>class PayloadFormatType(RootModel[str]):\n    root: str = Field(\n        ..., description=\"The type of webhook paylod format.\", examples=[\"CloudEvents\"]\n    )\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.PayloadFormatType.root", "title": "<code>root = Field(..., description='The type of webhook paylod format.', examples=['CloudEvents'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.PayloadFormat", "title": "<code>PayloadFormat</code>", "text": "<p>Webhook payload format types.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class PayloadFormat(BaseModel):\n    \"\"\"Webhook payload format types.\"\"\"\n\n    notify_type: Optional[NotifyType] = None\n    formats: Optional[List[PayloadFormatType]] = Field(\n        default=None, description=\"The supported payload formats for this notify type.\"\n    )\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.PayloadFormat.notify_type", "title": "<code>notify_type = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.PayloadFormat.formats", "title": "<code>formats = Field(default=None, description='The supported payload formats for this notify type.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.WebhookTargetObject", "title": "<code>WebhookTargetObject</code>", "text": "<p>Webhook target</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class WebhookTargetObject(BaseModel):\n    \"\"\"Webhook target\"\"\"\n\n    type: Optional[str] = Field(\n        default=None, description=\"The webhook target notify type.\"\n    )\n    address: Optional[str] = Field(\n        default=None, description=\"The webhook target address.\"\n    )\n    auth_header: Optional[str] = Field(\n        default=None, description=\"The webhook auth header.\"\n    )\n    skip_cert_verify: Optional[bool] = Field(\n        default=None, description=\"Whether or not to skip cert verify.\"\n    )\n    payload_format: Optional[PayloadFormatType] = None\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.WebhookTargetObject.type", "title": "<code>type = Field(default=None, description='The webhook target notify type.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.WebhookTargetObject.address", "title": "<code>address = Field(default=None, description='The webhook target address.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.WebhookTargetObject.auth_header", "title": "<code>auth_header = Field(default=None, description='The webhook auth header.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.WebhookTargetObject.skip_cert_verify", "title": "<code>skip_cert_verify = Field(default=None, description='Whether or not to skip cert verify.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.WebhookTargetObject.payload_format", "title": "<code>payload_format = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.WebhookPolicy", "title": "<code>WebhookPolicy</code>", "text": "<p>Webhook policy definition.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class WebhookPolicy(BaseModel):\n    \"\"\"Webhook policy definition.\"\"\"\n\n    id: Optional[int] = Field(default=None, description=\"The webhook policy ID.\")\n    name: Optional[str] = Field(default=None, description=\"The name of webhook policy.\")\n    description: Optional[str] = Field(\n        default=None, description=\"The description of webhook policy.\"\n    )\n    project_id: Optional[int] = Field(\n        default=None, description=\"The project ID of webhook policy.\"\n    )\n    targets: Optional[List[WebhookTargetObject]] = None\n    event_types: Optional[List[str]] = None\n    creator: Optional[str] = Field(\n        default=None, description=\"The creator of the webhook policy.\"\n    )\n    creation_time: Optional[datetime] = Field(\n        default=None, description=\"The create time of the webhook policy.\"\n    )\n    update_time: Optional[datetime] = Field(\n        default=None, description=\"The update time of the webhook policy.\"\n    )\n    enabled: Optional[bool] = Field(\n        default=None, description=\"Whether the webhook policy is enabled or not.\"\n    )\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.WebhookPolicy.id", "title": "<code>id = Field(default=None, description='The webhook policy ID.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.WebhookPolicy.name", "title": "<code>name = Field(default=None, description='The name of webhook policy.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.WebhookPolicy.description", "title": "<code>description = Field(default=None, description='The description of webhook policy.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.WebhookPolicy.project_id", "title": "<code>project_id = Field(default=None, description='The project ID of webhook policy.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.WebhookPolicy.targets", "title": "<code>targets = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.WebhookPolicy.event_types", "title": "<code>event_types = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.WebhookPolicy.creator", "title": "<code>creator = Field(default=None, description='The creator of the webhook policy.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.WebhookPolicy.creation_time", "title": "<code>creation_time = Field(default=None, description='The create time of the webhook policy.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.WebhookPolicy.update_time", "title": "<code>update_time = Field(default=None, description='The update time of the webhook policy.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.WebhookPolicy.enabled", "title": "<code>enabled = Field(default=None, description='Whether the webhook policy is enabled or not.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.WebhookLastTrigger", "title": "<code>WebhookLastTrigger</code>", "text": "<p>Last trigger of the webhook and the event type of the trigger.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class WebhookLastTrigger(BaseModel):\n    \"\"\"Last trigger of the webhook and the event type of the trigger.\"\"\"\n\n    policy_name: Optional[str] = Field(\n        default=None, description=\"The webhook policy name.\"\n    )\n    event_type: Optional[str] = Field(\n        default=None, description=\"The webhook event type.\"\n    )\n    enabled: Optional[bool] = Field(\n        default=None, description=\"Whether or not the webhook policy enabled.\"\n    )\n    creation_time: Optional[datetime] = Field(\n        default=None, description=\"The creation time of webhook policy.\"\n    )\n    last_trigger_time: Optional[datetime] = Field(\n        default=None, description=\"The last trigger time of webhook policy.\"\n    )\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.WebhookLastTrigger.policy_name", "title": "<code>policy_name = Field(default=None, description='The webhook policy name.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.WebhookLastTrigger.event_type", "title": "<code>event_type = Field(default=None, description='The webhook event type.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.WebhookLastTrigger.enabled", "title": "<code>enabled = Field(default=None, description='Whether or not the webhook policy enabled.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.WebhookLastTrigger.creation_time", "title": "<code>creation_time = Field(default=None, description='The creation time of webhook policy.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.WebhookLastTrigger.last_trigger_time", "title": "<code>last_trigger_time = Field(default=None, description='The last trigger time of webhook policy.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.WebhookJob", "title": "<code>WebhookJob</code>", "text": "<p>A webhook job.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class WebhookJob(BaseModel):\n    \"\"\"A webhook job.\"\"\"\n\n    id: Optional[int] = Field(default=None, description=\"The webhook job ID.\")\n    policy_id: Optional[int] = Field(default=None, description=\"The webhook policy ID.\")\n    event_type: Optional[str] = Field(\n        default=None, description=\"The webhook job event type.\"\n    )\n    notify_type: Optional[str] = Field(\n        default=None, description=\"The webhook job notify type.\"\n    )\n    status: Optional[str] = Field(default=None, description=\"The webhook job status.\")\n    job_detail: Optional[str] = Field(\n        default=None, description=\"The webhook job notify detailed data.\"\n    )\n    creation_time: Optional[datetime] = Field(\n        default=None, description=\"The webhook job creation time.\"\n    )\n    update_time: Optional[datetime] = Field(\n        default=None, description=\"The webhook job update time.\"\n    )\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.WebhookJob.id", "title": "<code>id = Field(default=None, description='The webhook job ID.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.WebhookJob.policy_id", "title": "<code>policy_id = Field(default=None, description='The webhook policy ID.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.WebhookJob.event_type", "title": "<code>event_type = Field(default=None, description='The webhook job event type.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.WebhookJob.notify_type", "title": "<code>notify_type = Field(default=None, description='The webhook job notify type.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.WebhookJob.status", "title": "<code>status = Field(default=None, description='The webhook job status.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.WebhookJob.job_detail", "title": "<code>job_detail = Field(default=None, description='The webhook job notify detailed data.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.WebhookJob.creation_time", "title": "<code>creation_time = Field(default=None, description='The webhook job creation time.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.WebhookJob.update_time", "title": "<code>update_time = Field(default=None, description='The webhook job update time.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.InternalConfigurationValue", "title": "<code>InternalConfigurationValue</code>", "text": "Source code in <code>harborapi/models/models.py</code> <pre><code>class InternalConfigurationValue(BaseModel):\n    value: Optional[Dict[str, Any]] = Field(\n        default=None, description=\"The value of current config item\"\n    )\n    editable: Optional[bool] = Field(\n        default=None, description=\"The configure item can be updated or not\"\n    )\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.InternalConfigurationValue.value", "title": "<code>value = Field(default=None, description='The value of current config item')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.InternalConfigurationValue.editable", "title": "<code>editable = Field(default=None, description='The configure item can be updated or not')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Parameter", "title": "<code>Parameter</code>", "text": "<p>Parameters for a 'scan all' policy.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class Parameter(BaseModel):\n    \"\"\"Parameters for a 'scan all' policy.\"\"\"\n\n    daily_time: Optional[int] = Field(\n        default=None,\n        description='The offset in seconds of UTC 0 o\\'clock, only valid when the policy type is \"daily\"',\n    )\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.Parameter.daily_time", "title": "<code>daily_time = Field(default=None, description='The offset in seconds of UTC 0 o\\'clock, only valid when the policy type is \"daily\"')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ScanAllPolicy", "title": "<code>ScanAllPolicy</code>", "text": "Source code in <code>harborapi/models/models.py</code> <pre><code>class ScanAllPolicy(BaseModel):\n    type: Optional[str] = Field(\n        default=None,\n        description='The type of scan all policy, currently the valid values are \"none\" and \"daily\"',\n    )\n    parameter: Optional[Parameter] = Field(\n        default=None,\n        description=\"The parameters of the policy, the values are dependent on the type of the policy.\",\n    )\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.ScanAllPolicy.type", "title": "<code>type = Field(default=None, description='The type of scan all policy, currently the valid values are \"none\" and \"daily\"')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ScanAllPolicy.parameter", "title": "<code>parameter = Field(default=None, description='The parameters of the policy, the values are dependent on the type of the policy.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Configurations", "title": "<code>Configurations</code>", "text": "Source code in <code>harborapi/models/models.py</code> <pre><code>class Configurations(BaseModel):\n    auth_mode: Optional[str] = Field(\n        default=None,\n        description='The auth mode of current system, such as \"db_auth\", \"ldap_auth\", \"oidc_auth\"',\n    )\n    primary_auth_mode: Optional[bool] = Field(\n        default=None,\n        description=\"The flag to indicate whether the current auth mode should consider as a primary one.\",\n    )\n    ldap_base_dn: Optional[str] = Field(\n        default=None, description=\"The Base DN for LDAP binding.\"\n    )\n    ldap_filter: Optional[str] = Field(\n        default=None, description=\"The filter for LDAP search\"\n    )\n    ldap_group_base_dn: Optional[str] = Field(\n        default=None, description=\"The base DN to search LDAP group.\"\n    )\n    ldap_group_admin_dn: Optional[str] = Field(\n        default=None,\n        description=\"Specify the ldap group which have the same privilege with Harbor admin\",\n    )\n    ldap_group_attribute_name: Optional[str] = Field(\n        default=None,\n        description=\"The attribute which is used as identity of the LDAP group, default is cn.'\",\n    )\n    ldap_group_search_filter: Optional[str] = Field(\n        default=None, description=\"The filter to search the ldap group\"\n    )\n    ldap_group_search_scope: Optional[int] = Field(\n        default=None,\n        description=\"The scope to search ldap group. ''0-LDAP_SCOPE_BASE, 1-LDAP_SCOPE_ONELEVEL, 2-LDAP_SCOPE_SUBTREE''\",\n    )\n    ldap_group_attach_parallel: Optional[bool] = Field(\n        default=None,\n        description=\"Attach LDAP user group information in parallel, the parallel worker count is 5\",\n    )\n    ldap_scope: Optional[int] = Field(\n        default=None,\n        description=\"The scope to search ldap users,'0-LDAP_SCOPE_BASE, 1-LDAP_SCOPE_ONELEVEL, 2-LDAP_SCOPE_SUBTREE'\",\n    )\n    ldap_search_dn: Optional[str] = Field(\n        default=None, description=\"The DN of the user to do the search.\"\n    )\n    ldap_search_password: Optional[str] = Field(\n        default=None, description=\"The password of the ldap search dn\"\n    )\n    ldap_timeout: Optional[int] = Field(\n        default=None, description=\"Timeout in seconds for connection to LDAP server\"\n    )\n    ldap_uid: Optional[str] = Field(\n        default=None,\n        description='The attribute which is used as identity for the LDAP binding, such as \"CN\" or \"SAMAccountname\"',\n    )\n    ldap_url: Optional[str] = Field(default=None, description=\"The URL of LDAP server\")\n    ldap_verify_cert: Optional[bool] = Field(\n        default=None,\n        description=\"Whether verify your OIDC server certificate, disable it if your OIDC server is hosted via self-hosted certificate.\",\n    )\n    ldap_group_membership_attribute: Optional[str] = Field(\n        default=None, description=\"The user attribute to identify the group membership\"\n    )\n    project_creation_restriction: Optional[str] = Field(\n        default=None,\n        description=\"Indicate who can create projects, it could be ''adminonly'' or ''everyone''.\",\n    )\n    read_only: Optional[bool] = Field(\n        default=None,\n        description=\"The flag to indicate whether Harbor is in readonly mode.\",\n    )\n    self_registration: Optional[bool] = Field(\n        default=None,\n        description=\"Whether the Harbor instance supports self-registration.  If it''s set to false, admin need to add user to the instance.\",\n    )\n    token_expiration: Optional[int] = Field(\n        default=None,\n        description=\"The expiration time of the token for internal Registry, in minutes.\",\n    )\n    uaa_client_id: Optional[str] = Field(\n        default=None, description=\"The client id of UAA\"\n    )\n    uaa_client_secret: Optional[str] = Field(\n        default=None, description=\"The client secret of the UAA\"\n    )\n    uaa_endpoint: Optional[str] = Field(\n        default=None, description=\"The endpoint of the UAA\"\n    )\n    uaa_verify_cert: Optional[bool] = Field(\n        default=None, description=\"Verify the certificate in UAA server\"\n    )\n    http_authproxy_endpoint: Optional[str] = Field(\n        default=None, description=\"The endpoint of the HTTP auth\"\n    )\n    http_authproxy_tokenreview_endpoint: Optional[str] = Field(\n        default=None, description=\"The token review endpoint\"\n    )\n    http_authproxy_admin_groups: Optional[str] = Field(\n        default=None, description=\"The group which has the harbor admin privileges\"\n    )\n    http_authproxy_admin_usernames: Optional[str] = Field(\n        default=None, description=\"The username which has the harbor admin privileges\"\n    )\n    http_authproxy_verify_cert: Optional[bool] = Field(\n        default=None, description=\"Verify the HTTP auth provider's certificate\"\n    )\n    http_authproxy_skip_search: Optional[bool] = Field(\n        default=None, description=\"Search user before onboard\"\n    )\n    http_authproxy_server_certificate: Optional[str] = Field(\n        default=None, description=\"The certificate of the HTTP auth provider\"\n    )\n    oidc_name: Optional[str] = Field(default=None, description=\"The OIDC provider name\")\n    oidc_endpoint: Optional[str] = Field(\n        default=None, description=\"The endpoint of the OIDC provider\"\n    )\n    oidc_client_id: Optional[str] = Field(\n        default=None, description=\"The client ID of the OIDC provider\"\n    )\n    oidc_client_secret: Optional[str] = Field(\n        default=None, description=\"The OIDC provider secret\"\n    )\n    oidc_groups_claim: Optional[str] = Field(\n        default=None, description=\"The attribute claims the group name\"\n    )\n    oidc_admin_group: Optional[str] = Field(\n        default=None, description=\"The OIDC group which has the harbor admin privileges\"\n    )\n    oidc_group_filter: Optional[str] = Field(\n        default=None,\n        description=\"The OIDC group filter which filters out the group name doesn't match the regular expression\",\n    )\n    oidc_scope: Optional[str] = Field(\n        default=None, description=\"The scope of the OIDC provider\"\n    )\n    oidc_user_claim: Optional[str] = Field(\n        default=None, description=\"The attribute claims the username\"\n    )\n    oidc_verify_cert: Optional[bool] = Field(\n        default=None, description=\"Verify the OIDC provider's certificate'\"\n    )\n    oidc_auto_onboard: Optional[bool] = Field(\n        default=None, description=\"Auto onboard the OIDC user\"\n    )\n    oidc_extra_redirect_parms: Optional[str] = Field(\n        default=None,\n        description=\"Extra parameters to add when redirect request to OIDC provider\",\n    )\n    robot_token_duration: Optional[int] = Field(\n        default=None, description=\"The robot account token duration in days\"\n    )\n    robot_name_prefix: Optional[str] = Field(\n        default=None, description=\"The rebot account name prefix\"\n    )\n    notification_enable: Optional[bool] = Field(\n        default=None, description=\"Enable notification\"\n    )\n    quota_per_project_enable: Optional[bool] = Field(\n        default=None, description=\"Enable quota per project\"\n    )\n    storage_per_project: Optional[int] = Field(\n        default=None, description=\"The storage quota per project\"\n    )\n    audit_log_forward_endpoint: Optional[str] = Field(\n        default=None, description=\"The audit log forward endpoint\"\n    )\n    skip_audit_log_database: Optional[bool] = Field(\n        default=None, description=\"Skip audit log database\"\n    )\n    session_timeout: Optional[int] = Field(\n        default=None, description=\"The session timeout for harbor, in minutes.\"\n    )\n    scanner_skip_update_pulltime: Optional[bool] = Field(\n        default=None, description=\"Whether or not to skip update pull time for scanner\"\n    )\n    banner_message: Optional[str] = Field(\n        default=None,\n        description=\"The banner message for the UI.It is the stringified result of the banner message object\",\n    )\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.Configurations.auth_mode", "title": "<code>auth_mode = Field(default=None, description='The auth mode of current system, such as \"db_auth\", \"ldap_auth\", \"oidc_auth\"')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Configurations.primary_auth_mode", "title": "<code>primary_auth_mode = Field(default=None, description='The flag to indicate whether the current auth mode should consider as a primary one.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Configurations.ldap_base_dn", "title": "<code>ldap_base_dn = Field(default=None, description='The Base DN for LDAP binding.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Configurations.ldap_filter", "title": "<code>ldap_filter = Field(default=None, description='The filter for LDAP search')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Configurations.ldap_group_base_dn", "title": "<code>ldap_group_base_dn = Field(default=None, description='The base DN to search LDAP group.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Configurations.ldap_group_admin_dn", "title": "<code>ldap_group_admin_dn = Field(default=None, description='Specify the ldap group which have the same privilege with Harbor admin')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Configurations.ldap_group_attribute_name", "title": "<code>ldap_group_attribute_name = Field(default=None, description=\"The attribute which is used as identity of the LDAP group, default is cn.'\")</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Configurations.ldap_group_search_filter", "title": "<code>ldap_group_search_filter = Field(default=None, description='The filter to search the ldap group')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Configurations.ldap_group_search_scope", "title": "<code>ldap_group_search_scope = Field(default=None, description=\"The scope to search ldap group. ''0-LDAP_SCOPE_BASE, 1-LDAP_SCOPE_ONELEVEL, 2-LDAP_SCOPE_SUBTREE''\")</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Configurations.ldap_group_attach_parallel", "title": "<code>ldap_group_attach_parallel = Field(default=None, description='Attach LDAP user group information in parallel, the parallel worker count is 5')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Configurations.ldap_scope", "title": "<code>ldap_scope = Field(default=None, description=\"The scope to search ldap users,'0-LDAP_SCOPE_BASE, 1-LDAP_SCOPE_ONELEVEL, 2-LDAP_SCOPE_SUBTREE'\")</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Configurations.ldap_search_dn", "title": "<code>ldap_search_dn = Field(default=None, description='The DN of the user to do the search.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Configurations.ldap_search_password", "title": "<code>ldap_search_password = Field(default=None, description='The password of the ldap search dn')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Configurations.ldap_timeout", "title": "<code>ldap_timeout = Field(default=None, description='Timeout in seconds for connection to LDAP server')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Configurations.ldap_uid", "title": "<code>ldap_uid = Field(default=None, description='The attribute which is used as identity for the LDAP binding, such as \"CN\" or \"SAMAccountname\"')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Configurations.ldap_url", "title": "<code>ldap_url = Field(default=None, description='The URL of LDAP server')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Configurations.ldap_verify_cert", "title": "<code>ldap_verify_cert = Field(default=None, description='Whether verify your OIDC server certificate, disable it if your OIDC server is hosted via self-hosted certificate.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Configurations.ldap_group_membership_attribute", "title": "<code>ldap_group_membership_attribute = Field(default=None, description='The user attribute to identify the group membership')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Configurations.project_creation_restriction", "title": "<code>project_creation_restriction = Field(default=None, description=\"Indicate who can create projects, it could be ''adminonly'' or ''everyone''.\")</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Configurations.read_only", "title": "<code>read_only = Field(default=None, description='The flag to indicate whether Harbor is in readonly mode.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Configurations.self_registration", "title": "<code>self_registration = Field(default=None, description=\"Whether the Harbor instance supports self-registration.  If it''s set to false, admin need to add user to the instance.\")</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Configurations.token_expiration", "title": "<code>token_expiration = Field(default=None, description='The expiration time of the token for internal Registry, in minutes.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Configurations.uaa_client_id", "title": "<code>uaa_client_id = Field(default=None, description='The client id of UAA')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Configurations.uaa_client_secret", "title": "<code>uaa_client_secret = Field(default=None, description='The client secret of the UAA')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Configurations.uaa_endpoint", "title": "<code>uaa_endpoint = Field(default=None, description='The endpoint of the UAA')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Configurations.uaa_verify_cert", "title": "<code>uaa_verify_cert = Field(default=None, description='Verify the certificate in UAA server')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Configurations.http_authproxy_endpoint", "title": "<code>http_authproxy_endpoint = Field(default=None, description='The endpoint of the HTTP auth')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Configurations.http_authproxy_tokenreview_endpoint", "title": "<code>http_authproxy_tokenreview_endpoint = Field(default=None, description='The token review endpoint')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Configurations.http_authproxy_admin_groups", "title": "<code>http_authproxy_admin_groups = Field(default=None, description='The group which has the harbor admin privileges')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Configurations.http_authproxy_admin_usernames", "title": "<code>http_authproxy_admin_usernames = Field(default=None, description='The username which has the harbor admin privileges')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Configurations.http_authproxy_verify_cert", "title": "<code>http_authproxy_verify_cert = Field(default=None, description=\"Verify the HTTP auth provider's certificate\")</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Configurations.http_authproxy_skip_search", "title": "<code>http_authproxy_skip_search = Field(default=None, description='Search user before onboard')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Configurations.http_authproxy_server_certificate", "title": "<code>http_authproxy_server_certificate = Field(default=None, description='The certificate of the HTTP auth provider')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Configurations.oidc_name", "title": "<code>oidc_name = Field(default=None, description='The OIDC provider name')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Configurations.oidc_endpoint", "title": "<code>oidc_endpoint = Field(default=None, description='The endpoint of the OIDC provider')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Configurations.oidc_client_id", "title": "<code>oidc_client_id = Field(default=None, description='The client ID of the OIDC provider')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Configurations.oidc_client_secret", "title": "<code>oidc_client_secret = Field(default=None, description='The OIDC provider secret')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Configurations.oidc_groups_claim", "title": "<code>oidc_groups_claim = Field(default=None, description='The attribute claims the group name')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Configurations.oidc_admin_group", "title": "<code>oidc_admin_group = Field(default=None, description='The OIDC group which has the harbor admin privileges')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Configurations.oidc_group_filter", "title": "<code>oidc_group_filter = Field(default=None, description=\"The OIDC group filter which filters out the group name doesn't match the regular expression\")</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Configurations.oidc_scope", "title": "<code>oidc_scope = Field(default=None, description='The scope of the OIDC provider')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Configurations.oidc_user_claim", "title": "<code>oidc_user_claim = Field(default=None, description='The attribute claims the username')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Configurations.oidc_verify_cert", "title": "<code>oidc_verify_cert = Field(default=None, description=\"Verify the OIDC provider's certificate'\")</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Configurations.oidc_auto_onboard", "title": "<code>oidc_auto_onboard = Field(default=None, description='Auto onboard the OIDC user')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Configurations.oidc_extra_redirect_parms", "title": "<code>oidc_extra_redirect_parms = Field(default=None, description='Extra parameters to add when redirect request to OIDC provider')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Configurations.robot_token_duration", "title": "<code>robot_token_duration = Field(default=None, description='The robot account token duration in days')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Configurations.robot_name_prefix", "title": "<code>robot_name_prefix = Field(default=None, description='The rebot account name prefix')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Configurations.notification_enable", "title": "<code>notification_enable = Field(default=None, description='Enable notification')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Configurations.quota_per_project_enable", "title": "<code>quota_per_project_enable = Field(default=None, description='Enable quota per project')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Configurations.storage_per_project", "title": "<code>storage_per_project = Field(default=None, description='The storage quota per project')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Configurations.audit_log_forward_endpoint", "title": "<code>audit_log_forward_endpoint = Field(default=None, description='The audit log forward endpoint')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Configurations.skip_audit_log_database", "title": "<code>skip_audit_log_database = Field(default=None, description='Skip audit log database')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Configurations.session_timeout", "title": "<code>session_timeout = Field(default=None, description='The session timeout for harbor, in minutes.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Configurations.scanner_skip_update_pulltime", "title": "<code>scanner_skip_update_pulltime = Field(default=None, description='Whether or not to skip update pull time for scanner')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Configurations.banner_message", "title": "<code>banner_message = Field(default=None, description='The banner message for the UI.It is the stringified result of the banner message object')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.StringConfigItem", "title": "<code>StringConfigItem</code>", "text": "Source code in <code>harborapi/models/models.py</code> <pre><code>class StringConfigItem(BaseModel):\n    value: Optional[str] = Field(\n        default=None, description=\"The string value of current config item\"\n    )\n    editable: Optional[bool] = Field(\n        default=None, description=\"The configure item can be updated or not\"\n    )\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.StringConfigItem.value", "title": "<code>value = Field(default=None, description='The string value of current config item')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.StringConfigItem.editable", "title": "<code>editable = Field(default=None, description='The configure item can be updated or not')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.BoolConfigItem", "title": "<code>BoolConfigItem</code>", "text": "Source code in <code>harborapi/models/models.py</code> <pre><code>class BoolConfigItem(BaseModel):\n    value: Optional[bool] = Field(\n        default=None, description=\"The boolean value of current config item\"\n    )\n    editable: Optional[bool] = Field(\n        default=None, description=\"The configure item can be updated or not\"\n    )\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.BoolConfigItem.value", "title": "<code>value = Field(default=None, description='The boolean value of current config item')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.BoolConfigItem.editable", "title": "<code>editable = Field(default=None, description='The configure item can be updated or not')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.IntegerConfigItem", "title": "<code>IntegerConfigItem</code>", "text": "Source code in <code>harborapi/models/models.py</code> <pre><code>class IntegerConfigItem(BaseModel):\n    value: Optional[int] = Field(\n        default=None, description=\"The integer value of current config item\"\n    )\n    editable: Optional[bool] = Field(\n        default=None, description=\"The configure item can be updated or not\"\n    )\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.IntegerConfigItem.value", "title": "<code>value = Field(default=None, description='The integer value of current config item')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.IntegerConfigItem.editable", "title": "<code>editable = Field(default=None, description='The configure item can be updated or not')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ProjectMemberEntity", "title": "<code>ProjectMemberEntity</code>", "text": "Source code in <code>harborapi/models/models.py</code> <pre><code>class ProjectMemberEntity(BaseModel):\n    id: Optional[int] = Field(default=None, description=\"the project member id\")\n    project_id: Optional[int] = Field(default=None, description=\"the project id\")\n    entity_name: Optional[str] = Field(\n        default=None, description=\"the name of the group member.\"\n    )\n    role_name: Optional[str] = Field(default=None, description=\"the name of the role\")\n    role_id: Optional[int] = Field(default=None, description=\"the role id\")\n    entity_id: Optional[int] = Field(\n        default=None,\n        description=\"the id of entity, if the member is a user, it is user_id in user table. if the member is a user group, it is the user group's ID in user_group table.\",\n    )\n    entity_type: Optional[str] = Field(\n        default=None,\n        description=\"the entity's type, u for user entity, g for group entity.\",\n    )\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.ProjectMemberEntity.id", "title": "<code>id = Field(default=None, description='the project member id')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ProjectMemberEntity.project_id", "title": "<code>project_id = Field(default=None, description='the project id')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ProjectMemberEntity.entity_name", "title": "<code>entity_name = Field(default=None, description='the name of the group member.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ProjectMemberEntity.role_name", "title": "<code>role_name = Field(default=None, description='the name of the role')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ProjectMemberEntity.role_id", "title": "<code>role_id = Field(default=None, description='the role id')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ProjectMemberEntity.entity_id", "title": "<code>entity_id = Field(default=None, description=\"the id of entity, if the member is a user, it is user_id in user table. if the member is a user group, it is the user group's ID in user_group table.\")</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ProjectMemberEntity.entity_type", "title": "<code>entity_type = Field(default=None, description=\"the entity's type, u for user entity, g for group entity.\")</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RoleRequest", "title": "<code>RoleRequest</code>", "text": "Source code in <code>harborapi/models/models.py</code> <pre><code>class RoleRequest(BaseModel):\n    role_id: Optional[int] = Field(\n        default=None,\n        description=\"The role id 1 for projectAdmin, 2 for developer, 3 for guest, 4 for maintainer\",\n    )\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.RoleRequest.role_id", "title": "<code>role_id = Field(default=None, description='The role id 1 for projectAdmin, 2 for developer, 3 for guest, 4 for maintainer')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.UserEntity", "title": "<code>UserEntity</code>", "text": "Source code in <code>harborapi/models/models.py</code> <pre><code>class UserEntity(BaseModel):\n    user_id: Optional[int] = Field(default=None, description=\"The ID of the user.\")\n    username: Optional[str] = Field(default=None, description=\"The name of the user.\")\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.UserEntity.user_id", "title": "<code>user_id = Field(default=None, description='The ID of the user.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.UserEntity.username", "title": "<code>username = Field(default=None, description='The name of the user.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.UserProfile", "title": "<code>UserProfile</code>", "text": "Source code in <code>harborapi/models/models.py</code> <pre><code>class UserProfile(BaseModel):\n    email: Optional[str] = None\n    realname: Optional[str] = None\n    comment: Optional[str] = None\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.UserProfile.email", "title": "<code>email = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.UserProfile.realname", "title": "<code>realname = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.UserProfile.comment", "title": "<code>comment = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.UserCreationReq", "title": "<code>UserCreationReq</code>", "text": "Source code in <code>harborapi/models/models.py</code> <pre><code>class UserCreationReq(BaseModel):\n    email: Optional[str] = Field(default=None, max_length=255)\n    realname: Optional[str] = None\n    comment: Optional[str] = None\n    password: Optional[str] = None\n    username: Optional[str] = Field(default=None, max_length=255)\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.UserCreationReq.email", "title": "<code>email = Field(default=None, max_length=255)</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.UserCreationReq.realname", "title": "<code>realname = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.UserCreationReq.comment", "title": "<code>comment = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.UserCreationReq.password", "title": "<code>password = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.UserCreationReq.username", "title": "<code>username = Field(default=None, max_length=255)</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.OIDCUserInfo", "title": "<code>OIDCUserInfo</code>", "text": "Source code in <code>harborapi/models/models.py</code> <pre><code>class OIDCUserInfo(BaseModel):\n    id: Optional[int] = Field(\n        default=None, description=\"the ID of the OIDC info record\"\n    )\n    user_id: Optional[int] = Field(default=None, description=\"the ID of the user\")\n    subiss: Optional[str] = Field(\n        default=None, description=\"the concatenation of sub and issuer in the ID token\"\n    )\n    secret: Optional[str] = Field(\n        default=None,\n        description=\"the secret of the OIDC user that can be used for CLI to push/pull artifacts\",\n    )\n    creation_time: Optional[datetime] = Field(\n        default=None, description=\"The creation time of the OIDC user info record.\"\n    )\n    update_time: Optional[datetime] = Field(\n        default=None, description=\"The update time of the OIDC user info record.\"\n    )\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.OIDCUserInfo.id", "title": "<code>id = Field(default=None, description='the ID of the OIDC info record')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.OIDCUserInfo.user_id", "title": "<code>user_id = Field(default=None, description='the ID of the user')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.OIDCUserInfo.subiss", "title": "<code>subiss = Field(default=None, description='the concatenation of sub and issuer in the ID token')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.OIDCUserInfo.secret", "title": "<code>secret = Field(default=None, description='the secret of the OIDC user that can be used for CLI to push/pull artifacts')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.OIDCUserInfo.creation_time", "title": "<code>creation_time = Field(default=None, description='The creation time of the OIDC user info record.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.OIDCUserInfo.update_time", "title": "<code>update_time = Field(default=None, description='The update time of the OIDC user info record.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.UserResp", "title": "<code>UserResp</code>", "text": "Source code in <code>harborapi/models/models.py</code> <pre><code>class UserResp(BaseModel):\n    email: Optional[str] = None\n    realname: Optional[str] = None\n    comment: Optional[str] = None\n    user_id: Optional[int] = None\n    username: Optional[str] = None\n    sysadmin_flag: Optional[bool] = None\n    admin_role_in_auth: Optional[bool] = Field(\n        default=None,\n        description=\"indicate the admin privilege is grant by authenticator (LDAP), is always false unless it is the current login user\",\n    )\n    oidc_user_meta: Optional[OIDCUserInfo] = None\n    creation_time: Optional[datetime] = Field(\n        default=None, description=\"The creation time of the user.\"\n    )\n    update_time: Optional[datetime] = Field(\n        default=None, description=\"The update time of the user.\"\n    )\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.UserResp.email", "title": "<code>email = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.UserResp.realname", "title": "<code>realname = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.UserResp.comment", "title": "<code>comment = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.UserResp.user_id", "title": "<code>user_id = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.UserResp.username", "title": "<code>username = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.UserResp.sysadmin_flag", "title": "<code>sysadmin_flag = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.UserResp.admin_role_in_auth", "title": "<code>admin_role_in_auth = Field(default=None, description='indicate the admin privilege is grant by authenticator (LDAP), is always false unless it is the current login user')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.UserResp.oidc_user_meta", "title": "<code>oidc_user_meta = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.UserResp.creation_time", "title": "<code>creation_time = Field(default=None, description='The creation time of the user.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.UserResp.update_time", "title": "<code>update_time = Field(default=None, description='The update time of the user.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.UserSysAdminFlag", "title": "<code>UserSysAdminFlag</code>", "text": "Source code in <code>harborapi/models/models.py</code> <pre><code>class UserSysAdminFlag(BaseModel):\n    sysadmin_flag: Optional[bool] = Field(\n        default=None, description=\"true-admin, false-not admin.\"\n    )\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.UserSysAdminFlag.sysadmin_flag", "title": "<code>sysadmin_flag = Field(default=None, description='true-admin, false-not admin.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.UserSearch", "title": "<code>UserSearch</code>", "text": "Source code in <code>harborapi/models/models.py</code> <pre><code>class UserSearch(BaseModel):\n    user_id: Optional[int] = Field(default=None, description=\"The ID of the user.\")\n    username: Optional[str] = None\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.UserSearch.user_id", "title": "<code>user_id = Field(default=None, description='The ID of the user.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.UserSearch.username", "title": "<code>username = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.PasswordReq", "title": "<code>PasswordReq</code>", "text": "Source code in <code>harborapi/models/models.py</code> <pre><code>class PasswordReq(BaseModel):\n    old_password: Optional[str] = Field(\n        default=None, description=\"The user's existing password.\"\n    )\n    new_password: Optional[str] = Field(\n        default=None, description=\"New password for marking as to be updated.\"\n    )\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.PasswordReq.old_password", "title": "<code>old_password = Field(default=None, description=\"The user's existing password.\")</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.PasswordReq.new_password", "title": "<code>new_password = Field(default=None, description='New password for marking as to be updated.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.UserSearchRespItem", "title": "<code>UserSearchRespItem</code>", "text": "Source code in <code>harborapi/models/models.py</code> <pre><code>class UserSearchRespItem(BaseModel):\n    user_id: Optional[int] = Field(default=None, description=\"The ID of the user.\")\n    username: Optional[str] = None\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.UserSearchRespItem.user_id", "title": "<code>user_id = Field(default=None, description='The ID of the user.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.UserSearchRespItem.username", "title": "<code>username = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Permission", "title": "<code>Permission</code>", "text": "Source code in <code>harborapi/models/models.py</code> <pre><code>class Permission(BaseModel):\n    resource: Optional[str] = Field(default=None, description=\"The permission resoruce\")\n    action: Optional[str] = Field(default=None, description=\"The permission action\")\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.Permission.resource", "title": "<code>resource = Field(default=None, description='The permission resoruce')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Permission.action", "title": "<code>action = Field(default=None, description='The permission action')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Permissions", "title": "<code>Permissions</code>", "text": "Source code in <code>harborapi/models/models.py</code> <pre><code>class Permissions(BaseModel):\n    system: Optional[List[Permission]] = Field(\n        default=None, description=\"The system level permissions\"\n    )\n    project: Optional[List[Permission]] = Field(\n        default=None, description=\"The project level permissions\"\n    )\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.Permissions.system", "title": "<code>system = Field(default=None, description='The system level permissions')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Permissions.project", "title": "<code>project = Field(default=None, description='The project level permissions')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.OIDCCliSecretReq", "title": "<code>OIDCCliSecretReq</code>", "text": "Source code in <code>harborapi/models/models.py</code> <pre><code>class OIDCCliSecretReq(BaseModel):\n    secret: Optional[str] = Field(default=None, description=\"The new secret\")\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.OIDCCliSecretReq.secret", "title": "<code>secret = Field(default=None, description='The new secret')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ComponentHealthStatus", "title": "<code>ComponentHealthStatus</code>", "text": "<p>Health status of a component.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class ComponentHealthStatus(BaseModel):\n    \"\"\"Health status of a component.\"\"\"\n\n    name: Optional[str] = Field(default=None, description=\"The component name\")\n    status: Optional[str] = Field(\n        default=None,\n        description='The health status of component. Is either \"healthy\" or \"unhealthy\".',\n    )\n    error: Optional[str] = Field(\n        default=None,\n        description='(optional) The error message when the status is \"unhealthy\"',\n    )\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.ComponentHealthStatus.name", "title": "<code>name = Field(default=None, description='The component name')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ComponentHealthStatus.status", "title": "<code>status = Field(default=None, description='The health status of component. Is either \"healthy\" or \"unhealthy\".')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ComponentHealthStatus.error", "title": "<code>error = Field(default=None, description='(optional) The error message when the status is \"unhealthy\"')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Statistic", "title": "<code>Statistic</code>", "text": "Source code in <code>harborapi/models/models.py</code> <pre><code>class Statistic(BaseModel):\n    private_project_count: Optional[int] = Field(\n        default=None, description=\"The count of the private projects\"\n    )\n    private_repo_count: Optional[int] = Field(\n        default=None, description=\"The count of the private repositories\"\n    )\n    public_project_count: Optional[int] = Field(\n        default=None, description=\"The count of the public projects\"\n    )\n    public_repo_count: Optional[int] = Field(\n        default=None, description=\"The count of the public repositories\"\n    )\n    total_project_count: Optional[int] = Field(\n        default=None,\n        description=\"The count of the total projects, only be seen by the system admin\",\n    )\n    total_repo_count: Optional[int] = Field(\n        default=None,\n        description=\"The count of the total repositories, only be seen by the system admin\",\n    )\n    total_storage_consumption: Optional[int] = Field(\n        default=None,\n        description=\"The total storage consumption of blobs, only be seen by the system admin\",\n    )\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.Statistic.private_project_count", "title": "<code>private_project_count = Field(default=None, description='The count of the private projects')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Statistic.private_repo_count", "title": "<code>private_repo_count = Field(default=None, description='The count of the private repositories')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Statistic.public_project_count", "title": "<code>public_project_count = Field(default=None, description='The count of the public projects')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Statistic.public_repo_count", "title": "<code>public_repo_count = Field(default=None, description='The count of the public repositories')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Statistic.total_project_count", "title": "<code>total_project_count = Field(default=None, description='The count of the total projects, only be seen by the system admin')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Statistic.total_repo_count", "title": "<code>total_repo_count = Field(default=None, description='The count of the total repositories, only be seen by the system admin')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Statistic.total_storage_consumption", "title": "<code>total_storage_consumption = Field(default=None, description='The total storage consumption of blobs, only be seen by the system admin')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Accessory", "title": "<code>Accessory</code>", "text": "<p>Accessory of an artifact.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class Accessory(BaseModel):\n    \"\"\"Accessory of an artifact.\"\"\"\n\n    id: Optional[int] = Field(default=None, description=\"The ID of the accessory\")\n    artifact_id: Optional[int] = Field(\n        default=None, description=\"The artifact id of the accessory\"\n    )\n    subject_artifact_id: Optional[int] = Field(\n        default=None,\n        description=\"Going to be deprecated, use repo and digest for insteand. The subject artifact id of the accessory.\",\n    )\n    subject_artifact_digest: Optional[str] = Field(\n        default=None, description=\"The subject artifact digest of the accessory\"\n    )\n    subject_artifact_repo: Optional[str] = Field(\n        default=None,\n        description=\"The subject artifact repository name of the accessory\",\n    )\n    size: Optional[int] = Field(\n        default=None, description=\"The artifact size of the accessory\"\n    )\n    digest: Optional[str] = Field(\n        default=None, description=\"The artifact digest of the accessory\"\n    )\n    type: Optional[str] = Field(\n        default=None, description=\"The artifact size of the accessory\"\n    )\n    icon: Optional[str] = Field(default=None, description=\"The icon of the accessory\")\n    creation_time: Optional[datetime] = Field(\n        default=None, description=\"The creation time of the accessory\"\n    )\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.Accessory.id", "title": "<code>id = Field(default=None, description='The ID of the accessory')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Accessory.artifact_id", "title": "<code>artifact_id = Field(default=None, description='The artifact id of the accessory')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Accessory.subject_artifact_id", "title": "<code>subject_artifact_id = Field(default=None, description='Going to be deprecated, use repo and digest for insteand. The subject artifact id of the accessory.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Accessory.subject_artifact_digest", "title": "<code>subject_artifact_digest = Field(default=None, description='The subject artifact digest of the accessory')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Accessory.subject_artifact_repo", "title": "<code>subject_artifact_repo = Field(default=None, description='The subject artifact repository name of the accessory')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Accessory.size", "title": "<code>size = Field(default=None, description='The artifact size of the accessory')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Accessory.digest", "title": "<code>digest = Field(default=None, description='The artifact digest of the accessory')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Accessory.type", "title": "<code>type = Field(default=None, description='The artifact size of the accessory')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Accessory.icon", "title": "<code>icon = Field(default=None, description='The icon of the accessory')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Accessory.creation_time", "title": "<code>creation_time = Field(default=None, description='The creation time of the accessory')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ScanDataExportRequest", "title": "<code>ScanDataExportRequest</code>", "text": "<p>Criteria for selecting scan data to export.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class ScanDataExportRequest(BaseModel):\n    \"\"\"Criteria for selecting scan data to export.\"\"\"\n\n    job_name: Optional[str] = Field(\n        default=None, description=\"Name of the scan data export job\"\n    )\n    projects: Optional[List[int]] = Field(\n        default=None,\n        description=\"A list of one or more projects for which to export the scan data, currently only one project is supported due to performance concerns, but define as array for extension in the future.\",\n    )\n    labels: Optional[List[int]] = Field(\n        default=None,\n        description=\"A list of one or more labels for which to export the scan data, defaults to all if empty\",\n    )\n    repositories: Optional[str] = Field(\n        default=None,\n        description=\"A list of repositories for which to export the scan data, defaults to all if empty\",\n    )\n    cve_ids: Optional[str] = Field(\n        default=None,\n        alias=\"cveIds\",\n        description=\"CVE-IDs for which to export data. Multiple CVE-IDs can be specified by separating using ',' and enclosed between '{}'. Defaults to all if empty\",\n    )\n    tags: Optional[str] = Field(\n        default=None,\n        description=\"A list of tags enclosed within '{}'. Defaults to all if empty\",\n    )\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.ScanDataExportRequest.job_name", "title": "<code>job_name = Field(default=None, description='Name of the scan data export job')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ScanDataExportRequest.projects", "title": "<code>projects = Field(default=None, description='A list of one or more projects for which to export the scan data, currently only one project is supported due to performance concerns, but define as array for extension in the future.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ScanDataExportRequest.labels", "title": "<code>labels = Field(default=None, description='A list of one or more labels for which to export the scan data, defaults to all if empty')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ScanDataExportRequest.repositories", "title": "<code>repositories = Field(default=None, description='A list of repositories for which to export the scan data, defaults to all if empty')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ScanDataExportRequest.cve_ids", "title": "<code>cve_ids = Field(default=None, alias='cveIds', description=\"CVE-IDs for which to export data. Multiple CVE-IDs can be specified by separating using ',' and enclosed between '{}'. Defaults to all if empty\")</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ScanDataExportRequest.tags", "title": "<code>tags = Field(default=None, description=\"A list of tags enclosed within '{}'. Defaults to all if empty\")</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ScanDataExportJob", "title": "<code>ScanDataExportJob</code>", "text": "<p>Metadata for a scan data export job.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class ScanDataExportJob(BaseModel):\n    \"\"\"Metadata for a scan data export job.\"\"\"\n\n    id: Optional[int] = Field(\n        default=None, description=\"The id of the scan data export job\"\n    )\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.ScanDataExportJob.id", "title": "<code>id = Field(default=None, description='The id of the scan data export job')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ScanDataExportExecution", "title": "<code>ScanDataExportExecution</code>", "text": "<p>Execution of a scan data export job.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class ScanDataExportExecution(BaseModel):\n    \"\"\"Execution of a scan data export job.\"\"\"\n\n    id: Optional[int] = Field(default=None, description=\"The ID of the execution\")\n    user_id: Optional[int] = Field(\n        default=None, description=\"The ID if the user triggering the export job\"\n    )\n    status: Optional[str] = Field(\n        default=None, description=\"The status of the execution\"\n    )\n    trigger: Optional[str] = Field(default=None, description=\"The trigger mode\")\n    start_time: Optional[datetime] = Field(default=None, description=\"The start time\")\n    end_time: Optional[datetime] = Field(default=None, description=\"The end time\")\n    status_text: Optional[str] = Field(default=None, description=\"The status text\")\n    user_name: Optional[str] = Field(\n        default=None, description=\"The name of the user triggering the job\"\n    )\n    file_present: Optional[bool] = Field(\n        default=None,\n        description=\"Indicates whether the export artifact is present in registry\",\n    )\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.ScanDataExportExecution.id", "title": "<code>id = Field(default=None, description='The ID of the execution')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ScanDataExportExecution.user_id", "title": "<code>user_id = Field(default=None, description='The ID if the user triggering the export job')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ScanDataExportExecution.status", "title": "<code>status = Field(default=None, description='The status of the execution')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ScanDataExportExecution.trigger", "title": "<code>trigger = Field(default=None, description='The trigger mode')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ScanDataExportExecution.start_time", "title": "<code>start_time = Field(default=None, description='The start time')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ScanDataExportExecution.end_time", "title": "<code>end_time = Field(default=None, description='The end time')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ScanDataExportExecution.status_text", "title": "<code>status_text = Field(default=None, description='The status text')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ScanDataExportExecution.user_name", "title": "<code>user_name = Field(default=None, description='The name of the user triggering the job')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ScanDataExportExecution.file_present", "title": "<code>file_present = Field(default=None, description='Indicates whether the export artifact is present in registry')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ScanDataExportExecutionList", "title": "<code>ScanDataExportExecutionList</code>", "text": "<p>List of executed scan data export jobs.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class ScanDataExportExecutionList(BaseModel):\n    \"\"\"List of executed scan data export jobs.\"\"\"\n\n    items: Optional[List[ScanDataExportExecution]] = Field(\n        default=None, description=\"The list of scan data export executions\"\n    )\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.ScanDataExportExecutionList.items", "title": "<code>items = Field(default=None, description='The list of scan data export executions')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.WorkerPool", "title": "<code>WorkerPool</code>", "text": "<p>Worker pool for job service.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class WorkerPool(BaseModel):\n    \"\"\"Worker pool for job service.\"\"\"\n\n    pid: Optional[int] = Field(default=None, description=\"the process id of jobservice\")\n    worker_pool_id: Optional[str] = Field(\n        default=None, description=\"the id of the worker pool\"\n    )\n    start_at: Optional[datetime] = Field(\n        default=None, description=\"The start time of the work pool\"\n    )\n    heartbeat_at: Optional[datetime] = Field(\n        default=None, description=\"The heartbeat time of the work pool\"\n    )\n    concurrency: Optional[int] = Field(\n        default=None, description=\"The concurrency of the work pool\"\n    )\n    host: Optional[str] = Field(default=None, description=\"The host of the work pool\")\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.WorkerPool.pid", "title": "<code>pid = Field(default=None, description='the process id of jobservice')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.WorkerPool.worker_pool_id", "title": "<code>worker_pool_id = Field(default=None, description='the id of the worker pool')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.WorkerPool.start_at", "title": "<code>start_at = Field(default=None, description='The start time of the work pool')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.WorkerPool.heartbeat_at", "title": "<code>heartbeat_at = Field(default=None, description='The heartbeat time of the work pool')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.WorkerPool.concurrency", "title": "<code>concurrency = Field(default=None, description='The concurrency of the work pool')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.WorkerPool.host", "title": "<code>host = Field(default=None, description='The host of the work pool')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Worker", "title": "<code>Worker</code>", "text": "<p>Worker in a pool.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class Worker(BaseModel):\n    \"\"\"Worker in a pool.\"\"\"\n\n    id: Optional[str] = Field(default=None, description=\"the id of the worker\")\n    pool_id: Optional[str] = Field(\n        default=None, description=\"the id of the worker pool\"\n    )\n    job_name: Optional[str] = Field(\n        default=None, description=\"the name of the running job in the worker\"\n    )\n    job_id: Optional[str] = Field(\n        default=None, description=\"the id of the running job in the worker\"\n    )\n    start_at: Optional[datetime] = Field(\n        default=None, description=\"The start time of the worker\"\n    )\n    check_in: Optional[str] = Field(\n        default=None, description=\"the checkin of the running job in the worker\"\n    )\n    checkin_at: Optional[datetime] = Field(\n        default=None, description=\"The checkin time of the worker\"\n    )\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.Worker.id", "title": "<code>id = Field(default=None, description='the id of the worker')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Worker.pool_id", "title": "<code>pool_id = Field(default=None, description='the id of the worker pool')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Worker.job_name", "title": "<code>job_name = Field(default=None, description='the name of the running job in the worker')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Worker.job_id", "title": "<code>job_id = Field(default=None, description='the id of the running job in the worker')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Worker.start_at", "title": "<code>start_at = Field(default=None, description='The start time of the worker')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Worker.check_in", "title": "<code>check_in = Field(default=None, description='the checkin of the running job in the worker')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Worker.checkin_at", "title": "<code>checkin_at = Field(default=None, description='The checkin time of the worker')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Action", "title": "<code>Action</code>", "text": "<p>Action to perform. Should be 'stop', 'pause', or 'resume'.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class Action(Enum):\n    \"\"\"Action to perform. Should be 'stop', 'pause', or 'resume'.\"\"\"\n\n    stop = \"stop\"\n    pause = \"pause\"\n    resume = \"resume\"\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.Action.stop", "title": "<code>stop = 'stop'</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Action.pause", "title": "<code>pause = 'pause'</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Action.resume", "title": "<code>resume = 'resume'</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ActionRequest", "title": "<code>ActionRequest</code>", "text": "<p>Request to perform an action.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class ActionRequest(BaseModel):\n    \"\"\"Request to perform an action.\"\"\"\n\n    action: Optional[Action] = Field(\n        default=None,\n        description=\"The action of the request, should be stop, pause or resume\",\n    )\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.ActionRequest.action", "title": "<code>action = Field(default=None, description='The action of the request, should be stop, pause or resume')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.JobQueue", "title": "<code>JobQueue</code>", "text": "<p>Information about a job queue.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class JobQueue(BaseModel):\n    \"\"\"Information about a job queue.\"\"\"\n\n    job_type: Optional[str] = Field(\n        default=None, description=\"The type of the job queue\"\n    )\n    count: Optional[int] = Field(\n        default=None, description=\"The count of jobs in the job queue\"\n    )\n    latency: Optional[int] = Field(\n        default=None, description=\"The latency the job queue (seconds)\"\n    )\n    paused: Optional[bool] = Field(\n        default=None, description=\"The paused status of the job queue\"\n    )\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.JobQueue.job_type", "title": "<code>job_type = Field(default=None, description='The type of the job queue')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.JobQueue.count", "title": "<code>count = Field(default=None, description='The count of jobs in the job queue')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.JobQueue.latency", "title": "<code>latency = Field(default=None, description='The latency the job queue (seconds)')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.JobQueue.paused", "title": "<code>paused = Field(default=None, description='The paused status of the job queue')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ScheduleTask", "title": "<code>ScheduleTask</code>", "text": "<p>Information about a scheduled task.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class ScheduleTask(BaseModel):\n    \"\"\"Information about a scheduled task.\"\"\"\n\n    id: Optional[int] = Field(default=None, description=\"the id of the Schedule task\")\n    vendor_type: Optional[str] = Field(\n        default=None, description=\"the vendor type of the current schedule task\"\n    )\n    vendor_id: Optional[int] = Field(\n        default=None, description=\"the vendor id of the current task\"\n    )\n    cron: Optional[str] = Field(\n        default=None, description=\"the cron of the current schedule task\"\n    )\n    update_time: Optional[datetime] = Field(\n        default=None, description=\"the update time of the schedule task\"\n    )\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.ScheduleTask.id", "title": "<code>id = Field(default=None, description='the id of the Schedule task')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ScheduleTask.vendor_type", "title": "<code>vendor_type = Field(default=None, description='the vendor type of the current schedule task')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ScheduleTask.vendor_id", "title": "<code>vendor_id = Field(default=None, description='the vendor id of the current task')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ScheduleTask.cron", "title": "<code>cron = Field(default=None, description='the cron of the current schedule task')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ScheduleTask.update_time", "title": "<code>update_time = Field(default=None, description='the update time of the schedule task')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.SchedulerStatus", "title": "<code>SchedulerStatus</code>", "text": "<p>Status of the scheduler.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class SchedulerStatus(BaseModel):\n    \"\"\"Status of the scheduler.\"\"\"\n\n    paused: Optional[bool] = Field(\n        default=None, description=\"if the scheduler is paused\"\n    )\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.SchedulerStatus.paused", "title": "<code>paused = Field(default=None, description='if the scheduler is paused')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.DangerousCVE", "title": "<code>DangerousCVE</code>", "text": "<p>A CVE marked as dangerous.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class DangerousCVE(BaseModel):\n    \"\"\"A CVE marked as dangerous.\"\"\"\n\n    cve_id: Optional[str] = Field(default=None, description=\"the cve id\")\n    severity: Optional[str] = Field(default=None, description=\"the severity of the CVE\")\n    cvss_score_v3: Optional[float] = Field(\n        default=None, description=\"the cvss score v3\"\n    )\n    desc: Optional[str] = Field(default=None, description=\"the description of the CVE\")\n    package: Optional[str] = Field(default=None, description=\"the package of the CVE\")\n    version: Optional[str] = Field(\n        default=None, description=\"the version of the package\"\n    )\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.DangerousCVE.cve_id", "title": "<code>cve_id = Field(default=None, description='the cve id')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.DangerousCVE.severity", "title": "<code>severity = Field(default=None, description='the severity of the CVE')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.DangerousCVE.cvss_score_v3", "title": "<code>cvss_score_v3 = Field(default=None, description='the cvss score v3')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.DangerousCVE.desc", "title": "<code>desc = Field(default=None, description='the description of the CVE')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.DangerousCVE.package", "title": "<code>package = Field(default=None, description='the package of the CVE')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.DangerousCVE.version", "title": "<code>version = Field(default=None, description='the version of the package')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.DangerousArtifact", "title": "<code>DangerousArtifact</code>", "text": "<p>An artifact marked as dangerous.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class DangerousArtifact(BaseModel):\n    \"\"\"An artifact marked as dangerous.\"\"\"\n\n    project_id: Optional[int] = Field(\n        default=None, description=\"the project id of the artifact\"\n    )\n    repository_name: Optional[str] = Field(\n        default=None, description=\"the repository name of the artifact\"\n    )\n    digest: Optional[str] = Field(\n        default=None, description=\"the digest of the artifact\"\n    )\n    critical_cnt: Optional[int] = Field(\n        default=None, description=\"the count of critical vulnerabilities\"\n    )\n    high_cnt: Optional[int] = Field(\n        default=None, description=\"the count of high vulnerabilities\"\n    )\n    medium_cnt: Optional[int] = Field(\n        default=None, description=\"the count of medium vulnerabilities\"\n    )\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.DangerousArtifact.project_id", "title": "<code>project_id = Field(default=None, description='the project id of the artifact')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.DangerousArtifact.repository_name", "title": "<code>repository_name = Field(default=None, description='the repository name of the artifact')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.DangerousArtifact.digest", "title": "<code>digest = Field(default=None, description='the digest of the artifact')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.DangerousArtifact.critical_cnt", "title": "<code>critical_cnt = Field(default=None, description='the count of critical vulnerabilities')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.DangerousArtifact.high_cnt", "title": "<code>high_cnt = Field(default=None, description='the count of high vulnerabilities')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.DangerousArtifact.medium_cnt", "title": "<code>medium_cnt = Field(default=None, description='the count of medium vulnerabilities')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.VulnerabilityItem", "title": "<code>VulnerabilityItem</code>", "text": "<p>Vulnerability found by a scan.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class VulnerabilityItem(BaseModel):\n    \"\"\"Vulnerability found by a scan.\"\"\"\n\n    project_id: Optional[int] = Field(\n        default=None, description=\"the project ID of the artifact\"\n    )\n    repository_name: Optional[str] = Field(\n        default=None, description=\"the repository name of the artifact\"\n    )\n    digest: Optional[str] = Field(\n        default=None, description=\"the digest of the artifact\"\n    )\n    tags: Optional[List[str]] = Field(\n        default=None, description=\"the tags of the artifact\"\n    )\n    cve_id: Optional[str] = Field(\n        default=None, description=\"the CVE id of the vulnerability.\"\n    )\n    severity: Optional[str] = Field(\n        default=None, description=\"the severity of the vulnerability\"\n    )\n    cvss_v3_score: Optional[float] = Field(\n        default=None, description=\"the nvd cvss v3 score of the vulnerability\"\n    )\n    package: Optional[str] = Field(\n        default=None, description=\"the package of the vulnerability\"\n    )\n    version: Optional[str] = Field(\n        default=None, description=\"the version of the package\"\n    )\n    fixed_version: Optional[str] = Field(\n        default=None, description=\"the fixed version of the package\"\n    )\n    desc: Optional[str] = Field(\n        default=None, description=\"The description of the vulnerability\"\n    )\n    links: Optional[List[str]] = Field(\n        default=None, description=\"Links of the vulnerability\"\n    )\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.VulnerabilityItem.project_id", "title": "<code>project_id = Field(default=None, description='the project ID of the artifact')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.VulnerabilityItem.repository_name", "title": "<code>repository_name = Field(default=None, description='the repository name of the artifact')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.VulnerabilityItem.digest", "title": "<code>digest = Field(default=None, description='the digest of the artifact')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.VulnerabilityItem.tags", "title": "<code>tags = Field(default=None, description='the tags of the artifact')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.VulnerabilityItem.cve_id", "title": "<code>cve_id = Field(default=None, description='the CVE id of the vulnerability.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.VulnerabilityItem.severity", "title": "<code>severity = Field(default=None, description='the severity of the vulnerability')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.VulnerabilityItem.cvss_v3_score", "title": "<code>cvss_v3_score = Field(default=None, description='the nvd cvss v3 score of the vulnerability')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.VulnerabilityItem.package", "title": "<code>package = Field(default=None, description='the package of the vulnerability')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.VulnerabilityItem.version", "title": "<code>version = Field(default=None, description='the version of the package')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.VulnerabilityItem.fixed_version", "title": "<code>fixed_version = Field(default=None, description='the fixed version of the package')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.VulnerabilityItem.desc", "title": "<code>desc = Field(default=None, description='The description of the vulnerability')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.VulnerabilityItem.links", "title": "<code>links = Field(default=None, description='Links of the vulnerability')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ScanType1", "title": "<code>ScanType1</code>", "text": "<p>The scan type for the scan request. Two options are currently supported, vulnerability and sbom</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class ScanType1(Enum):\n    \"\"\"\n    The scan type for the scan request. Two options are currently supported, vulnerability and sbom\n    \"\"\"\n\n    vulnerability = \"vulnerability\"\n    sbom = \"sbom\"\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.ScanType1.vulnerability", "title": "<code>vulnerability = 'vulnerability'</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ScanType1.sbom", "title": "<code>sbom = 'sbom'</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ScanType", "title": "<code>ScanType</code>", "text": "Source code in <code>harborapi/models/models.py</code> <pre><code>class ScanType(BaseModel):\n    scan_type: Optional[ScanType1] = Field(\n        default=None,\n        description=\"The scan type for the scan request. Two options are currently supported, vulnerability and sbom\",\n    )\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.ScanType.scan_type", "title": "<code>scan_type = Field(default=None, description='The scan type for the scan request. Two options are currently supported, vulnerability and sbom')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Errors", "title": "<code>Errors</code>", "text": "<p>Errors that occurred while handling a request.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class Errors(BaseModel):\n    \"\"\"Errors that occurred while handling a request.\"\"\"\n\n    errors: Optional[List[Error]] = None\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.Errors.errors", "title": "<code>errors = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.AdditionLinks", "title": "<code>AdditionLinks</code>", "text": "Source code in <code>harborapi/models/models.py</code> <pre><code>class AdditionLinks(RootModel[Optional[Dict[str, AdditionLink]]]):\n    root: Optional[Dict[str, AdditionLink]] = None\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.AdditionLinks.root", "title": "<code>root = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Reference", "title": "<code>Reference</code>", "text": "Source code in <code>harborapi/models/models.py</code> <pre><code>class Reference(BaseModel):\n    parent_id: Optional[int] = Field(\n        default=None, description=\"The parent ID of the reference\"\n    )\n    child_id: Optional[int] = Field(\n        default=None, description=\"The child ID of the reference\"\n    )\n    child_digest: Optional[str] = Field(\n        default=None, description=\"The digest of the child artifact\"\n    )\n    platform: Optional[Platform] = None\n    annotations: Optional[Annotations] = None\n    urls: Optional[List[str]] = Field(default=None, description=\"The download URLs\")\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.Reference.parent_id", "title": "<code>parent_id = Field(default=None, description='The parent ID of the reference')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Reference.child_id", "title": "<code>child_id = Field(default=None, description='The child ID of the reference')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Reference.child_digest", "title": "<code>child_digest = Field(default=None, description='The digest of the child artifact')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Reference.platform", "title": "<code>platform = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Reference.annotations", "title": "<code>annotations = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Reference.urls", "title": "<code>urls = Field(default=None, description='The download URLs')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.NativeReportSummary", "title": "<code>NativeReportSummary</code>", "text": "<p>Summary of a native scan report.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class NativeReportSummary(BaseModel):\n    \"\"\"Summary of a native scan report.\"\"\"\n\n    report_id: Optional[str] = Field(\n        default=None,\n        description=\"id of the native scan report\",\n        examples=[\"5f62c830-f996-11e9-957f-0242c0a89008\"],\n    )\n    scan_status: Optional[str] = Field(\n        default=None,\n        description=\"The status of the report generating process\",\n        examples=[\"Success\"],\n    )\n    severity: Optional[str] = Field(\n        default=None, description=\"The overall severity\", examples=[\"High\"]\n    )\n    duration: Optional[int] = Field(\n        default=None,\n        description=\"The seconds spent for generating the report\",\n        examples=[300],\n    )\n    summary: Optional[VulnerabilitySummary] = None\n    start_time: Optional[datetime] = Field(\n        default=None,\n        description=\"The start time of the scan process that generating report\",\n        examples=[\"2006-01-02T14:04:05Z\"],\n    )\n    end_time: Optional[datetime] = Field(\n        default=None,\n        description=\"The end time of the scan process that generating report\",\n        examples=[\"2006-01-02T15:04:05Z\"],\n    )\n    complete_percent: Optional[int] = Field(\n        default=None,\n        description=\"The complete percent of the scanning which value is between 0 and 100\",\n        examples=[100],\n    )\n    scanner: Optional[Scanner] = None\n\n    @property\n    def severity_enum(self) -&gt; Optional[Severity]:\n        \"\"\"The severity of the vulnerability\n\n        Returns\n        -------\n        Optional[Severity]\n            The severity of the vulnerability\n        \"\"\"\n        if self.severity:\n            return Severity(self.severity)\n        return None\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.NativeReportSummary.report_id", "title": "<code>report_id = Field(default=None, description='id of the native scan report', examples=['5f62c830-f996-11e9-957f-0242c0a89008'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.NativeReportSummary.scan_status", "title": "<code>scan_status = Field(default=None, description='The status of the report generating process', examples=['Success'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.NativeReportSummary.severity", "title": "<code>severity = Field(default=None, description='The overall severity', examples=['High'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.NativeReportSummary.duration", "title": "<code>duration = Field(default=None, description='The seconds spent for generating the report', examples=[300])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.NativeReportSummary.summary", "title": "<code>summary = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.NativeReportSummary.start_time", "title": "<code>start_time = Field(default=None, description='The start time of the scan process that generating report', examples=['2006-01-02T14:04:05Z'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.NativeReportSummary.end_time", "title": "<code>end_time = Field(default=None, description='The end time of the scan process that generating report', examples=['2006-01-02T15:04:05Z'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.NativeReportSummary.complete_percent", "title": "<code>complete_percent = Field(default=None, description='The complete percent of the scanning which value is between 0 and 100', examples=[100])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.NativeReportSummary.scanner", "title": "<code>scanner = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.NativeReportSummary.severity_enum", "title": "<code>severity_enum</code>  <code>property</code>", "text": "<p>The severity of the vulnerability</p> <p>Returns:</p> Type Description <code>Optional[Severity]</code> <p>The severity of the vulnerability</p>"}, {"location": "reference/models/_models/#harborapi.models._models.ProjectSummaryQuota", "title": "<code>ProjectSummaryQuota</code>", "text": "Source code in <code>harborapi/models/models.py</code> <pre><code>class ProjectSummaryQuota(BaseModel):\n    hard: Optional[ResourceList] = None\n    used: Optional[ResourceList] = None\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.ProjectSummaryQuota.hard", "title": "<code>hard = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ProjectSummaryQuota.used", "title": "<code>used = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.CVEAllowlist", "title": "<code>CVEAllowlist</code>", "text": "<p>CVE allowlist for a system or project.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class CVEAllowlist(BaseModel):\n    \"\"\"CVE allowlist for a system or project.\"\"\"\n\n    id: Optional[int] = Field(default=None, description=\"ID of the allowlist\")\n    project_id: Optional[int] = Field(\n        default=None,\n        description=\"ID of the project which the allowlist belongs to.  For system level allowlist this attribute is zero.\",\n    )\n    expires_at: Optional[int] = Field(\n        default=None,\n        description=\"the time for expiration of the allowlist, in the form of seconds since epoch.  This is an optional attribute, if it's not set the CVE allowlist does not expire.\",\n    )\n    items: Optional[List[CVEAllowlistItem]] = None\n    creation_time: Optional[datetime] = Field(\n        default=None, description=\"The creation time of the allowlist.\"\n    )\n    update_time: Optional[datetime] = Field(\n        default=None, description=\"The update time of the allowlist.\"\n    )\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.CVEAllowlist.id", "title": "<code>id = Field(default=None, description='ID of the allowlist')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.CVEAllowlist.project_id", "title": "<code>project_id = Field(default=None, description='ID of the project which the allowlist belongs to.  For system level allowlist this attribute is zero.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.CVEAllowlist.expires_at", "title": "<code>expires_at = Field(default=None, description=\"the time for expiration of the allowlist, in the form of seconds since epoch.  This is an optional attribute, if it's not set the CVE allowlist does not expire.\")</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.CVEAllowlist.items", "title": "<code>items = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.CVEAllowlist.creation_time", "title": "<code>creation_time = Field(default=None, description='The creation time of the allowlist.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.CVEAllowlist.update_time", "title": "<code>update_time = Field(default=None, description='The update time of the allowlist.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ReplicationTrigger", "title": "<code>ReplicationTrigger</code>", "text": "Source code in <code>harborapi/models/models.py</code> <pre><code>class ReplicationTrigger(BaseModel):\n    type: Optional[str] = Field(\n        default=None,\n        description=\"The replication policy trigger type. The valid values are manual, event_based and scheduled.\",\n    )\n    trigger_settings: Optional[ReplicationTriggerSettings] = None\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.ReplicationTrigger.type", "title": "<code>type = Field(default=None, description='The replication policy trigger type. The valid values are manual, event_based and scheduled.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ReplicationTrigger.trigger_settings", "title": "<code>trigger_settings = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RegistryInfo", "title": "<code>RegistryInfo</code>", "text": "<p>Registry information, including base info and capabilities.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class RegistryInfo(BaseModel):\n    \"\"\"Registry information, including base info and capabilities.\"\"\"\n\n    type: Optional[str] = Field(default=None, description=\"The registry type\")\n    description: Optional[str] = Field(default=None, description=\"The description\")\n    supported_resource_filters: Optional[List[FilterStyle]] = Field(\n        default=None, description=\"The filters that the registry supports\"\n    )\n    supported_triggers: Optional[List[str]] = Field(\n        default=None, description=\"The triggers that the registry supports\"\n    )\n    supported_copy_by_chunk: Optional[bool] = Field(\n        default=None, description=\"The registry whether support copy by chunk.\"\n    )\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.RegistryInfo.type", "title": "<code>type = Field(default=None, description='The registry type')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RegistryInfo.description", "title": "<code>description = Field(default=None, description='The description')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RegistryInfo.supported_resource_filters", "title": "<code>supported_resource_filters = Field(default=None, description='The filters that the registry supports')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RegistryInfo.supported_triggers", "title": "<code>supported_triggers = Field(default=None, description='The triggers that the registry supports')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RegistryInfo.supported_copy_by_chunk", "title": "<code>supported_copy_by_chunk = Field(default=None, description='The registry whether support copy by chunk.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RegistryProviderEndpointPattern", "title": "<code>RegistryProviderEndpointPattern</code>", "text": "<p>Pattern for a registry provider endpoint.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class RegistryProviderEndpointPattern(BaseModel):\n    \"\"\"Pattern for a registry provider endpoint.\"\"\"\n\n    endpoint_type: Optional[str] = Field(default=None, description=\"The endpoint type\")\n    endpoints: Optional[List[RegistryEndpoint]] = Field(\n        default=None, description=\"The endpoint list\"\n    )\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.RegistryProviderEndpointPattern.endpoint_type", "title": "<code>endpoint_type = Field(default=None, description='The endpoint type')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RegistryProviderEndpointPattern.endpoints", "title": "<code>endpoints = Field(default=None, description='The endpoint list')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RobotPermission", "title": "<code>RobotPermission</code>", "text": "Source code in <code>harborapi/models/models.py</code> <pre><code>class RobotPermission(BaseModel):\n    kind: Optional[str] = Field(default=None, description=\"The kind of the permission\")\n    namespace: Optional[str] = Field(\n        default=None, description=\"The namespace of the permission\"\n    )\n    access: Optional[List[Access]] = None\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.RobotPermission.kind", "title": "<code>kind = Field(default=None, description='The kind of the permission')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RobotPermission.namespace", "title": "<code>namespace = Field(default=None, description='The namespace of the permission')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RobotPermission.access", "title": "<code>access = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.GeneralInfo", "title": "<code>GeneralInfo</code>", "text": "Source code in <code>harborapi/models/models.py</code> <pre><code>class GeneralInfo(BaseModel):\n    banner_message: Optional[str] = Field(\n        default=None,\n        description=\"The banner message for the UI. It is the stringified result of the banner message object.\",\n        examples=[\n            '{\"closable\":true,\"message\":\"your banner message content\",\"type\":\"warning\",\"fromDate\":\"06/19/2023\",\"toDate\":\"06/21/2023\"}'\n        ],\n    )\n    current_time: Optional[datetime] = Field(\n        default=None, description=\"The current time of the server.\"\n    )\n    registry_url: Optional[str] = Field(\n        default=None,\n        description=\"The url of registry against which the docker command should be issued.\",\n    )\n    external_url: Optional[str] = Field(\n        default=None, description=\"The external URL of Harbor, with protocol.\"\n    )\n    auth_mode: Optional[str] = Field(\n        default=None, description=\"The auth mode of current Harbor instance.\"\n    )\n    primary_auth_mode: Optional[bool] = Field(\n        default=None,\n        description=\"The flag to indicate whether the current auth mode should consider as a primary one.\",\n    )\n    project_creation_restriction: Optional[str] = Field(\n        default=None,\n        description=\"Indicate who can create projects, it could be 'adminonly' or 'everyone'.\",\n    )\n    self_registration: Optional[bool] = Field(\n        default=None,\n        description=\"Indicate whether the Harbor instance enable user to register himself.\",\n    )\n    has_ca_root: Optional[bool] = Field(\n        default=None,\n        description=\"Indicate whether there is a ca root cert file ready for download in the file system.\",\n    )\n    harbor_version: Optional[str] = Field(\n        default=None, description=\"The build version of Harbor.\"\n    )\n    registry_storage_provider_name: Optional[str] = Field(\n        default=None, description=\"The storage provider's name of Harbor registry\"\n    )\n    read_only: Optional[bool] = Field(\n        default=None,\n        description=\"The flag to indicate whether Harbor is in readonly mode.\",\n    )\n    notification_enable: Optional[bool] = Field(\n        default=None,\n        description=\"The flag to indicate whether notification mechanism is enabled on Harbor instance.\",\n    )\n    authproxy_settings: Optional[AuthproxySetting] = None\n    oidc_provider_name: Optional[str] = Field(\n        default=None,\n        description=\"The OIDC provider name, empty if current auth is not OIDC_auth or OIDC provider is not configured.\",\n    )\n    with_chartmuseum: Optional[bool] = Field(\n        default=None,\n        description=\"DEPRECATED: Harbor instance is deployed with nested chartmuseum.\",\n    )\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.GeneralInfo.banner_message", "title": "<code>banner_message = Field(default=None, description='The banner message for the UI. It is the stringified result of the banner message object.', examples=['{\"closable\":true,\"message\":\"your banner message content\",\"type\":\"warning\",\"fromDate\":\"06/19/2023\",\"toDate\":\"06/21/2023\"}'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.GeneralInfo.current_time", "title": "<code>current_time = Field(default=None, description='The current time of the server.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.GeneralInfo.registry_url", "title": "<code>registry_url = Field(default=None, description='The url of registry against which the docker command should be issued.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.GeneralInfo.external_url", "title": "<code>external_url = Field(default=None, description='The external URL of Harbor, with protocol.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.GeneralInfo.auth_mode", "title": "<code>auth_mode = Field(default=None, description='The auth mode of current Harbor instance.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.GeneralInfo.primary_auth_mode", "title": "<code>primary_auth_mode = Field(default=None, description='The flag to indicate whether the current auth mode should consider as a primary one.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.GeneralInfo.project_creation_restriction", "title": "<code>project_creation_restriction = Field(default=None, description=\"Indicate who can create projects, it could be 'adminonly' or 'everyone'.\")</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.GeneralInfo.self_registration", "title": "<code>self_registration = Field(default=None, description='Indicate whether the Harbor instance enable user to register himself.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.GeneralInfo.has_ca_root", "title": "<code>has_ca_root = Field(default=None, description='Indicate whether there is a ca root cert file ready for download in the file system.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.GeneralInfo.harbor_version", "title": "<code>harbor_version = Field(default=None, description='The build version of Harbor.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.GeneralInfo.registry_storage_provider_name", "title": "<code>registry_storage_provider_name = Field(default=None, description=\"The storage provider's name of Harbor registry\")</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.GeneralInfo.read_only", "title": "<code>read_only = Field(default=None, description='The flag to indicate whether Harbor is in readonly mode.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.GeneralInfo.notification_enable", "title": "<code>notification_enable = Field(default=None, description='The flag to indicate whether notification mechanism is enabled on Harbor instance.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.GeneralInfo.authproxy_settings", "title": "<code>authproxy_settings = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.GeneralInfo.oidc_provider_name", "title": "<code>oidc_provider_name = Field(default=None, description='The OIDC provider name, empty if current auth is not OIDC_auth or OIDC provider is not configured.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.GeneralInfo.with_chartmuseum", "title": "<code>with_chartmuseum = Field(default=None, description='DEPRECATED: Harbor instance is deployed with nested chartmuseum.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.GCHistory", "title": "<code>GCHistory</code>", "text": "Source code in <code>harborapi/models/models.py</code> <pre><code>class GCHistory(BaseModel):\n    id: Optional[int] = Field(default=None, description=\"the id of gc job.\")\n    job_name: Optional[str] = Field(default=None, description=\"the job name of gc job.\")\n    job_kind: Optional[str] = Field(default=None, description=\"the job kind of gc job.\")\n    job_parameters: Optional[str] = Field(\n        default=None, description=\"the job parameters of gc job.\"\n    )\n    schedule: Optional[ScheduleObj] = None\n    job_status: Optional[str] = Field(default=None, description=\"the status of gc job.\")\n    deleted: Optional[bool] = Field(default=None, description=\"if gc job was deleted.\")\n    creation_time: Optional[datetime] = Field(\n        default=None, description=\"the creation time of gc job.\"\n    )\n    update_time: Optional[datetime] = Field(\n        default=None, description=\"the update time of gc job.\"\n    )\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.GCHistory.id", "title": "<code>id = Field(default=None, description='the id of gc job.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.GCHistory.job_name", "title": "<code>job_name = Field(default=None, description='the job name of gc job.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.GCHistory.job_kind", "title": "<code>job_kind = Field(default=None, description='the job kind of gc job.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.GCHistory.job_parameters", "title": "<code>job_parameters = Field(default=None, description='the job parameters of gc job.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.GCHistory.schedule", "title": "<code>schedule = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.GCHistory.job_status", "title": "<code>job_status = Field(default=None, description='the status of gc job.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.GCHistory.deleted", "title": "<code>deleted = Field(default=None, description='if gc job was deleted.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.GCHistory.creation_time", "title": "<code>creation_time = Field(default=None, description='the creation time of gc job.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.GCHistory.update_time", "title": "<code>update_time = Field(default=None, description='the update time of gc job.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ExecHistory", "title": "<code>ExecHistory</code>", "text": "Source code in <code>harborapi/models/models.py</code> <pre><code>class ExecHistory(BaseModel):\n    id: Optional[int] = Field(default=None, description=\"the id of purge job.\")\n    job_name: Optional[str] = Field(\n        default=None, description=\"the job name of purge job.\"\n    )\n    job_kind: Optional[str] = Field(\n        default=None, description=\"the job kind of purge job.\"\n    )\n    job_parameters: Optional[str] = Field(\n        default=None, description=\"the job parameters of purge job.\"\n    )\n    schedule: Optional[ScheduleObj] = None\n    job_status: Optional[str] = Field(\n        default=None, description=\"the status of purge job.\"\n    )\n    deleted: Optional[bool] = Field(\n        default=None, description=\"if purge job was deleted.\"\n    )\n    creation_time: Optional[datetime] = Field(\n        default=None, description=\"the creation time of purge job.\"\n    )\n    update_time: Optional[datetime] = Field(\n        default=None, description=\"the update time of purge job.\"\n    )\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.ExecHistory.id", "title": "<code>id = Field(default=None, description='the id of purge job.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ExecHistory.job_name", "title": "<code>job_name = Field(default=None, description='the job name of purge job.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ExecHistory.job_kind", "title": "<code>job_kind = Field(default=None, description='the job kind of purge job.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ExecHistory.job_parameters", "title": "<code>job_parameters = Field(default=None, description='the job parameters of purge job.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ExecHistory.schedule", "title": "<code>schedule = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ExecHistory.job_status", "title": "<code>job_status = Field(default=None, description='the status of purge job.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ExecHistory.deleted", "title": "<code>deleted = Field(default=None, description='if purge job was deleted.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ExecHistory.creation_time", "title": "<code>creation_time = Field(default=None, description='the creation time of purge job.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ExecHistory.update_time", "title": "<code>update_time = Field(default=None, description='the update time of purge job.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Schedule", "title": "<code>Schedule</code>", "text": "Source code in <code>harborapi/models/models.py</code> <pre><code>class Schedule(BaseModel):\n    id: Optional[int] = Field(default=None, description=\"The id of the schedule.\")\n    status: Optional[str] = Field(\n        default=None, description=\"The status of the schedule.\"\n    )\n    creation_time: Optional[datetime] = Field(\n        default=None, description=\"the creation time of the schedule.\"\n    )\n    update_time: Optional[datetime] = Field(\n        default=None, description=\"the update time of the schedule.\"\n    )\n    schedule: Optional[ScheduleObj] = None\n    parameters: Optional[Dict[str, Any]] = Field(\n        default=None, description=\"The parameters of schedule job\"\n    )\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.Schedule.id", "title": "<code>id = Field(default=None, description='The id of the schedule.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Schedule.status", "title": "<code>status = Field(default=None, description='The status of the schedule.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Schedule.creation_time", "title": "<code>creation_time = Field(default=None, description='the creation time of the schedule.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Schedule.update_time", "title": "<code>update_time = Field(default=None, description='the update time of the schedule.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Schedule.schedule", "title": "<code>schedule = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Schedule.parameters", "title": "<code>parameters = Field(default=None, description='The parameters of schedule job')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RetentionRuleMetadata", "title": "<code>RetentionRuleMetadata</code>", "text": "<p>Metadata for a tag retention rule.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class RetentionRuleMetadata(BaseModel):\n    \"\"\"Metadata for a tag retention rule.\"\"\"\n\n    rule_template: Optional[str] = Field(default=None, description=\"rule id\")\n    display_text: Optional[str] = Field(default=None, description=\"rule display text\")\n    action: Optional[str] = Field(default=None, description=\"rule action\")\n    params: Optional[List[RetentionRuleParamMetadata]] = Field(\n        default=None, description=\"rule params\"\n    )\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.RetentionRuleMetadata.rule_template", "title": "<code>rule_template = Field(default=None, description='rule id')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RetentionRuleMetadata.display_text", "title": "<code>display_text = Field(default=None, description='rule display text')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RetentionRuleMetadata.action", "title": "<code>action = Field(default=None, description='rule action')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RetentionRuleMetadata.params", "title": "<code>params = Field(default=None, description='rule params')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RetentionRule", "title": "<code>RetentionRule</code>", "text": "Source code in <code>harborapi/models/models.py</code> <pre><code>class RetentionRule(BaseModel):\n    id: Optional[int] = None\n    priority: Optional[int] = None\n    disabled: Optional[bool] = None\n    action: Optional[str] = None\n    template: Optional[str] = None\n    params: Optional[Dict[str, Any]] = None\n    tag_selectors: Optional[List[RetentionSelector]] = None\n    scope_selectors: Optional[Dict[str, List[RetentionSelector]]] = None\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.RetentionRule.id", "title": "<code>id = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RetentionRule.priority", "title": "<code>priority = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RetentionRule.disabled", "title": "<code>disabled = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RetentionRule.action", "title": "<code>action = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RetentionRule.template", "title": "<code>template = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RetentionRule.params", "title": "<code>params = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RetentionRule.tag_selectors", "title": "<code>tag_selectors = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RetentionRule.scope_selectors", "title": "<code>scope_selectors = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ImmutableRule", "title": "<code>ImmutableRule</code>", "text": "Source code in <code>harborapi/models/models.py</code> <pre><code>class ImmutableRule(BaseModel):\n    id: Optional[int] = None\n    priority: Optional[int] = None\n    disabled: Optional[bool] = None\n    action: Optional[str] = None\n    template: Optional[str] = None\n    params: Optional[Dict[str, Any]] = None\n    tag_selectors: Optional[List[ImmutableSelector]] = None\n    scope_selectors: Optional[Dict[str, List[ImmutableSelector]]] = None\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.ImmutableRule.id", "title": "<code>id = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ImmutableRule.priority", "title": "<code>priority = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ImmutableRule.disabled", "title": "<code>disabled = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ImmutableRule.action", "title": "<code>action = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ImmutableRule.template", "title": "<code>template = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ImmutableRule.params", "title": "<code>params = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ImmutableRule.tag_selectors", "title": "<code>tag_selectors = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ImmutableRule.scope_selectors", "title": "<code>scope_selectors = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.SupportedWebhookEventTypes", "title": "<code>SupportedWebhookEventTypes</code>", "text": "<p>Supported event and notification types for webhooks.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class SupportedWebhookEventTypes(BaseModel):\n    \"\"\"Supported event and notification types for webhooks.\"\"\"\n\n    event_type: Optional[List[EventType]] = None\n    notify_type: Optional[List[NotifyType]] = None\n    payload_formats: Optional[List[PayloadFormat]] = None\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.SupportedWebhookEventTypes.event_type", "title": "<code>event_type = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.SupportedWebhookEventTypes.notify_type", "title": "<code>notify_type = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.SupportedWebhookEventTypes.payload_formats", "title": "<code>payload_formats = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.InternalConfigurationsResponse", "title": "<code>InternalConfigurationsResponse</code>", "text": "Source code in <code>harborapi/models/models.py</code> <pre><code>class InternalConfigurationsResponse(\n    RootModel[Optional[Dict[str, InternalConfigurationValue]]]\n):\n    root: Optional[Dict[str, InternalConfigurationValue]] = None\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.InternalConfigurationsResponse.root", "title": "<code>root = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ConfigurationsResponse", "title": "<code>ConfigurationsResponse</code>", "text": "Source code in <code>harborapi/models/models.py</code> <pre><code>class ConfigurationsResponse(BaseModel):\n    auth_mode: Optional[StringConfigItem] = None\n    primary_auth_mode: Optional[BoolConfigItem] = None\n    ldap_base_dn: Optional[StringConfigItem] = None\n    ldap_filter: Optional[StringConfigItem] = None\n    ldap_group_base_dn: Optional[StringConfigItem] = None\n    ldap_group_admin_dn: Optional[StringConfigItem] = None\n    ldap_group_attribute_name: Optional[StringConfigItem] = None\n    ldap_group_search_filter: Optional[StringConfigItem] = None\n    ldap_group_search_scope: Optional[IntegerConfigItem] = None\n    ldap_group_attach_parallel: Optional[BoolConfigItem] = None\n    ldap_scope: Optional[IntegerConfigItem] = None\n    ldap_search_dn: Optional[StringConfigItem] = None\n    ldap_timeout: Optional[IntegerConfigItem] = None\n    ldap_uid: Optional[StringConfigItem] = None\n    ldap_url: Optional[StringConfigItem] = None\n    ldap_verify_cert: Optional[BoolConfigItem] = None\n    ldap_group_membership_attribute: Optional[StringConfigItem] = None\n    project_creation_restriction: Optional[StringConfigItem] = None\n    read_only: Optional[BoolConfigItem] = None\n    self_registration: Optional[BoolConfigItem] = None\n    token_expiration: Optional[IntegerConfigItem] = None\n    uaa_client_id: Optional[StringConfigItem] = None\n    uaa_client_secret: Optional[StringConfigItem] = None\n    uaa_endpoint: Optional[StringConfigItem] = None\n    uaa_verify_cert: Optional[BoolConfigItem] = None\n    http_authproxy_endpoint: Optional[StringConfigItem] = None\n    http_authproxy_tokenreview_endpoint: Optional[StringConfigItem] = None\n    http_authproxy_admin_groups: Optional[StringConfigItem] = None\n    http_authproxy_admin_usernames: Optional[StringConfigItem] = None\n    http_authproxy_verify_cert: Optional[BoolConfigItem] = None\n    http_authproxy_skip_search: Optional[BoolConfigItem] = None\n    http_authproxy_server_certificate: Optional[StringConfigItem] = None\n    oidc_name: Optional[StringConfigItem] = None\n    oidc_endpoint: Optional[StringConfigItem] = None\n    oidc_client_id: Optional[StringConfigItem] = None\n    oidc_groups_claim: Optional[StringConfigItem] = None\n    oidc_admin_group: Optional[StringConfigItem] = None\n    oidc_group_filter: Optional[StringConfigItem] = None\n    oidc_scope: Optional[StringConfigItem] = None\n    oidc_user_claim: Optional[StringConfigItem] = None\n    oidc_verify_cert: Optional[BoolConfigItem] = None\n    oidc_auto_onboard: Optional[BoolConfigItem] = None\n    oidc_extra_redirect_parms: Optional[StringConfigItem] = None\n    robot_token_duration: Optional[IntegerConfigItem] = None\n    robot_name_prefix: Optional[StringConfigItem] = None\n    notification_enable: Optional[BoolConfigItem] = None\n    quota_per_project_enable: Optional[BoolConfigItem] = None\n    storage_per_project: Optional[IntegerConfigItem] = None\n    audit_log_forward_endpoint: Optional[StringConfigItem] = None\n    skip_audit_log_database: Optional[BoolConfigItem] = None\n    scanner_skip_update_pulltime: Optional[BoolConfigItem] = None\n    scan_all_policy: Optional[ScanAllPolicy] = None\n    session_timeout: Optional[IntegerConfigItem] = None\n    banner_message: Optional[StringConfigItem] = None\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.ConfigurationsResponse.auth_mode", "title": "<code>auth_mode = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ConfigurationsResponse.primary_auth_mode", "title": "<code>primary_auth_mode = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ConfigurationsResponse.ldap_base_dn", "title": "<code>ldap_base_dn = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ConfigurationsResponse.ldap_filter", "title": "<code>ldap_filter = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ConfigurationsResponse.ldap_group_base_dn", "title": "<code>ldap_group_base_dn = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ConfigurationsResponse.ldap_group_admin_dn", "title": "<code>ldap_group_admin_dn = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ConfigurationsResponse.ldap_group_attribute_name", "title": "<code>ldap_group_attribute_name = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ConfigurationsResponse.ldap_group_search_filter", "title": "<code>ldap_group_search_filter = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ConfigurationsResponse.ldap_group_search_scope", "title": "<code>ldap_group_search_scope = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ConfigurationsResponse.ldap_group_attach_parallel", "title": "<code>ldap_group_attach_parallel = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ConfigurationsResponse.ldap_scope", "title": "<code>ldap_scope = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ConfigurationsResponse.ldap_search_dn", "title": "<code>ldap_search_dn = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ConfigurationsResponse.ldap_timeout", "title": "<code>ldap_timeout = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ConfigurationsResponse.ldap_uid", "title": "<code>ldap_uid = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ConfigurationsResponse.ldap_url", "title": "<code>ldap_url = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ConfigurationsResponse.ldap_verify_cert", "title": "<code>ldap_verify_cert = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ConfigurationsResponse.ldap_group_membership_attribute", "title": "<code>ldap_group_membership_attribute = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ConfigurationsResponse.project_creation_restriction", "title": "<code>project_creation_restriction = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ConfigurationsResponse.read_only", "title": "<code>read_only = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ConfigurationsResponse.self_registration", "title": "<code>self_registration = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ConfigurationsResponse.token_expiration", "title": "<code>token_expiration = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ConfigurationsResponse.uaa_client_id", "title": "<code>uaa_client_id = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ConfigurationsResponse.uaa_client_secret", "title": "<code>uaa_client_secret = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ConfigurationsResponse.uaa_endpoint", "title": "<code>uaa_endpoint = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ConfigurationsResponse.uaa_verify_cert", "title": "<code>uaa_verify_cert = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ConfigurationsResponse.http_authproxy_endpoint", "title": "<code>http_authproxy_endpoint = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ConfigurationsResponse.http_authproxy_tokenreview_endpoint", "title": "<code>http_authproxy_tokenreview_endpoint = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ConfigurationsResponse.http_authproxy_admin_groups", "title": "<code>http_authproxy_admin_groups = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ConfigurationsResponse.http_authproxy_admin_usernames", "title": "<code>http_authproxy_admin_usernames = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ConfigurationsResponse.http_authproxy_verify_cert", "title": "<code>http_authproxy_verify_cert = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ConfigurationsResponse.http_authproxy_skip_search", "title": "<code>http_authproxy_skip_search = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ConfigurationsResponse.http_authproxy_server_certificate", "title": "<code>http_authproxy_server_certificate = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ConfigurationsResponse.oidc_name", "title": "<code>oidc_name = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ConfigurationsResponse.oidc_endpoint", "title": "<code>oidc_endpoint = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ConfigurationsResponse.oidc_client_id", "title": "<code>oidc_client_id = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ConfigurationsResponse.oidc_groups_claim", "title": "<code>oidc_groups_claim = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ConfigurationsResponse.oidc_admin_group", "title": "<code>oidc_admin_group = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ConfigurationsResponse.oidc_group_filter", "title": "<code>oidc_group_filter = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ConfigurationsResponse.oidc_scope", "title": "<code>oidc_scope = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ConfigurationsResponse.oidc_user_claim", "title": "<code>oidc_user_claim = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ConfigurationsResponse.oidc_verify_cert", "title": "<code>oidc_verify_cert = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ConfigurationsResponse.oidc_auto_onboard", "title": "<code>oidc_auto_onboard = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ConfigurationsResponse.oidc_extra_redirect_parms", "title": "<code>oidc_extra_redirect_parms = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ConfigurationsResponse.robot_token_duration", "title": "<code>robot_token_duration = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ConfigurationsResponse.robot_name_prefix", "title": "<code>robot_name_prefix = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ConfigurationsResponse.notification_enable", "title": "<code>notification_enable = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ConfigurationsResponse.quota_per_project_enable", "title": "<code>quota_per_project_enable = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ConfigurationsResponse.storage_per_project", "title": "<code>storage_per_project = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ConfigurationsResponse.audit_log_forward_endpoint", "title": "<code>audit_log_forward_endpoint = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ConfigurationsResponse.skip_audit_log_database", "title": "<code>skip_audit_log_database = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ConfigurationsResponse.scanner_skip_update_pulltime", "title": "<code>scanner_skip_update_pulltime = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ConfigurationsResponse.scan_all_policy", "title": "<code>scan_all_policy = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ConfigurationsResponse.session_timeout", "title": "<code>session_timeout = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ConfigurationsResponse.banner_message", "title": "<code>banner_message = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ProjectMember", "title": "<code>ProjectMember</code>", "text": "Source code in <code>harborapi/models/models.py</code> <pre><code>class ProjectMember(BaseModel):\n    role_id: Optional[int] = Field(\n        default=None,\n        description=\"The role id 1 for projectAdmin, 2 for developer, 3 for guest, 4 for maintainer\",\n    )\n    member_user: Optional[UserEntity] = None\n    member_group: Optional[UserGroup] = None\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.ProjectMember.role_id", "title": "<code>role_id = Field(default=None, description='The role id 1 for projectAdmin, 2 for developer, 3 for guest, 4 for maintainer')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ProjectMember.member_user", "title": "<code>member_user = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ProjectMember.member_group", "title": "<code>member_group = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.OverallHealthStatus", "title": "<code>OverallHealthStatus</code>", "text": "<p>Overall health status of the system.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class OverallHealthStatus(BaseModel):\n    \"\"\"Overall health status of the system.\"\"\"\n\n    status: Optional[str] = Field(\n        default=None,\n        description='The overall health status. It is \"healthy\" only when all the components\\' status are \"healthy\"',\n    )\n    components: Optional[List[ComponentHealthStatus]] = None\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.OverallHealthStatus.status", "title": "<code>status = Field(default=None, description='The overall health status. It is \"healthy\" only when all the components\\' status are \"healthy\"')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.OverallHealthStatus.components", "title": "<code>components = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.SecuritySummary", "title": "<code>SecuritySummary</code>", "text": "<p>Artifact security summary.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class SecuritySummary(BaseModel):\n    \"\"\"Artifact security summary.\"\"\"\n\n    critical_cnt: Optional[int] = Field(\n        default=None, description=\"the count of critical vulnerabilities\"\n    )\n    high_cnt: Optional[int] = Field(\n        default=None, description=\"the count of high vulnerabilities\"\n    )\n    medium_cnt: Optional[int] = Field(\n        default=None, description=\"the count of medium vulnerabilities\"\n    )\n    low_cnt: Optional[int] = Field(\n        default=None, description=\"the count of low vulnerabilities\"\n    )\n    none_cnt: Optional[int] = Field(\n        default=None, description=\"the count of none vulnerabilities\"\n    )\n    unknown_cnt: Optional[int] = Field(\n        default=None, description=\"the count of unknown vulnerabilities\"\n    )\n    total_vuls: Optional[int] = Field(\n        default=None, description=\"the count of total vulnerabilities\"\n    )\n    scanned_cnt: Optional[int] = Field(\n        default=None, description=\"the count of scanned artifacts\"\n    )\n    total_artifact: Optional[int] = Field(\n        default=None, description=\"the total count of artifacts\"\n    )\n    fixable_cnt: Optional[int] = Field(\n        default=None, description=\"the count of fixable vulnerabilities\"\n    )\n    dangerous_cves: Optional[List[DangerousCVE]] = Field(\n        default=None, description=\"the list of dangerous CVEs\"\n    )\n    dangerous_artifacts: Optional[List[DangerousArtifact]] = Field(\n        default=None, description=\"the list of dangerous artifacts\"\n    )\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.SecuritySummary.critical_cnt", "title": "<code>critical_cnt = Field(default=None, description='the count of critical vulnerabilities')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.SecuritySummary.high_cnt", "title": "<code>high_cnt = Field(default=None, description='the count of high vulnerabilities')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.SecuritySummary.medium_cnt", "title": "<code>medium_cnt = Field(default=None, description='the count of medium vulnerabilities')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.SecuritySummary.low_cnt", "title": "<code>low_cnt = Field(default=None, description='the count of low vulnerabilities')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.SecuritySummary.none_cnt", "title": "<code>none_cnt = Field(default=None, description='the count of none vulnerabilities')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.SecuritySummary.unknown_cnt", "title": "<code>unknown_cnt = Field(default=None, description='the count of unknown vulnerabilities')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.SecuritySummary.total_vuls", "title": "<code>total_vuls = Field(default=None, description='the count of total vulnerabilities')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.SecuritySummary.scanned_cnt", "title": "<code>scanned_cnt = Field(default=None, description='the count of scanned artifacts')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.SecuritySummary.total_artifact", "title": "<code>total_artifact = Field(default=None, description='the total count of artifacts')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.SecuritySummary.fixable_cnt", "title": "<code>fixable_cnt = Field(default=None, description='the count of fixable vulnerabilities')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.SecuritySummary.dangerous_cves", "title": "<code>dangerous_cves = Field(default=None, description='the list of dangerous CVEs')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.SecuritySummary.dangerous_artifacts", "title": "<code>dangerous_artifacts = Field(default=None, description='the list of dangerous artifacts')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ScanOverview", "title": "<code>ScanOverview</code>", "text": "<p>Overview of scan results.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class ScanOverview(RootModel[Optional[Dict[str, NativeReportSummary]]]):\n    \"\"\"Overview of scan results.\"\"\"\n\n    root: Optional[Dict[str, NativeReportSummary]] = None\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.ScanOverview.root", "title": "<code>root = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ProjectReq", "title": "<code>ProjectReq</code>", "text": "Source code in <code>harborapi/models/models.py</code> <pre><code>class ProjectReq(BaseModel):\n    project_name: Optional[str] = Field(\n        default=None, description=\"The name of the project.\", max_length=255\n    )\n    public: Optional[bool] = Field(\n        default=None,\n        description=\"deprecated, reserved for project creation in replication\",\n    )\n    metadata: Optional[ProjectMetadata] = None\n    cve_allowlist: Optional[CVEAllowlist] = None\n    storage_limit: Optional[int] = Field(\n        default=None, description=\"The storage quota of the project.\"\n    )\n    registry_id: Optional[int] = Field(\n        default=None,\n        description=\"The ID of referenced registry when creating the proxy cache project\",\n    )\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.ProjectReq.project_name", "title": "<code>project_name = Field(default=None, description='The name of the project.', max_length=255)</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ProjectReq.public", "title": "<code>public = Field(default=None, description='deprecated, reserved for project creation in replication')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ProjectReq.metadata", "title": "<code>metadata = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ProjectReq.cve_allowlist", "title": "<code>cve_allowlist = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ProjectReq.storage_limit", "title": "<code>storage_limit = Field(default=None, description='The storage quota of the project.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ProjectReq.registry_id", "title": "<code>registry_id = Field(default=None, description='The ID of referenced registry when creating the proxy cache project')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Project", "title": "<code>Project</code>", "text": "Source code in <code>harborapi/models/models.py</code> <pre><code>class Project(BaseModel):\n    project_id: Optional[int] = Field(default=None, description=\"Project ID\")\n    owner_id: Optional[int] = Field(\n        default=None,\n        description=\"The owner ID of the project always means the creator of the project.\",\n    )\n    name: Optional[str] = Field(default=None, description=\"The name of the project.\")\n    registry_id: Optional[int] = Field(\n        default=None,\n        description=\"The ID of referenced registry when the project is a proxy cache project.\",\n    )\n    creation_time: Optional[datetime] = Field(\n        default=None, description=\"The creation time of the project.\"\n    )\n    update_time: Optional[datetime] = Field(\n        default=None, description=\"The update time of the project.\"\n    )\n    deleted: Optional[bool] = Field(\n        default=None, description=\"A deletion mark of the project.\"\n    )\n    owner_name: Optional[str] = Field(\n        default=None, description=\"The owner name of the project.\"\n    )\n    togglable: Optional[bool] = Field(\n        default=None,\n        description=\"Correspond to the UI about whether the project's publicity is  updatable (for UI)\",\n    )\n    current_user_role_id: Optional[int] = Field(\n        default=None,\n        description=\"The role ID with highest permission of the current user who triggered the API (for UI).  This attribute is deprecated and will be removed in future versions.\",\n    )\n    current_user_role_ids: Optional[List[int]] = Field(\n        default=None,\n        description=\"The list of role ID of the current user who triggered the API (for UI)\",\n    )\n    repo_count: Optional[int] = Field(\n        default=None, description=\"The number of the repositories under this project.\"\n    )\n    metadata: Optional[ProjectMetadata] = None\n    cve_allowlist: Optional[CVEAllowlist] = None\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.Project.project_id", "title": "<code>project_id = Field(default=None, description='Project ID')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Project.owner_id", "title": "<code>owner_id = Field(default=None, description='The owner ID of the project always means the creator of the project.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Project.name", "title": "<code>name = Field(default=None, description='The name of the project.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Project.registry_id", "title": "<code>registry_id = Field(default=None, description='The ID of referenced registry when the project is a proxy cache project.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Project.creation_time", "title": "<code>creation_time = Field(default=None, description='The creation time of the project.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Project.update_time", "title": "<code>update_time = Field(default=None, description='The update time of the project.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Project.deleted", "title": "<code>deleted = Field(default=None, description='A deletion mark of the project.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Project.owner_name", "title": "<code>owner_name = Field(default=None, description='The owner name of the project.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Project.togglable", "title": "<code>togglable = Field(default=None, description=\"Correspond to the UI about whether the project's publicity is  updatable (for UI)\")</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Project.current_user_role_id", "title": "<code>current_user_role_id = Field(default=None, description='The role ID with highest permission of the current user who triggered the API (for UI).  This attribute is deprecated and will be removed in future versions.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Project.current_user_role_ids", "title": "<code>current_user_role_ids = Field(default=None, description='The list of role ID of the current user who triggered the API (for UI)')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Project.repo_count", "title": "<code>repo_count = Field(default=None, description='The number of the repositories under this project.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Project.metadata", "title": "<code>metadata = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Project.cve_allowlist", "title": "<code>cve_allowlist = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ProjectSummary", "title": "<code>ProjectSummary</code>", "text": "Source code in <code>harborapi/models/models.py</code> <pre><code>class ProjectSummary(BaseModel):\n    repo_count: Optional[int] = Field(\n        default=None, description=\"The number of the repositories under this project.\"\n    )\n    project_admin_count: Optional[int] = Field(\n        default=None, description=\"The total number of project admin members.\"\n    )\n    maintainer_count: Optional[int] = Field(\n        default=None, description=\"The total number of maintainer members.\"\n    )\n    developer_count: Optional[int] = Field(\n        default=None, description=\"The total number of developer members.\"\n    )\n    guest_count: Optional[int] = Field(\n        default=None, description=\"The total number of guest members.\"\n    )\n    limited_guest_count: Optional[int] = Field(\n        default=None, description=\"The total number of limited guest members.\"\n    )\n    quota: Optional[ProjectSummaryQuota] = None\n    registry: Optional[Registry] = None\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.ProjectSummary.repo_count", "title": "<code>repo_count = Field(default=None, description='The number of the repositories under this project.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ProjectSummary.project_admin_count", "title": "<code>project_admin_count = Field(default=None, description='The total number of project admin members.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ProjectSummary.maintainer_count", "title": "<code>maintainer_count = Field(default=None, description='The total number of maintainer members.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ProjectSummary.developer_count", "title": "<code>developer_count = Field(default=None, description='The total number of developer members.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ProjectSummary.guest_count", "title": "<code>guest_count = Field(default=None, description='The total number of guest members.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ProjectSummary.limited_guest_count", "title": "<code>limited_guest_count = Field(default=None, description='The total number of limited guest members.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ProjectSummary.quota", "title": "<code>quota = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ProjectSummary.registry", "title": "<code>registry = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ReplicationPolicy", "title": "<code>ReplicationPolicy</code>", "text": "Source code in <code>harborapi/models/models.py</code> <pre><code>class ReplicationPolicy(BaseModel):\n    id: Optional[int] = Field(default=None, description=\"The policy ID.\")\n    name: Optional[str] = Field(default=None, description=\"The policy name.\")\n    description: Optional[str] = Field(\n        default=None, description=\"The description of the policy.\"\n    )\n    src_registry: Optional[Registry] = None\n    dest_registry: Optional[Registry] = None\n    dest_namespace: Optional[str] = Field(\n        default=None, description=\"The destination namespace.\"\n    )\n    dest_namespace_replace_count: Optional[int] = Field(\n        default=None,\n        description=\"Specify how many path components will be replaced by the provided destination namespace.\\nThe default value is -1 in which case the legacy mode will be applied.\",\n    )\n    trigger: Optional[ReplicationTrigger] = None\n    filters: Optional[List[ReplicationFilter]] = Field(\n        default=None, description=\"The replication policy filter array.\"\n    )\n    replicate_deletion: Optional[bool] = Field(\n        default=None, description=\"Whether to replicate the deletion operation.\"\n    )\n    deletion: Optional[bool] = Field(\n        default=None,\n        description='Deprecated, use \"replicate_deletion\" instead. Whether to replicate the deletion operation.',\n    )\n    override: Optional[bool] = Field(\n        default=None,\n        description=\"Whether to override the resources on the destination registry.\",\n    )\n    enabled: Optional[bool] = Field(\n        default=None, description=\"Whether the policy is enabled or not.\"\n    )\n    creation_time: Optional[datetime] = Field(\n        default=None, description=\"The create time of the policy.\"\n    )\n    update_time: Optional[datetime] = Field(\n        default=None, description=\"The update time of the policy.\"\n    )\n    speed: Optional[int] = Field(default=None, description=\"speed limit for each task\")\n    copy_by_chunk: Optional[bool] = Field(\n        default=None, description=\"Whether to enable copy by chunk.\"\n    )\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.ReplicationPolicy.id", "title": "<code>id = Field(default=None, description='The policy ID.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ReplicationPolicy.name", "title": "<code>name = Field(default=None, description='The policy name.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ReplicationPolicy.description", "title": "<code>description = Field(default=None, description='The description of the policy.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ReplicationPolicy.src_registry", "title": "<code>src_registry = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ReplicationPolicy.dest_registry", "title": "<code>dest_registry = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ReplicationPolicy.dest_namespace", "title": "<code>dest_namespace = Field(default=None, description='The destination namespace.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ReplicationPolicy.dest_namespace_replace_count", "title": "<code>dest_namespace_replace_count = Field(default=None, description='Specify how many path components will be replaced by the provided destination namespace.\\nThe default value is -1 in which case the legacy mode will be applied.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ReplicationPolicy.trigger", "title": "<code>trigger = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ReplicationPolicy.filters", "title": "<code>filters = Field(default=None, description='The replication policy filter array.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ReplicationPolicy.replicate_deletion", "title": "<code>replicate_deletion = Field(default=None, description='Whether to replicate the deletion operation.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ReplicationPolicy.deletion", "title": "<code>deletion = Field(default=None, description='Deprecated, use \"replicate_deletion\" instead. Whether to replicate the deletion operation.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ReplicationPolicy.override", "title": "<code>override = Field(default=None, description='Whether to override the resources on the destination registry.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ReplicationPolicy.enabled", "title": "<code>enabled = Field(default=None, description='Whether the policy is enabled or not.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ReplicationPolicy.creation_time", "title": "<code>creation_time = Field(default=None, description='The create time of the policy.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ReplicationPolicy.update_time", "title": "<code>update_time = Field(default=None, description='The update time of the policy.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ReplicationPolicy.speed", "title": "<code>speed = Field(default=None, description='speed limit for each task')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.ReplicationPolicy.copy_by_chunk", "title": "<code>copy_by_chunk = Field(default=None, description='Whether to enable copy by chunk.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RegistryProviderInfo", "title": "<code>RegistryProviderInfo</code>", "text": "<p>Registry provider information, including base info and capabilities.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class RegistryProviderInfo(BaseModel):\n    \"\"\"Registry provider information, including base info and capabilities.\"\"\"\n\n    endpoint_pattern: Optional[RegistryProviderEndpointPattern] = None\n    credential_pattern: Optional[RegistryProviderCredentialPattern] = None\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.RegistryProviderInfo.endpoint_pattern", "title": "<code>endpoint_pattern = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RegistryProviderInfo.credential_pattern", "title": "<code>credential_pattern = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Robot", "title": "<code>Robot</code>", "text": "Source code in <code>harborapi/models/models.py</code> <pre><code>class Robot(BaseModel):\n    id: Optional[int] = Field(default=None, description=\"The ID of the robot\")\n    name: Optional[str] = Field(default=None, description=\"The name of the robot\")\n    description: Optional[str] = Field(\n        default=None, description=\"The description of the robot\"\n    )\n    secret: Optional[str] = Field(default=None, description=\"The secret of the robot\")\n    level: Optional[str] = Field(\n        default=None, description=\"The level of the robot, project or system\"\n    )\n    duration: Optional[int] = Field(\n        default=None,\n        description=\"The duration of the robot in days, duration must be either -1(Never) or a positive integer\",\n    )\n    editable: Optional[bool] = Field(\n        default=None, description=\"The editable status of the robot\"\n    )\n    disable: Optional[bool] = Field(\n        default=None, description=\"The disable status of the robot\"\n    )\n    expires_at: Optional[int] = Field(\n        default=None, description=\"The expiration date of the robot\"\n    )\n    permissions: Optional[List[RobotPermission]] = None\n    creator_type: Optional[str] = Field(\n        default=None,\n        description=\"The type of the robot creator, like local(harbor_user) or robot.\",\n    )\n    creator_ref: Optional[int] = Field(\n        default=None,\n        description=\"The reference of the robot creator, like the id of harbor user.\",\n    )\n    creation_time: Optional[datetime] = Field(\n        default=None, description=\"The creation time of the robot.\"\n    )\n    update_time: Optional[datetime] = Field(\n        default=None, description=\"The update time of the robot.\"\n    )\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.Robot.id", "title": "<code>id = Field(default=None, description='The ID of the robot')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Robot.name", "title": "<code>name = Field(default=None, description='The name of the robot')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Robot.description", "title": "<code>description = Field(default=None, description='The description of the robot')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Robot.secret", "title": "<code>secret = Field(default=None, description='The secret of the robot')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Robot.level", "title": "<code>level = Field(default=None, description='The level of the robot, project or system')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Robot.duration", "title": "<code>duration = Field(default=None, description='The duration of the robot in days, duration must be either -1(Never) or a positive integer')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Robot.editable", "title": "<code>editable = Field(default=None, description='The editable status of the robot')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Robot.disable", "title": "<code>disable = Field(default=None, description='The disable status of the robot')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Robot.expires_at", "title": "<code>expires_at = Field(default=None, description='The expiration date of the robot')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Robot.permissions", "title": "<code>permissions = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Robot.creator_type", "title": "<code>creator_type = Field(default=None, description='The type of the robot creator, like local(harbor_user) or robot.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Robot.creator_ref", "title": "<code>creator_ref = Field(default=None, description='The reference of the robot creator, like the id of harbor user.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Robot.creation_time", "title": "<code>creation_time = Field(default=None, description='The creation time of the robot.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Robot.update_time", "title": "<code>update_time = Field(default=None, description='The update time of the robot.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RobotCreate", "title": "<code>RobotCreate</code>", "text": "<p>Request for robot account creation.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class RobotCreate(BaseModel):\n    \"\"\"Request for robot account creation.\"\"\"\n\n    name: Optional[str] = Field(default=None, description=\"The name of the robot\")\n    description: Optional[str] = Field(\n        default=None, description=\"The description of the robot\"\n    )\n    secret: Optional[str] = Field(default=None, description=\"The secret of the robot\")\n    level: Optional[str] = Field(\n        default=None, description=\"The level of the robot, project or system\"\n    )\n    disable: Optional[bool] = Field(\n        default=None, description=\"The disable status of the robot\"\n    )\n    duration: Optional[int] = Field(\n        default=None,\n        description=\"The duration of the robot in days, duration must be either -1(Never) or a positive integer\",\n    )\n    permissions: Optional[List[RobotPermission]] = None\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.RobotCreate.name", "title": "<code>name = Field(default=None, description='The name of the robot')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RobotCreate.description", "title": "<code>description = Field(default=None, description='The description of the robot')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RobotCreate.secret", "title": "<code>secret = Field(default=None, description='The secret of the robot')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RobotCreate.level", "title": "<code>level = Field(default=None, description='The level of the robot, project or system')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RobotCreate.disable", "title": "<code>disable = Field(default=None, description='The disable status of the robot')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RobotCreate.duration", "title": "<code>duration = Field(default=None, description='The duration of the robot in days, duration must be either -1(Never) or a positive integer')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RobotCreate.permissions", "title": "<code>permissions = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RetentionMetadata", "title": "<code>RetentionMetadata</code>", "text": "<p>Metadata for a tag retention rule.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class RetentionMetadata(BaseModel):\n    \"\"\"Metadata for a tag retention rule.\"\"\"\n\n    templates: Optional[List[RetentionRuleMetadata]] = Field(\n        default=None, description=\"templates\"\n    )\n    scope_selectors: Optional[List[RetentionSelectorMetadata]] = Field(\n        default=None, description=\"supported scope selectors\"\n    )\n    tag_selectors: Optional[List[RetentionSelectorMetadata]] = Field(\n        default=None, description=\"supported tag selectors\"\n    )\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.RetentionMetadata.templates", "title": "<code>templates = Field(default=None, description='templates')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RetentionMetadata.scope_selectors", "title": "<code>scope_selectors = Field(default=None, description='supported scope selectors')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RetentionMetadata.tag_selectors", "title": "<code>tag_selectors = Field(default=None, description='supported tag selectors')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RetentionPolicy", "title": "<code>RetentionPolicy</code>", "text": "<p>Retention policy.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class RetentionPolicy(BaseModel):\n    \"\"\"Retention policy.\"\"\"\n\n    id: Optional[int] = None\n    algorithm: Optional[str] = None\n    rules: Optional[List[RetentionRule]] = None\n    trigger: Optional[RetentionRuleTrigger] = None\n    scope: Optional[RetentionPolicyScope] = None\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.RetentionPolicy.id", "title": "<code>id = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RetentionPolicy.algorithm", "title": "<code>algorithm = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RetentionPolicy.rules", "title": "<code>rules = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RetentionPolicy.trigger", "title": "<code>trigger = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.RetentionPolicy.scope", "title": "<code>scope = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Search", "title": "<code>Search</code>", "text": "Source code in <code>harborapi/models/models.py</code> <pre><code>class Search(BaseModel):\n    project: Optional[List[Project]] = Field(\n        default=None,\n        description=\"Search results of the projects that matched the filter keywords.\",\n    )\n    repository: Optional[List[SearchRepository]] = Field(\n        default=None,\n        description=\"Search results of the repositories that matched the filter keywords.\",\n    )\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.Search.project", "title": "<code>project = Field(default=None, description='Search results of the projects that matched the filter keywords.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Search.repository", "title": "<code>repository = Field(default=None, description='Search results of the repositories that matched the filter keywords.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Artifact", "title": "<code>Artifact</code>", "text": "Source code in <code>harborapi/models/models.py</code> <pre><code>class Artifact(BaseModel):\n    id: Optional[int] = Field(default=None, description=\"The ID of the artifact\")\n    type: Optional[str] = Field(\n        default=None, description=\"The type of the artifact, e.g. image, chart, etc\"\n    )\n    media_type: Optional[str] = Field(\n        default=None, description=\"The media type of the artifact\"\n    )\n    manifest_media_type: Optional[str] = Field(\n        default=None, description=\"The manifest media type of the artifact\"\n    )\n    artifact_type: Optional[str] = Field(\n        default=None, description=\"The artifact_type in the manifest of the artifact\"\n    )\n    project_id: Optional[int] = Field(\n        default=None, description=\"The ID of the project that the artifact belongs to\"\n    )\n    repository_id: Optional[int] = Field(\n        default=None,\n        description=\"The ID of the repository that the artifact belongs to\",\n    )\n    repository_name: Optional[str] = Field(\n        default=None,\n        description=\"The name of the repository that the artifact belongs to\",\n    )\n    digest: Optional[str] = Field(\n        default=None, description=\"The digest of the artifact\"\n    )\n    size: Optional[int] = Field(default=None, description=\"The size of the artifact\")\n    icon: Optional[str] = Field(default=None, description=\"The digest of the icon\")\n    push_time: Optional[datetime] = Field(\n        default=None, description=\"The push time of the artifact\"\n    )\n    pull_time: Optional[datetime] = Field(\n        default=None, description=\"The latest pull time of the artifact\"\n    )\n    extra_attrs: Optional[ExtraAttrs] = None\n    annotations: Optional[Annotations] = None\n    references: Optional[List[Reference]] = None\n    tags: Optional[List[Tag]] = None\n    addition_links: Optional[AdditionLinks] = None\n    labels: Optional[List[Label]] = None\n    scan_overview: Optional[ScanOverview] = None\n    sbom_overview: Optional[SBOMOverview] = None\n    accessories: Optional[List[Accessory]] = None\n\n    @property\n    def scan(self) -&gt; Optional[NativeReportSummary]:\n        \"\"\"\n        Returns the first scan overview found for the Artifact,\n        or None if there are none.\n\n        Artifacts are typically scanned in a single format, represented\n        by its MIME type. Thus, most Artifacts will have only one\n        scan overview. This property provides a quick access to it.\n        \"\"\"\n        if self.scan_overview and self.scan_overview.root:\n            return self.scan_overview.root[next(iter(self.scan_overview))]\n        return None\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.Artifact.id", "title": "<code>id = Field(default=None, description='The ID of the artifact')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Artifact.type", "title": "<code>type = Field(default=None, description='The type of the artifact, e.g. image, chart, etc')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Artifact.media_type", "title": "<code>media_type = Field(default=None, description='The media type of the artifact')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Artifact.manifest_media_type", "title": "<code>manifest_media_type = Field(default=None, description='The manifest media type of the artifact')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Artifact.artifact_type", "title": "<code>artifact_type = Field(default=None, description='The artifact_type in the manifest of the artifact')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Artifact.project_id", "title": "<code>project_id = Field(default=None, description='The ID of the project that the artifact belongs to')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Artifact.repository_id", "title": "<code>repository_id = Field(default=None, description='The ID of the repository that the artifact belongs to')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Artifact.repository_name", "title": "<code>repository_name = Field(default=None, description='The name of the repository that the artifact belongs to')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Artifact.digest", "title": "<code>digest = Field(default=None, description='The digest of the artifact')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Artifact.size", "title": "<code>size = Field(default=None, description='The size of the artifact')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Artifact.icon", "title": "<code>icon = Field(default=None, description='The digest of the icon')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Artifact.push_time", "title": "<code>push_time = Field(default=None, description='The push time of the artifact')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Artifact.pull_time", "title": "<code>pull_time = Field(default=None, description='The latest pull time of the artifact')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Artifact.extra_attrs", "title": "<code>extra_attrs = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Artifact.annotations", "title": "<code>annotations = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Artifact.references", "title": "<code>references = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Artifact.tags", "title": "<code>tags = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Artifact.addition_links", "title": "<code>addition_links = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Artifact.labels", "title": "<code>labels = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Artifact.scan_overview", "title": "<code>scan_overview = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Artifact.sbom_overview", "title": "<code>sbom_overview = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Artifact.accessories", "title": "<code>accessories = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_models/#harborapi.models._models.Artifact.scan", "title": "<code>scan</code>  <code>property</code>", "text": "<p>Returns the first scan overview found for the Artifact, or None if there are none.</p> <p>Artifacts are typically scanned in a single format, represented by its MIME type. Thus, most Artifacts will have only one scan overview. This property provides a quick access to it.</p>"}, {"location": "reference/models/_models/#harborapi.models._models.RegistryProviders", "title": "<code>RegistryProviders</code>", "text": "Source code in <code>harborapi/models/models.py</code> <pre><code>class RegistryProviders(RootModel[Dict[str, RegistryProviderInfo]]):\n    root: Dict[str, RegistryProviderInfo] = Field(\n        default={},\n        description=\"The registry providers. Each key is the name of the registry provider.\",\n    )\n</code></pre>"}, {"location": "reference/models/_models/#harborapi.models._models.RegistryProviders.root", "title": "<code>root = Field(default={}, description='The registry providers. Each key is the name of the registry provider.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_scanner/", "title": "harborapi.models._scanner", "text": "<p>These models have been generated from the official Harbor Pluggable Scanner Spec OpenAPI 3.0 Schema using datamodel-code-generator version 0.13.0.</p> <p>DEPRECATED: This module will be removed in a future version. Module kept only for backwards compatibility with old code generation scheme.</p>"}, {"location": "reference/models/_scanner/#harborapi.models._scanner.logger", "title": "<code>logger = logging.getLogger('harborapi')</code>  <code>module-attribute</code>", "text": ""}, {"location": "reference/models/_scanner/#harborapi.models._scanner.DEFAULT_VENDORS", "title": "<code>DEFAULT_VENDORS = ('nvd', 'redhat')</code>  <code>module-attribute</code>", "text": ""}, {"location": "reference/models/_scanner/#harborapi.models._scanner.SEVERITY_PRIORITY", "title": "<code>SEVERITY_PRIORITY = {Severity.none: 0, Severity.unknown: 1, Severity.negligible: 2, Severity.low: 3, Severity.medium: 4, Severity.high: 5, Severity.critical: 6}</code>  <code>module-attribute</code>", "text": ""}, {"location": "reference/models/_scanner/#harborapi.models._scanner.SemVer", "title": "<code>SemVer</code>", "text": "Source code in <code>harborapi/version.py</code> <pre><code>class SemVer(NamedTuple):\n    major: int\n    minor: int = 0\n    patch: int = 0\n    prerelease: Optional[str] = None\n    build: Optional[str] = None\n\n    def __bool__(self) -&gt; bool:\n        return bool(self.major or self.minor or self.patch)\n\n    def __eq__(self, other: object) -&gt; bool:\n        if not isinstance(other, SemVer):\n            raise TypeError(f\"Cannot compare {type(self)} with {type(other)}\")\n        other = get_semver(other)\n        return (\n            self.major == other.major\n            and self.minor == other.minor\n            and self.patch == other.patch\n            and self.prerelease == other.prerelease\n            and self.build == other.build\n        )\n\n    def __gt__(self, other: object) -&gt; bool:\n        if not isinstance(other, SemVer):\n            raise TypeError(f\"Cannot compare {type(self)} with {type(other)}\")\n        other = get_semver(other)\n        if self.major &gt; other.major:\n            return True\n        if self.major &lt; other.major:\n            return False\n        if self.minor &gt; other.minor:\n            return True\n        if self.minor &lt; other.minor:\n            return False\n        if self.patch &gt; other.patch:\n            return True\n        if self.patch &lt; other.patch:\n            return False\n        # A non-prerelease version is always greater than a prerelease version\n        if self.prerelease is None and other.prerelease is not None:\n            return True\n        return False\n\n    def __ge__(self, other: object) -&gt; bool:\n        if not isinstance(other, SemVer):\n            raise TypeError(f\"Cannot compare {type(self)} with {type(other)}\")\n        other = get_semver(other)\n        return self &gt; other or self == other\n\n    def __le__(self, other: object) -&gt; bool:\n        if not isinstance(other, SemVer):\n            raise TypeError(f\"Cannot compare {type(self)} with {type(other)}\")\n        other = get_semver(other)\n        return (not self &gt; other) or self == other\n\n    def __lt__(self, other: object) -&gt; bool:\n        if not isinstance(other, SemVer):\n            raise TypeError(f\"Cannot compare {type(self)} with {type(other)}\")\n        other = get_semver(other)\n        if (\n            self.build != other.build\n        ):  # we don't care about build equality for less than\n            other = SemVer(other.major, other.minor, other.patch, other.prerelease)\n        return not self &gt;= other\n</code></pre>"}, {"location": "reference/models/_scanner/#harborapi.models._scanner.SemVer.major", "title": "<code>major</code>  <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_scanner/#harborapi.models._scanner.SemVer.minor", "title": "<code>minor = 0</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_scanner/#harborapi.models._scanner.SemVer.patch", "title": "<code>patch = 0</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_scanner/#harborapi.models._scanner.SemVer.prerelease", "title": "<code>prerelease = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_scanner/#harborapi.models._scanner.SemVer.build", "title": "<code>build = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_scanner/#harborapi.models._scanner.SemVer.__bool__", "title": "<code>__bool__()</code>", "text": "Source code in <code>harborapi/version.py</code> <pre><code>def __bool__(self) -&gt; bool:\n    return bool(self.major or self.minor or self.patch)\n</code></pre>"}, {"location": "reference/models/_scanner/#harborapi.models._scanner.SemVer.__eq__", "title": "<code>__eq__(other)</code>", "text": "Source code in <code>harborapi/version.py</code> <pre><code>def __eq__(self, other: object) -&gt; bool:\n    if not isinstance(other, SemVer):\n        raise TypeError(f\"Cannot compare {type(self)} with {type(other)}\")\n    other = get_semver(other)\n    return (\n        self.major == other.major\n        and self.minor == other.minor\n        and self.patch == other.patch\n        and self.prerelease == other.prerelease\n        and self.build == other.build\n    )\n</code></pre>"}, {"location": "reference/models/_scanner/#harborapi.models._scanner.SemVer.__gt__", "title": "<code>__gt__(other)</code>", "text": "Source code in <code>harborapi/version.py</code> <pre><code>def __gt__(self, other: object) -&gt; bool:\n    if not isinstance(other, SemVer):\n        raise TypeError(f\"Cannot compare {type(self)} with {type(other)}\")\n    other = get_semver(other)\n    if self.major &gt; other.major:\n        return True\n    if self.major &lt; other.major:\n        return False\n    if self.minor &gt; other.minor:\n        return True\n    if self.minor &lt; other.minor:\n        return False\n    if self.patch &gt; other.patch:\n        return True\n    if self.patch &lt; other.patch:\n        return False\n    # A non-prerelease version is always greater than a prerelease version\n    if self.prerelease is None and other.prerelease is not None:\n        return True\n    return False\n</code></pre>"}, {"location": "reference/models/_scanner/#harborapi.models._scanner.SemVer.__ge__", "title": "<code>__ge__(other)</code>", "text": "Source code in <code>harborapi/version.py</code> <pre><code>def __ge__(self, other: object) -&gt; bool:\n    if not isinstance(other, SemVer):\n        raise TypeError(f\"Cannot compare {type(self)} with {type(other)}\")\n    other = get_semver(other)\n    return self &gt; other or self == other\n</code></pre>"}, {"location": "reference/models/_scanner/#harborapi.models._scanner.SemVer.__le__", "title": "<code>__le__(other)</code>", "text": "Source code in <code>harborapi/version.py</code> <pre><code>def __le__(self, other: object) -&gt; bool:\n    if not isinstance(other, SemVer):\n        raise TypeError(f\"Cannot compare {type(self)} with {type(other)}\")\n    other = get_semver(other)\n    return (not self &gt; other) or self == other\n</code></pre>"}, {"location": "reference/models/_scanner/#harborapi.models._scanner.SemVer.__lt__", "title": "<code>__lt__(other)</code>", "text": "Source code in <code>harborapi/version.py</code> <pre><code>def __lt__(self, other: object) -&gt; bool:\n    if not isinstance(other, SemVer):\n        raise TypeError(f\"Cannot compare {type(self)} with {type(other)}\")\n    other = get_semver(other)\n    if (\n        self.build != other.build\n    ):  # we don't care about build equality for less than\n        other = SemVer(other.major, other.minor, other.patch, other.prerelease)\n    return not self &gt;= other\n</code></pre>"}, {"location": "reference/models/_scanner/#harborapi.models._scanner.BaseModel", "title": "<code>BaseModel</code>", "text": "Source code in <code>harborapi/models/base.py</code> <pre><code>class BaseModel(PydanticBaseModel):\n    model_config = ConfigDict(extra=\"allow\", validate_assignment=True, strict=False)\n\n    # Validators\n\n    # The __rich* properties are only used by methods defined when Rich\n    # is installed, but they are defined here, so that static typing works\n    # when overriding the properties in subclasses.\n    @property\n    def __rich_table_title__(self) -&gt; str:\n        \"\"\"The title to use for the table representation of the model.\n        By default, the model's class name is be used.\n        \"\"\"\n        try:\n            title = self.__name__\n            assert isinstance(title, str)\n        except (AttributeError, AssertionError):\n            title = self.__class__.__name__\n        return title\n\n    @property\n    def __rich_panel_title__(self) -&gt; Optional[str]:\n        \"\"\"Title of the panel that wraps the table representation of the model.\"\"\"\n        return None\n\n    def convert_to(\n        self, model: Type[BaseModelType], extra: bool = False\n    ) -&gt; BaseModelType:\n        \"\"\"Converts the model to a different model type.\n\n        By default, only fields that are defined in the destination model\n        are included in the converted model.\n\n        Parameters\n        ----------\n        model : Type[BaseModelType]\n            The model type to convert to.\n        extra : bool\n            Whether to include fields that are not defined in the destination model.\n\n        Returns\n        -------\n        BaseModelType\n            The converted model.\n        \"\"\"\n        # TODO: include mapping of source fields to destination fields\n        # e.g. Project.name -&gt; ProjectReq.project_name\n        # pass in mapping: {\"name\": \"project_name\"}\n        if extra:\n            include = None\n        else:\n            include = model.get_model_fields()\n        return model.model_validate(self.model_dump(include=include))\n\n    @classmethod\n    def get_model_fields(cls) -&gt; Set[str]:\n        \"\"\"Get a list of the names of the model's fields.\n\n        Returns\n        -------\n        List[str]\n            The names of the model's fields.\n        \"\"\"\n        return set(cls.model_fields)\n\n    if rich_installed:\n\n        def __rich_console__(\n            self, console: Console, options: ConsoleOptions\n        ) -&gt; RenderResult:\n            \"\"\"Rich console representation of the model.\n            Returns a panel containing tables representing the model's\n            fields and values.\n            If the model has a nested model, the nested model's table representation\n            is printed after the main table.\n\n            See: https://rich.readthedocs.io/en/latest/protocol.html#console-render\n            \"\"\"\n            yield self.as_panel(with_description=False)\n\n        def as_panel(self, title: Optional[str] = None, **kwargs: Any) -&gt; Panel:\n            \"\"\"Returns table representation of model wrapped in a Panel.\n            Passes all keyword arguments to `as_table`.\n\n            Returns\n            -------\n            Panel\n                A Rich panel containing the table representation of the model.\n            \"\"\"\n            title = title or self.__rich_panel_title__\n            return Panel(Group(*self.as_table(**kwargs)), title=title)\n\n        def as_table(\n            self,\n            with_description: bool = False,\n            max_depth: Optional[int] = None,\n            parent_field: Optional[str] = None,\n            _depth: int = 1,\n        ) -&gt; Iterable[Table]:\n            \"\"\"Returns a Rich table representation of the model, and any nested models.\n\n            Parameters\n            ----------\n            with_description : bool\n                Whether to include the description of the model fields.\n            max_depth : Optional[int]\n                The maximum depth to print nested models.\n                `None` means no limit.\n            parent_field : Optional[str]\n                The title of the parent field that contains this model.\n                Used when printing submodels.\n            _depth : int\n                DO NOT SET THIS.\n                This is used internally to track the current depth level.\n\n            Returns\n            -------\n            Iterable[Table]\n                A generator of Rich tables representing the model and any nested models.\n            \"\"\"\n            # VOCABULARY:\n            # \"field\" -&gt; a field in the model spec\n            # \"field name\" -&gt; the name of the field in the model spec\n            # \"submodel\" -&gt; a nested model\n            # \"submodel table\" -&gt; the table representation of a nested model\n\n            # None and n &lt;= 0 means no limit to recursion depth\n            if max_depth is not None and max_depth &lt;= 0:\n                max_depth = None\n\n            # TODO: add list index indicator for list fields\n            if not parent_field:\n                title = type(self).__qualname__\n            else:\n                title = f\"{parent_field}\"\n\n            columns = [\n                Column(\n                    header=\"Field\", justify=\"left\", style=\"green\", header_style=\"bold\"\n                ),\n                Column(header=\"Value\", style=\"blue\", justify=\"left\", overflow=\"fold\"),\n            ]\n            if with_description:\n                columns.append(\n                    Column(header=\"Description\", style=\"yellow\", justify=\"left\"),\n                )\n\n            table = Table(\n                title=f\"[bold]{title}[/bold]\",\n                title_style=DEPTH_TITLE_COLORS.get(_depth, \"magenta\"),\n                title_justify=\"left\",\n                expand=True,\n                *columns,\n            )\n\n            subtables = []  # type: list[Iterable[Table]]\n\n            def add_submodel_table(field_title: str, submodel: \"BaseModel\") -&gt; str:\n                \"\"\"Adds a submodel table to the subtables list.\"\"\"\n                if parent_field:\n                    pfield = f\"{parent_field}.{field_title}\"\n                else:\n                    pfield = f\"{type(self).__qualname__}.{field_title}\"\n                submodel_table = submodel.as_table(\n                    with_description=with_description,\n                    max_depth=max_depth,\n                    _depth=_depth + 1,\n                    parent_field=pfield,\n                )\n                subtables.append(submodel_table)\n                return pfield\n\n            # Iterate over self to get model fields + extra fields\n            for field_name, value in super(BaseModel, self).__iter__():\n                # Prioritize getting field info from __fields__ dict\n                # since this dict contains more metadata for the field\n                field = self.model_fields.get(field_name)\n                if field is not None:\n                    # Try to use field title if available\n                    field_title = str(field.title or field_name)\n                    # Get the field value\n                    value = getattr(self, field_name)\n                    description = str(field.description) or \"\"\n                else:\n                    field_title = field_name\n                    description = \"\"\n\n                submodels = []  # type: Iterable[BaseModel]\n                if isinstance(value, BaseModel):\n                    submodels = [value]\n                elif isinstance(value, Iterable):\n                    if all(isinstance(v, BaseModel) for v in value):\n                        submodels = value\n\n                # Only print the submodel table if we are not at the max depth\n                # If we don't enter this, we print the string representation of the\n                # submodel(s) in the main table.\n                if submodels and (max_depth is None or _depth &lt; max_depth):\n                    # consume iterable immediately so we can get table title\n                    # It's likely this is NOT a generator, but we don't want to\n                    # assume that.\n                    submodels = list(submodels)\n                    table_title = \"\"\n                    for submodel in submodels:\n                        table_title = add_submodel_table(field_title, submodel)\n                    value = f\"[bold]See below ({table_title})[/bold]\"\n\n                row = [field_title, str(value)]\n                if with_description:\n                    row.append(description)\n                table.add_row(*row)\n\n            # TODO: sort table rows by field name\n\n            yield table\n            for subtable in subtables:\n                yield from subtable\n</code></pre>"}, {"location": "reference/models/_scanner/#harborapi.models._scanner.BaseModel.model_config", "title": "<code>model_config = ConfigDict(extra='allow', validate_assignment=True, strict=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_scanner/#harborapi.models._scanner.BaseModel.__rich_table_title__", "title": "<code>__rich_table_title__</code>  <code>property</code>", "text": "<p>The title to use for the table representation of the model. By default, the model's class name is be used.</p>"}, {"location": "reference/models/_scanner/#harborapi.models._scanner.BaseModel.__rich_panel_title__", "title": "<code>__rich_panel_title__</code>  <code>property</code>", "text": "<p>Title of the panel that wraps the table representation of the model.</p>"}, {"location": "reference/models/_scanner/#harborapi.models._scanner.BaseModel.convert_to", "title": "<code>convert_to(model, extra=False)</code>", "text": "<p>Converts the model to a different model type.</p> <p>By default, only fields that are defined in the destination model are included in the converted model.</p> <p>Parameters:</p> Name Type Description Default <code>model</code> <code>Type[BaseModelType]</code> <p>The model type to convert to.</p> required <code>extra</code> <code>bool</code> <p>Whether to include fields that are not defined in the destination model.</p> <code>False</code> <p>Returns:</p> Type Description <code>BaseModelType</code> <p>The converted model.</p> Source code in <code>harborapi/models/base.py</code> <pre><code>def convert_to(\n    self, model: Type[BaseModelType], extra: bool = False\n) -&gt; BaseModelType:\n    \"\"\"Converts the model to a different model type.\n\n    By default, only fields that are defined in the destination model\n    are included in the converted model.\n\n    Parameters\n    ----------\n    model : Type[BaseModelType]\n        The model type to convert to.\n    extra : bool\n        Whether to include fields that are not defined in the destination model.\n\n    Returns\n    -------\n    BaseModelType\n        The converted model.\n    \"\"\"\n    # TODO: include mapping of source fields to destination fields\n    # e.g. Project.name -&gt; ProjectReq.project_name\n    # pass in mapping: {\"name\": \"project_name\"}\n    if extra:\n        include = None\n    else:\n        include = model.get_model_fields()\n    return model.model_validate(self.model_dump(include=include))\n</code></pre>"}, {"location": "reference/models/_scanner/#harborapi.models._scanner.BaseModel.get_model_fields", "title": "<code>get_model_fields()</code>  <code>classmethod</code>", "text": "<p>Get a list of the names of the model's fields.</p> <p>Returns:</p> Type Description <code>List[str]</code> <p>The names of the model's fields.</p> Source code in <code>harborapi/models/base.py</code> <pre><code>@classmethod\ndef get_model_fields(cls) -&gt; Set[str]:\n    \"\"\"Get a list of the names of the model's fields.\n\n    Returns\n    -------\n    List[str]\n        The names of the model's fields.\n    \"\"\"\n    return set(cls.model_fields)\n</code></pre>"}, {"location": "reference/models/_scanner/#harborapi.models._scanner.BaseModel.__rich_console__", "title": "<code>__rich_console__(console, options)</code>", "text": "<p>Rich console representation of the model. Returns a panel containing tables representing the model's fields and values. If the model has a nested model, the nested model's table representation is printed after the main table.</p> <p>See: https://rich.readthedocs.io/en/latest/protocol.html#console-render</p> Source code in <code>harborapi/models/base.py</code> <pre><code>def __rich_console__(\n    self, console: Console, options: ConsoleOptions\n) -&gt; RenderResult:\n    \"\"\"Rich console representation of the model.\n    Returns a panel containing tables representing the model's\n    fields and values.\n    If the model has a nested model, the nested model's table representation\n    is printed after the main table.\n\n    See: https://rich.readthedocs.io/en/latest/protocol.html#console-render\n    \"\"\"\n    yield self.as_panel(with_description=False)\n</code></pre>"}, {"location": "reference/models/_scanner/#harborapi.models._scanner.BaseModel.as_panel", "title": "<code>as_panel(title=None, **kwargs)</code>", "text": "<p>Returns table representation of model wrapped in a Panel. Passes all keyword arguments to <code>as_table</code>.</p> <p>Returns:</p> Type Description <code>Panel</code> <p>A Rich panel containing the table representation of the model.</p> Source code in <code>harborapi/models/base.py</code> <pre><code>def as_panel(self, title: Optional[str] = None, **kwargs: Any) -&gt; Panel:\n    \"\"\"Returns table representation of model wrapped in a Panel.\n    Passes all keyword arguments to `as_table`.\n\n    Returns\n    -------\n    Panel\n        A Rich panel containing the table representation of the model.\n    \"\"\"\n    title = title or self.__rich_panel_title__\n    return Panel(Group(*self.as_table(**kwargs)), title=title)\n</code></pre>"}, {"location": "reference/models/_scanner/#harborapi.models._scanner.BaseModel.as_table", "title": "<code>as_table(with_description=False, max_depth=None, parent_field=None, _depth=1)</code>", "text": "<p>Returns a Rich table representation of the model, and any nested models.</p> <p>Parameters:</p> Name Type Description Default <code>with_description</code> <code>bool</code> <p>Whether to include the description of the model fields.</p> <code>False</code> <code>max_depth</code> <code>Optional[int]</code> <p>The maximum depth to print nested models. <code>None</code> means no limit.</p> <code>None</code> <code>parent_field</code> <code>Optional[str]</code> <p>The title of the parent field that contains this model. Used when printing submodels.</p> <code>None</code> <code>_depth</code> <code>int</code> <p>DO NOT SET THIS. This is used internally to track the current depth level.</p> <code>1</code> <p>Returns:</p> Type Description <code>Iterable[Table]</code> <p>A generator of Rich tables representing the model and any nested models.</p> Source code in <code>harborapi/models/base.py</code> <pre><code>def as_table(\n    self,\n    with_description: bool = False,\n    max_depth: Optional[int] = None,\n    parent_field: Optional[str] = None,\n    _depth: int = 1,\n) -&gt; Iterable[Table]:\n    \"\"\"Returns a Rich table representation of the model, and any nested models.\n\n    Parameters\n    ----------\n    with_description : bool\n        Whether to include the description of the model fields.\n    max_depth : Optional[int]\n        The maximum depth to print nested models.\n        `None` means no limit.\n    parent_field : Optional[str]\n        The title of the parent field that contains this model.\n        Used when printing submodels.\n    _depth : int\n        DO NOT SET THIS.\n        This is used internally to track the current depth level.\n\n    Returns\n    -------\n    Iterable[Table]\n        A generator of Rich tables representing the model and any nested models.\n    \"\"\"\n    # VOCABULARY:\n    # \"field\" -&gt; a field in the model spec\n    # \"field name\" -&gt; the name of the field in the model spec\n    # \"submodel\" -&gt; a nested model\n    # \"submodel table\" -&gt; the table representation of a nested model\n\n    # None and n &lt;= 0 means no limit to recursion depth\n    if max_depth is not None and max_depth &lt;= 0:\n        max_depth = None\n\n    # TODO: add list index indicator for list fields\n    if not parent_field:\n        title = type(self).__qualname__\n    else:\n        title = f\"{parent_field}\"\n\n    columns = [\n        Column(\n            header=\"Field\", justify=\"left\", style=\"green\", header_style=\"bold\"\n        ),\n        Column(header=\"Value\", style=\"blue\", justify=\"left\", overflow=\"fold\"),\n    ]\n    if with_description:\n        columns.append(\n            Column(header=\"Description\", style=\"yellow\", justify=\"left\"),\n        )\n\n    table = Table(\n        title=f\"[bold]{title}[/bold]\",\n        title_style=DEPTH_TITLE_COLORS.get(_depth, \"magenta\"),\n        title_justify=\"left\",\n        expand=True,\n        *columns,\n    )\n\n    subtables = []  # type: list[Iterable[Table]]\n\n    def add_submodel_table(field_title: str, submodel: \"BaseModel\") -&gt; str:\n        \"\"\"Adds a submodel table to the subtables list.\"\"\"\n        if parent_field:\n            pfield = f\"{parent_field}.{field_title}\"\n        else:\n            pfield = f\"{type(self).__qualname__}.{field_title}\"\n        submodel_table = submodel.as_table(\n            with_description=with_description,\n            max_depth=max_depth,\n            _depth=_depth + 1,\n            parent_field=pfield,\n        )\n        subtables.append(submodel_table)\n        return pfield\n\n    # Iterate over self to get model fields + extra fields\n    for field_name, value in super(BaseModel, self).__iter__():\n        # Prioritize getting field info from __fields__ dict\n        # since this dict contains more metadata for the field\n        field = self.model_fields.get(field_name)\n        if field is not None:\n            # Try to use field title if available\n            field_title = str(field.title or field_name)\n            # Get the field value\n            value = getattr(self, field_name)\n            description = str(field.description) or \"\"\n        else:\n            field_title = field_name\n            description = \"\"\n\n        submodels = []  # type: Iterable[BaseModel]\n        if isinstance(value, BaseModel):\n            submodels = [value]\n        elif isinstance(value, Iterable):\n            if all(isinstance(v, BaseModel) for v in value):\n                submodels = value\n\n        # Only print the submodel table if we are not at the max depth\n        # If we don't enter this, we print the string representation of the\n        # submodel(s) in the main table.\n        if submodels and (max_depth is None or _depth &lt; max_depth):\n            # consume iterable immediately so we can get table title\n            # It's likely this is NOT a generator, but we don't want to\n            # assume that.\n            submodels = list(submodels)\n            table_title = \"\"\n            for submodel in submodels:\n                table_title = add_submodel_table(field_title, submodel)\n            value = f\"[bold]See below ({table_title})[/bold]\"\n\n        row = [field_title, str(value)]\n        if with_description:\n            row.append(description)\n        table.add_row(*row)\n\n    # TODO: sort table rows by field name\n\n    yield table\n    for subtable in subtables:\n        yield from subtable\n</code></pre>"}, {"location": "reference/models/_scanner/#harborapi.models._scanner.Scanner", "title": "<code>Scanner</code>", "text": "<p>Basic scanner properties such as name, vendor, and version.</p> Source code in <code>harborapi/models/scanner.py</code> <pre><code>class Scanner(BaseModel):\n    \"\"\"\n    Basic scanner properties such as name, vendor, and version.\n\n    \"\"\"\n\n    name: Optional[str] = Field(\n        default=None, description=\"The name of the scanner.\", examples=[\"Trivy\"]\n    )\n    vendor: Optional[str] = Field(\n        default=None,\n        description=\"The name of the scanner's provider.\",\n        examples=[\"Aqua Security\"],\n    )\n    version: Optional[str] = Field(\n        default=None, description=\"The version of the scanner.\", examples=[\"0.4.0\"]\n    )\n\n    @property\n    def semver(self) -&gt; SemVer:\n        return get_semver(self.version)\n</code></pre>"}, {"location": "reference/models/_scanner/#harborapi.models._scanner.Scanner.name", "title": "<code>name = Field(default=None, description='The name of the scanner.', examples=['Trivy'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_scanner/#harborapi.models._scanner.Scanner.vendor", "title": "<code>vendor = Field(default=None, description=\"The name of the scanner's provider.\", examples=['Aqua Security'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_scanner/#harborapi.models._scanner.Scanner.version", "title": "<code>version = Field(default=None, description='The version of the scanner.', examples=['0.4.0'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_scanner/#harborapi.models._scanner.Scanner.semver", "title": "<code>semver</code>  <code>property</code>", "text": ""}, {"location": "reference/models/_scanner/#harborapi.models._scanner.ScannerProperties", "title": "<code>ScannerProperties</code>", "text": "<p>A set of custom properties that can further describe capabilities of a given scanner.</p> Source code in <code>harborapi/models/scanner.py</code> <pre><code>class ScannerProperties(RootModel[Optional[Dict[str, str]]]):\n    \"\"\"\n    A set of custom properties that can further describe capabilities of a given scanner.\n\n    \"\"\"\n\n    root: Optional[Dict[str, str]] = None\n</code></pre>"}, {"location": "reference/models/_scanner/#harborapi.models._scanner.ScannerProperties.root", "title": "<code>root = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_scanner/#harborapi.models._scanner.ScannerCapability", "title": "<code>ScannerCapability</code>", "text": "<p>Capability consists of the set of recognized artifact MIME types and the set of scanner report MIME types. For example, a scanner capable of analyzing Docker images and producing a vulnerabilities report recognizable by Harbor web console might be represented with the following capability: - consumes MIME types:   - <code>application/vnd.oci.image.manifest.v1+json</code>   - <code>application/vnd.docker.distribution.manifest.v2+json</code> - produces MIME types:   - <code>application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0</code></p> Source code in <code>harborapi/models/scanner.py</code> <pre><code>class ScannerCapability(BaseModel):\n    \"\"\"\n    Capability consists of the set of recognized artifact MIME types and the set of scanner report MIME types.\n    For example, a scanner capable of analyzing Docker images and producing a vulnerabilities report recognizable\n    by Harbor web console might be represented with the following capability:\n    - consumes MIME types:\n      - `application/vnd.oci.image.manifest.v1+json`\n      - `application/vnd.docker.distribution.manifest.v2+json`\n    - produces MIME types:\n      - `application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0`\n\n    \"\"\"\n\n    consumes_mime_types: List[str] = Field(\n        ...,\n        description='The set of MIME types of the artifacts supported by the scanner to produce the reports specified in the \"produces_mime_types\". A given\\nmime type should only be present in one capability item.\\n',\n        examples=[\n            [\n                \"application/vnd.oci.image.manifest.v1+json\",\n                \"application/vnd.docker.distribution.manifest.v2+json\",\n            ]\n        ],\n    )\n    produces_mime_types: List[str] = Field(\n        ...,\n        description=\"The set of MIME types of reports generated by the scanner for the consumes_mime_types of the same capability record.\\n\",\n        examples=[\n            [\"application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0\"]\n        ],\n    )\n</code></pre>"}, {"location": "reference/models/_scanner/#harborapi.models._scanner.ScannerCapability.consumes_mime_types", "title": "<code>consumes_mime_types = Field(..., description='The set of MIME types of the artifacts supported by the scanner to produce the reports specified in the \"produces_mime_types\". A given\\nmime type should only be present in one capability item.\\n', examples=[['application/vnd.oci.image.manifest.v1+json', 'application/vnd.docker.distribution.manifest.v2+json']])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_scanner/#harborapi.models._scanner.ScannerCapability.produces_mime_types", "title": "<code>produces_mime_types = Field(..., description='The set of MIME types of reports generated by the scanner for the consumes_mime_types of the same capability record.\\n', examples=[['application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0']])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_scanner/#harborapi.models._scanner.ScanRequestId", "title": "<code>ScanRequestId</code>", "text": "Source code in <code>harborapi/models/scanner.py</code> <pre><code>class ScanRequestId(RootModel[str]):\n    root: str = Field(\n        ...,\n        description=\"A unique identifier returned by the [/scan](#/operation/AcceptScanRequest] operations. The format of the\\nidentifier is not imposed but it should be unique enough to prevent collisons when polling for scan reports.\\n\",\n        examples=[\"3fa85f64-5717-4562-b3fc-2c963f66afa6\"],\n    )\n</code></pre>"}, {"location": "reference/models/_scanner/#harborapi.models._scanner.ScanRequestId.root", "title": "<code>root = Field(..., description='A unique identifier returned by the [/scan](#/operation/AcceptScanRequest] operations. The format of the\\nidentifier is not imposed but it should be unique enough to prevent collisons when polling for scan reports.\\n', examples=['3fa85f64-5717-4562-b3fc-2c963f66afa6'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_scanner/#harborapi.models._scanner.Registry", "title": "<code>Registry</code>", "text": "Source code in <code>harborapi/models/scanner.py</code> <pre><code>class Registry(BaseModel):\n    url: Optional[str] = Field(\n        default=None,\n        description=\"A base URL or the Docker Registry v2 API.\",\n        examples=[\"https://core.harbor.domain\"],\n    )\n    authorization: Optional[str] = Field(\n        default=None,\n        description=\"An optional value of the HTTP Authorization header sent with each request to the Docker Registry v2 API.\\nIt's used to exchange Base64 encoded robot account credentials to a short lived JWT access token which\\nallows the underlying scanner to pull the artifact from the Docker Registry.\\n\",\n        examples=[\"Basic BASE64_ENCODED_CREDENTIALS\"],\n    )\n</code></pre>"}, {"location": "reference/models/_scanner/#harborapi.models._scanner.Registry.url", "title": "<code>url = Field(default=None, description='A base URL or the Docker Registry v2 API.', examples=['https://core.harbor.domain'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_scanner/#harborapi.models._scanner.Registry.authorization", "title": "<code>authorization = Field(default=None, description=\"An optional value of the HTTP Authorization header sent with each request to the Docker Registry v2 API.\\nIt's used to exchange Base64 encoded robot account credentials to a short lived JWT access token which\\nallows the underlying scanner to pull the artifact from the Docker Registry.\\n\", examples=['Basic BASE64_ENCODED_CREDENTIALS'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_scanner/#harborapi.models._scanner.Artifact", "title": "<code>Artifact</code>", "text": "Source code in <code>harborapi/models/scanner.py</code> <pre><code>class Artifact(BaseModel):\n    repository: Optional[str] = Field(\n        default=None,\n        description=\"The name of the Docker Registry repository containing the artifact.\",\n        examples=[\"library/mongo\"],\n    )\n    digest: Optional[str] = Field(\n        default=None,\n        description=\"The artifact's digest, consisting of an algorithm and hex portion.\",\n        examples=[\n            \"sha256:6c3c624b58dbbcd3c0dd82b4c53f04194d1247c6eebdaab7c610cf7d66709b3b\"\n        ],\n    )\n    tag: Optional[str] = Field(\n        default=None, description=\"The artifact's tag\", examples=[\"3.14-xenial\"]\n    )\n    mime_type: Optional[str] = Field(\n        default=None,\n        description=\"The MIME type of the artifact.\",\n        examples=[\"application/vnd.docker.distribution.manifest.v2+json\"],\n    )\n</code></pre>"}, {"location": "reference/models/_scanner/#harborapi.models._scanner.Artifact.repository", "title": "<code>repository = Field(default=None, description='The name of the Docker Registry repository containing the artifact.', examples=['library/mongo'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_scanner/#harborapi.models._scanner.Artifact.digest", "title": "<code>digest = Field(default=None, description=\"The artifact's digest, consisting of an algorithm and hex portion.\", examples=['sha256:6c3c624b58dbbcd3c0dd82b4c53f04194d1247c6eebdaab7c610cf7d66709b3b'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_scanner/#harborapi.models._scanner.Artifact.tag", "title": "<code>tag = Field(default=None, description=\"The artifact's tag\", examples=['3.14-xenial'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_scanner/#harborapi.models._scanner.Artifact.mime_type", "title": "<code>mime_type = Field(default=None, description='The MIME type of the artifact.', examples=['application/vnd.docker.distribution.manifest.v2+json'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_scanner/#harborapi.models._scanner.Severity", "title": "<code>Severity</code>", "text": "<p>A standard scale for measuring the severity of a vulnerability.</p> <ul> <li><code>Unknown</code> - either a security problem that has not been assigned to a priority yet or a priority that the   scanner did not recognize.</li> <li><code>Negligible</code> - technically a security problem, but is only theoretical in nature, requires a very special   situation, has almost no install base, or does no real damage.</li> <li><code>Low</code> - a security problem, but is hard to exploit due to environment, requires a user-assisted attack,   a small install base, or does very little damage.</li> <li><code>Medium</code> - a real security problem, and is exploitable for many people. Includes network daemon denial of   service attacks, cross-site scripting, and gaining user privileges.</li> <li><code>High</code> - a real problem, exploitable for many people in a default installation. Includes serious remote denial   of service, local root privilege escalations, or data loss.</li> <li><code>Critical</code> - a world-burning problem, exploitable for nearly all people in a default installation. Includes   remote root privilege escalations, or massive data loss.</li> </ul> Source code in <code>harborapi/models/scanner.py</code> <pre><code>class Severity(Enum):\n    \"\"\"\n    A standard scale for measuring the severity of a vulnerability.\n\n    * `Unknown` - either a security problem that has not been assigned to a priority yet or a priority that the\n      scanner did not recognize.\n    * `Negligible` - technically a security problem, but is only theoretical in nature, requires a very special\n      situation, has almost no install base, or does no real damage.\n    * `Low` - a security problem, but is hard to exploit due to environment, requires a user-assisted attack,\n      a small install base, or does very little damage.\n    * `Medium` - a real security problem, and is exploitable for many people. Includes network daemon denial of\n      service attacks, cross-site scripting, and gaining user privileges.\n    * `High` - a real problem, exploitable for many people in a default installation. Includes serious remote denial\n      of service, local root privilege escalations, or data loss.\n    * `Critical` - a world-burning problem, exploitable for nearly all people in a default installation. Includes\n      remote root privilege escalations, or massive data loss.\n\n    \"\"\"\n\n    unknown = \"Unknown\"\n    negligible = \"Negligible\"\n    low = \"Low\"\n    medium = \"Medium\"\n    high = \"High\"\n    critical = \"Critical\"\n    none = \"None\"\n\n    def __gt__(self, other: Severity) -&gt; bool:\n        return SEVERITY_PRIORITY[self] &gt; SEVERITY_PRIORITY[other]\n\n    def __ge__(self, other: Severity) -&gt; bool:\n        return SEVERITY_PRIORITY[self] &gt;= SEVERITY_PRIORITY[other]\n\n    def __lt__(self, other: Severity) -&gt; bool:\n        return SEVERITY_PRIORITY[self] &lt; SEVERITY_PRIORITY[other]\n\n    def __le__(self, other: Severity) -&gt; bool:\n        return SEVERITY_PRIORITY[self] &lt;= SEVERITY_PRIORITY[other]\n</code></pre>"}, {"location": "reference/models/_scanner/#harborapi.models._scanner.Severity.unknown", "title": "<code>unknown = 'Unknown'</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_scanner/#harborapi.models._scanner.Severity.negligible", "title": "<code>negligible = 'Negligible'</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_scanner/#harborapi.models._scanner.Severity.low", "title": "<code>low = 'Low'</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_scanner/#harborapi.models._scanner.Severity.medium", "title": "<code>medium = 'Medium'</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_scanner/#harborapi.models._scanner.Severity.high", "title": "<code>high = 'High'</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_scanner/#harborapi.models._scanner.Severity.critical", "title": "<code>critical = 'Critical'</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_scanner/#harborapi.models._scanner.Severity.none", "title": "<code>none = 'None'</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_scanner/#harborapi.models._scanner.Severity.__gt__", "title": "<code>__gt__(other)</code>", "text": "Source code in <code>harborapi/models/scanner.py</code> <pre><code>def __gt__(self, other: Severity) -&gt; bool:\n    return SEVERITY_PRIORITY[self] &gt; SEVERITY_PRIORITY[other]\n</code></pre>"}, {"location": "reference/models/_scanner/#harborapi.models._scanner.Severity.__ge__", "title": "<code>__ge__(other)</code>", "text": "Source code in <code>harborapi/models/scanner.py</code> <pre><code>def __ge__(self, other: Severity) -&gt; bool:\n    return SEVERITY_PRIORITY[self] &gt;= SEVERITY_PRIORITY[other]\n</code></pre>"}, {"location": "reference/models/_scanner/#harborapi.models._scanner.Severity.__lt__", "title": "<code>__lt__(other)</code>", "text": "Source code in <code>harborapi/models/scanner.py</code> <pre><code>def __lt__(self, other: Severity) -&gt; bool:\n    return SEVERITY_PRIORITY[self] &lt; SEVERITY_PRIORITY[other]\n</code></pre>"}, {"location": "reference/models/_scanner/#harborapi.models._scanner.Severity.__le__", "title": "<code>__le__(other)</code>", "text": "Source code in <code>harborapi/models/scanner.py</code> <pre><code>def __le__(self, other: Severity) -&gt; bool:\n    return SEVERITY_PRIORITY[self] &lt;= SEVERITY_PRIORITY[other]\n</code></pre>"}, {"location": "reference/models/_scanner/#harborapi.models._scanner.Error", "title": "<code>Error</code>", "text": "Source code in <code>harborapi/models/scanner.py</code> <pre><code>class Error(BaseModel):\n    message: Optional[str] = Field(default=None, examples=[\"Some unexpected error\"])\n</code></pre>"}, {"location": "reference/models/_scanner/#harborapi.models._scanner.Error.message", "title": "<code>message = Field(default=None, examples=['Some unexpected error'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_scanner/#harborapi.models._scanner.CVSSDetails", "title": "<code>CVSSDetails</code>", "text": "Source code in <code>harborapi/models/scanner.py</code> <pre><code>class CVSSDetails(BaseModel):\n    score_v3: Optional[float] = Field(\n        default=None,\n        description=\"The CVSS 3.0 score for the vulnerability.\\n\",\n        examples=[3.2],\n    )\n    score_v2: Optional[float] = Field(\n        default=None, description=\"The CVSS 2.0 score for the vulnerability.\\n\"\n    )\n    vector_v3: Optional[str] = Field(\n        default=None,\n        description=\"The CVSS 3.0 vector for the vulnerability. \\n\",\n        examples=[\"CVSS:3.0/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N\"],\n    )\n    vector_v2: Optional[str] = Field(\n        default=None,\n        description=\"The CVSS 2.0 vector for the vulnerability. The string is of the form AV:L/AC:M/Au:N/C:P/I:N/A:N\\n\",\n        examples=[\"AV:N/AC:L/Au:N/C:N/I:N/A:P\"],\n    )\n</code></pre>"}, {"location": "reference/models/_scanner/#harborapi.models._scanner.CVSSDetails.score_v3", "title": "<code>score_v3 = Field(default=None, description='The CVSS 3.0 score for the vulnerability.\\n', examples=[3.2])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_scanner/#harborapi.models._scanner.CVSSDetails.score_v2", "title": "<code>score_v2 = Field(default=None, description='The CVSS 2.0 score for the vulnerability.\\n')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_scanner/#harborapi.models._scanner.CVSSDetails.vector_v3", "title": "<code>vector_v3 = Field(default=None, description='The CVSS 3.0 vector for the vulnerability. \\n', examples=['CVSS:3.0/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_scanner/#harborapi.models._scanner.CVSSDetails.vector_v2", "title": "<code>vector_v2 = Field(default=None, description='The CVSS 2.0 vector for the vulnerability. The string is of the form AV:L/AC:M/Au:N/C:P/I:N/A:N\\n', examples=['AV:N/AC:L/Au:N/C:N/I:N/A:P'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_scanner/#harborapi.models._scanner.ScannerAdapterMetadata", "title": "<code>ScannerAdapterMetadata</code>", "text": "<p>Represents metadata of a Scanner Adapter which allows Harbor to lookup a scanner capable of scanning a given Artifact stored in its registry and making sure that it can interpret a returned result.</p> Source code in <code>harborapi/models/scanner.py</code> <pre><code>class ScannerAdapterMetadata(BaseModel):\n    \"\"\"\n    Represents metadata of a Scanner Adapter which allows Harbor to lookup a scanner capable\n    of scanning a given Artifact stored in its registry and making sure that it\n    can interpret a returned result.\n\n    \"\"\"\n\n    scanner: Scanner\n    capabilities: List[ScannerCapability]\n    properties: Optional[ScannerProperties] = None\n</code></pre>"}, {"location": "reference/models/_scanner/#harborapi.models._scanner.ScannerAdapterMetadata.scanner", "title": "<code>scanner</code>  <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_scanner/#harborapi.models._scanner.ScannerAdapterMetadata.capabilities", "title": "<code>capabilities</code>  <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_scanner/#harborapi.models._scanner.ScannerAdapterMetadata.properties", "title": "<code>properties = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_scanner/#harborapi.models._scanner.ScanRequest", "title": "<code>ScanRequest</code>", "text": "Source code in <code>harborapi/models/scanner.py</code> <pre><code>class ScanRequest(BaseModel):\n    registry: Registry\n    artifact: Artifact\n</code></pre>"}, {"location": "reference/models/_scanner/#harborapi.models._scanner.ScanRequest.registry", "title": "<code>registry</code>  <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_scanner/#harborapi.models._scanner.ScanRequest.artifact", "title": "<code>artifact</code>  <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_scanner/#harborapi.models._scanner.ScanResponse", "title": "<code>ScanResponse</code>", "text": "Source code in <code>harborapi/models/scanner.py</code> <pre><code>class ScanResponse(BaseModel):\n    id: ScanRequestId\n</code></pre>"}, {"location": "reference/models/_scanner/#harborapi.models._scanner.ScanResponse.id", "title": "<code>id</code>  <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_scanner/#harborapi.models._scanner.VulnerabilityItem", "title": "<code>VulnerabilityItem</code>", "text": "Source code in <code>harborapi/models/scanner.py</code> <pre><code>class VulnerabilityItem(BaseModel):\n    id: Optional[str] = Field(\n        default=None,\n        description=\"The unique identifier of the vulnerability.\",\n        examples=[\"CVE-2017-8283\"],\n    )\n    package: Optional[str] = Field(\n        default=None,\n        description=\"An operating system package containing the vulnerability.\\n\",\n        examples=[\"dpkg\"],\n    )\n    version: Optional[str] = Field(\n        default=None,\n        description=\"The version of the package containing the vulnerability.\\n\",\n        examples=[\"1.17.27\"],\n    )\n    fix_version: Optional[str] = Field(\n        default=None,\n        description=\"The version of the package containing the fix if available.\\n\",\n        examples=[\"1.18.0\"],\n    )\n    severity: Severity = Field(\n        Severity.unknown, description=\"The severity of the vulnerability.\"\n    )\n    description: Optional[str] = Field(\n        default=None,\n        description=\"The detailed description of the vulnerability.\\n\",\n        examples=[\n            \"dpkg-source in dpkg 1.3.0 through 1.18.23 is able to use a non-GNU patch program\\nand does not offer a protection mechanism for blank-indented diff hunks, which\\nallows remote attackers to conduct directory traversal attacks via a crafted\\nDebian source package, as demonstrated by using of dpkg-source on NetBSD.\\n\"\n        ],\n    )\n    links: Optional[List[str]] = Field(\n        None,\n        description=\"The list of links to the upstream databases with the full description of the vulnerability.\\n\",\n    )\n    preferred_cvss: Optional[CVSSDetails] = None\n    cwe_ids: Optional[List[str]] = Field(\n        default=None,\n        description=\"The Common Weakness Enumeration Identifiers associated with this vulnerability.\\n\",\n        examples=[[\"CWE-476\"]],\n    )\n    vendor_attributes: Optional[Dict[str, Any]] = None\n\n    @field_validator(\"severity\", mode=\"before\")\n    @classmethod\n    def _severity_none_is_default(\n        cls, v: Optional[Severity], info: ValidationInfo\n    ) -&gt; Severity:\n        if not info.field_name:\n            raise ValueError(\"Validator is not attached to a field.\")\n        return v or cls.model_fields[info.field_name].default\n\n    @property\n    def semver(self) -&gt; SemVer:\n        return get_semver(self.version)\n\n    @property\n    def fixable(self) -&gt; bool:\n        return bool(self.fix_version)\n\n    def get_cvss_score(\n        self,\n        scanner: Union[Optional[Scanner], str] = \"Trivy\",\n        version: int = 3,\n        vendor_priority: Optional[Iterable[str]] = None,\n        default: float = 0.0,\n    ) -&gt; float:\n        \"\"\"The default scanner Trivy, as of version 0.29.1, does not use the\n        preferred_cvss field.\n\n        In order to not tightly couple this method with a specific scanner,\n        we use the scanner name to determine how to retrieve the CVSS score.\n\n        Forward compatibility is in place in the event that Trivy starts\n        conforming to the spec.\n        \"\"\"\n        if vendor_priority is None:\n            vendor_priority = DEFAULT_VENDORS\n        if self.preferred_cvss is not None:\n            if version == 3 and self.preferred_cvss.score_v3 is not None:\n                return self.preferred_cvss.score_v3\n            elif version == 2 and self.preferred_cvss.score_v2 is not None:\n                return self.preferred_cvss.score_v2\n        if not scanner:\n            return default\n        if isinstance(scanner, str):\n            scanner_name = scanner\n        elif isinstance(scanner, Scanner):\n            scanner_name = scanner.name or \"\"\n        if scanner_name.lower() == \"trivy\":\n            return self._get_trivy_cvss_score(\n                version=version, vendor_priority=vendor_priority, default=default\n            )\n        return default\n\n    def _get_trivy_cvss_score(\n        self, version: int, vendor_priority: Iterable[str], default: float = 0.0\n    ) -&gt; float:\n        if self.vendor_attributes is None:\n            return default\n        cvss_data = self.vendor_attributes.get(\"CVSS\", {})\n        if not cvss_data:\n            return default\n        for prio in vendor_priority:\n            vendor_cvss = cvss_data.get(prio, {})\n            if not vendor_cvss:\n                continue\n            elif not isinstance(vendor_cvss, dict):\n                logger.warning(\"Received malformed vendor CVSS data: %s\", vendor_cvss)\n                continue\n            score = vendor_cvss.get(f\"V{version}Score\", default)\n            if isinstance(score, (int, float)):\n                return float(score)\n            else:\n                logger.error(\n                    \"Received non-float value for vendor CVSS V%dScore: %s\",\n                    version,\n                    score,\n                )\n        return default\n\n    def get_severity(\n        self,\n        scanner: Union[Optional[Scanner], str] = \"Trivy\",\n        vendor_priority: Optional[Iterable[str]] = None,\n    ) -&gt; Severity:\n        \"\"\"Returns the CVSS V3 severity of the vulnerability based on a specific vendor.\n        If no vendor is specified, the default vendor priority is used (NVD over RedHat).\n\n        With Trivy 0.29.1, the `severity` field is based on the Red Hat vulnerability rating.\n        This attempts to return the severity based on a user-provided vendor priority.\n\n        TODO: improve documentation for the what and why of this method\n        \"\"\"\n        cvss_score = self.get_cvss_score(\n            scanner=scanner, vendor_priority=vendor_priority\n        )\n        if cvss_score &gt;= 9.0:\n            return Severity.critical\n        elif cvss_score &gt;= 7.0:\n            return Severity.high\n        elif cvss_score &gt;= 4.0:\n            return Severity.medium\n        elif cvss_score &gt;= 0.1:\n            return Severity.low\n        else:\n            return Severity.negligible\n\n    def get_severity_highest(\n        self,\n        scanner: Union[Optional[Scanner], str] = \"Trivy\",\n        vendors: Optional[Iterable[str]] = None,\n    ) -&gt; Severity:\n        \"\"\"Attempts to find the highest severity of the vulnerability based on a specific vendor.\"\"\"\n        if vendors is None:\n            vendors = DEFAULT_VENDORS\n        severities = [\n            self.get_severity(scanner=scanner, vendor_priority=[v]) for v in vendors\n        ]\n        if self.severity is not None:\n            severities.append(self.severity)\n        return most_severe(severities)\n</code></pre>"}, {"location": "reference/models/_scanner/#harborapi.models._scanner.VulnerabilityItem.id", "title": "<code>id = Field(default=None, description='The unique identifier of the vulnerability.', examples=['CVE-2017-8283'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_scanner/#harborapi.models._scanner.VulnerabilityItem.package", "title": "<code>package = Field(default=None, description='An operating system package containing the vulnerability.\\n', examples=['dpkg'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_scanner/#harborapi.models._scanner.VulnerabilityItem.version", "title": "<code>version = Field(default=None, description='The version of the package containing the vulnerability.\\n', examples=['1.17.27'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_scanner/#harborapi.models._scanner.VulnerabilityItem.fix_version", "title": "<code>fix_version = Field(default=None, description='The version of the package containing the fix if available.\\n', examples=['1.18.0'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_scanner/#harborapi.models._scanner.VulnerabilityItem.severity", "title": "<code>severity = Field(Severity.unknown, description='The severity of the vulnerability.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_scanner/#harborapi.models._scanner.VulnerabilityItem.description", "title": "<code>description = Field(default=None, description='The detailed description of the vulnerability.\\n', examples=['dpkg-source in dpkg 1.3.0 through 1.18.23 is able to use a non-GNU patch program\\nand does not offer a protection mechanism for blank-indented diff hunks, which\\nallows remote attackers to conduct directory traversal attacks via a crafted\\nDebian source package, as demonstrated by using of dpkg-source on NetBSD.\\n'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_scanner/#harborapi.models._scanner.VulnerabilityItem.links", "title": "<code>links = Field(None, description='The list of links to the upstream databases with the full description of the vulnerability.\\n')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_scanner/#harborapi.models._scanner.VulnerabilityItem.preferred_cvss", "title": "<code>preferred_cvss = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_scanner/#harborapi.models._scanner.VulnerabilityItem.cwe_ids", "title": "<code>cwe_ids = Field(default=None, description='The Common Weakness Enumeration Identifiers associated with this vulnerability.\\n', examples=[['CWE-476']])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_scanner/#harborapi.models._scanner.VulnerabilityItem.vendor_attributes", "title": "<code>vendor_attributes = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_scanner/#harborapi.models._scanner.VulnerabilityItem.semver", "title": "<code>semver</code>  <code>property</code>", "text": ""}, {"location": "reference/models/_scanner/#harborapi.models._scanner.VulnerabilityItem.fixable", "title": "<code>fixable</code>  <code>property</code>", "text": ""}, {"location": "reference/models/_scanner/#harborapi.models._scanner.VulnerabilityItem.get_cvss_score", "title": "<code>get_cvss_score(scanner='Trivy', version=3, vendor_priority=None, default=0.0)</code>", "text": "<p>The default scanner Trivy, as of version 0.29.1, does not use the preferred_cvss field.</p> <p>In order to not tightly couple this method with a specific scanner, we use the scanner name to determine how to retrieve the CVSS score.</p> <p>Forward compatibility is in place in the event that Trivy starts conforming to the spec.</p> Source code in <code>harborapi/models/scanner.py</code> <pre><code>def get_cvss_score(\n    self,\n    scanner: Union[Optional[Scanner], str] = \"Trivy\",\n    version: int = 3,\n    vendor_priority: Optional[Iterable[str]] = None,\n    default: float = 0.0,\n) -&gt; float:\n    \"\"\"The default scanner Trivy, as of version 0.29.1, does not use the\n    preferred_cvss field.\n\n    In order to not tightly couple this method with a specific scanner,\n    we use the scanner name to determine how to retrieve the CVSS score.\n\n    Forward compatibility is in place in the event that Trivy starts\n    conforming to the spec.\n    \"\"\"\n    if vendor_priority is None:\n        vendor_priority = DEFAULT_VENDORS\n    if self.preferred_cvss is not None:\n        if version == 3 and self.preferred_cvss.score_v3 is not None:\n            return self.preferred_cvss.score_v3\n        elif version == 2 and self.preferred_cvss.score_v2 is not None:\n            return self.preferred_cvss.score_v2\n    if not scanner:\n        return default\n    if isinstance(scanner, str):\n        scanner_name = scanner\n    elif isinstance(scanner, Scanner):\n        scanner_name = scanner.name or \"\"\n    if scanner_name.lower() == \"trivy\":\n        return self._get_trivy_cvss_score(\n            version=version, vendor_priority=vendor_priority, default=default\n        )\n    return default\n</code></pre>"}, {"location": "reference/models/_scanner/#harborapi.models._scanner.VulnerabilityItem.get_severity", "title": "<code>get_severity(scanner='Trivy', vendor_priority=None)</code>", "text": "<p>Returns the CVSS V3 severity of the vulnerability based on a specific vendor. If no vendor is specified, the default vendor priority is used (NVD over RedHat).</p> <p>With Trivy 0.29.1, the <code>severity</code> field is based on the Red Hat vulnerability rating. This attempts to return the severity based on a user-provided vendor priority.</p> <p>TODO: improve documentation for the what and why of this method</p> Source code in <code>harborapi/models/scanner.py</code> <pre><code>def get_severity(\n    self,\n    scanner: Union[Optional[Scanner], str] = \"Trivy\",\n    vendor_priority: Optional[Iterable[str]] = None,\n) -&gt; Severity:\n    \"\"\"Returns the CVSS V3 severity of the vulnerability based on a specific vendor.\n    If no vendor is specified, the default vendor priority is used (NVD over RedHat).\n\n    With Trivy 0.29.1, the `severity` field is based on the Red Hat vulnerability rating.\n    This attempts to return the severity based on a user-provided vendor priority.\n\n    TODO: improve documentation for the what and why of this method\n    \"\"\"\n    cvss_score = self.get_cvss_score(\n        scanner=scanner, vendor_priority=vendor_priority\n    )\n    if cvss_score &gt;= 9.0:\n        return Severity.critical\n    elif cvss_score &gt;= 7.0:\n        return Severity.high\n    elif cvss_score &gt;= 4.0:\n        return Severity.medium\n    elif cvss_score &gt;= 0.1:\n        return Severity.low\n    else:\n        return Severity.negligible\n</code></pre>"}, {"location": "reference/models/_scanner/#harborapi.models._scanner.VulnerabilityItem.get_severity_highest", "title": "<code>get_severity_highest(scanner='Trivy', vendors=None)</code>", "text": "<p>Attempts to find the highest severity of the vulnerability based on a specific vendor.</p> Source code in <code>harborapi/models/scanner.py</code> <pre><code>def get_severity_highest(\n    self,\n    scanner: Union[Optional[Scanner], str] = \"Trivy\",\n    vendors: Optional[Iterable[str]] = None,\n) -&gt; Severity:\n    \"\"\"Attempts to find the highest severity of the vulnerability based on a specific vendor.\"\"\"\n    if vendors is None:\n        vendors = DEFAULT_VENDORS\n    severities = [\n        self.get_severity(scanner=scanner, vendor_priority=[v]) for v in vendors\n    ]\n    if self.severity is not None:\n        severities.append(self.severity)\n    return most_severe(severities)\n</code></pre>"}, {"location": "reference/models/_scanner/#harborapi.models._scanner.ErrorResponse", "title": "<code>ErrorResponse</code>", "text": "Source code in <code>harborapi/models/scanner.py</code> <pre><code>class ErrorResponse(BaseModel):\n    error: Optional[Error] = None\n</code></pre>"}, {"location": "reference/models/_scanner/#harborapi.models._scanner.ErrorResponse.error", "title": "<code>error = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_scanner/#harborapi.models._scanner.HarborVulnerabilityReport", "title": "<code>HarborVulnerabilityReport</code>", "text": "Source code in <code>harborapi/models/scanner.py</code> <pre><code>class HarborVulnerabilityReport(BaseModel):\n    generated_at: Optional[AwareDatetime] = Field(\n        None, description=\"The time the vulnerability report was generated.\"\n    )\n    artifact: Optional[Artifact] = Field(\n        default=None, description=\"The scanned artifact.\"\n    )\n    scanner: Optional[Scanner] = Field(\n        default=None, description=\"The scanner used to generate the report.\"\n    )\n    severity: Optional[Severity] = Field(\n        default=Severity.unknown,\n        description=\"The overall severity of the vulnerabilities.\",\n    )\n    vulnerabilities: List[VulnerabilityItem] = Field(\n        default_factory=list, description=\"The list of vulnerabilities found.\"\n    )\n    model_config = ConfigDict(ignored_types=(cached_property,))\n\n    @field_validator(\"severity\", mode=\"before\")\n    @classmethod\n    def _severity_none_is_default(\n        cls, v: Optional[Severity], info: ValidationInfo\n    ) -&gt; Severity:\n        if not info.field_name:\n            raise ValueError(\"Validator is not attached to a field.\")\n        return v or cls.model_fields[info.field_name].default\n\n    def __repr__(self) -&gt; str:\n        return f\"HarborVulnerabilityReport(generated_at={self.generated_at}, artifact={self.artifact}, scanner={self.scanner}, severity={self.severity}, vulnerabilities=list(len={len(self.vulnerabilities)}))\"\n\n    @property\n    def fixable(self) -&gt; List[VulnerabilityItem]:\n        return [v for v in self.vulnerabilities if v.fixable]\n\n    @property\n    def unfixable(self) -&gt; List[VulnerabilityItem]:\n        return [v for v in self.vulnerabilities if not v.fixable]\n\n    @property\n    def critical(self) -&gt; List[VulnerabilityItem]:\n        return self.vulnerabilities_by_severity(Severity.critical)\n\n    @property\n    def high(self) -&gt; List[VulnerabilityItem]:\n        return self.vulnerabilities_by_severity(Severity.high)\n\n    @property\n    def medium(self) -&gt; List[VulnerabilityItem]:\n        return self.vulnerabilities_by_severity(Severity.medium)\n\n    @property\n    def low(self) -&gt; List[VulnerabilityItem]:\n        return self.vulnerabilities_by_severity(Severity.low)\n\n    @property\n    def distribution(self) -&gt; Counter[Severity]:\n        dist: typing.Counter[Severity] = Counter()\n        for vulnerability in self.vulnerabilities:\n            if vulnerability.severity:\n                dist[vulnerability.severity] += 1\n        return dist\n\n    def vulnerabilities_by_severity(\n        self, severity: Severity\n    ) -&gt; List[VulnerabilityItem]:\n        return [v for v in self.vulnerabilities if v.severity == severity]\n\n    def sort(self, descending: bool = True, use_cvss: bool = False) -&gt; None:\n        \"\"\"Sorts the vulnerabilities by severity in place.\n\n        A wrapper around `vulnerabilities.sort` that sorts by severity,\n        then optionally by CVSS score to break ties.\n\n        Parameters\n        ----------\n        descending : bool, optional\n            Whether to sort in descending order, by default True\n            Equivalent to `reverse=True` in `sorted()`.\n        use_cvss : bool, optional\n            Whether to use CVSS score to determine sorting order\n            when items have identical severity, by default False\n            This is somewhat experimental and may be removed in the future.\n        \"\"\"\n\n        def cmp(v1: VulnerabilityItem, v2: VulnerabilityItem) -&gt; int:\n            if v1.severity &gt; v2.severity:\n                return 1\n            elif v1.severity &lt; v2.severity:\n                return -1\n            if not use_cvss:\n                return 0\n            diff = v1.get_cvss_score(self.scanner) - v2.get_cvss_score(self.scanner)\n            if diff &gt; 0:\n                return 1\n            elif diff &lt; 0:\n                return -1\n            return 0\n\n        self.vulnerabilities.sort(key=functools.cmp_to_key(cmp), reverse=descending)\n\n    @cached_property\n    def cvss_scores(self) -&gt; List[float]:\n        \"\"\"Returns a list of CVSS scores for each vulnerability.\n        Vulnerabilities with a score of `None` are omitted.\n\n        Returns\n        ----\n        List[Optional[float]]\n            A list of CVSS scores for each vulnerability.\n        \"\"\"\n        return list(\n            filter(None, [v.get_cvss_score(self.scanner) for v in self.vulnerabilities])\n        )\n\n    def top_vulns(self, n: int = 5, fixable: bool = False) -&gt; List[VulnerabilityItem]:\n        \"\"\"Returns the n most severe vulnerabilities.\n\n\n        Parameters\n        ----------\n        n : int\n            The maximum number of vulnerabilities to return.\n        fixable : bool\n            If `True`, only vulnerabilities with a fix version are returned.\n\n        Returns\n        -------\n        List[VulnerabilityItem]\n            The n most severe vulnerabilities.\n\n        \"\"\"\n        vulns: Iterable[VulnerabilityItem] = []\n        if fixable:\n            vulns = self.fixable\n        else:\n            vulns = self.vulnerabilities\n        vulns = filter(lambda v: v.get_cvss_score(self.scanner) is not None, vulns)\n        return sorted(\n            vulns, key=lambda v: v.get_cvss_score(self.scanner), reverse=True\n        )[:n]\n\n    def has_cve(self, cve_id: str, case_sensitive: bool = False) -&gt; bool:\n        \"\"\"Whether or not the report contains a vulnerability with the given CVE ID.\n\n        Parameters\n        ----------\n        cve_id : str\n            The CVE ID to search for.\n\n        Returns\n        -------\n        bool\n            Report contains the a vulnerability with the given CVE ID.\n        \"\"\"\n        return self.vuln_with_cve(cve_id, case_sensitive) is not None\n\n    def has_description(self, description: str, case_sensitive: bool = False) -&gt; bool:\n        \"\"\"Whether or not the report contains a vulnerability whose description contains the given string.\n\n        Parameters\n        ----------\n        description : str\n            The string to search for in the descriptions.\n        case_sensitive : bool\n            Case sensitive search, by default False\n\n        Returns\n        -------\n        bool\n            The report contains a vulnerability whose description contains the given string.\n        \"\"\"\n        for _ in self.vulns_with_description(description, case_sensitive):\n            return True\n        return False\n\n    def has_package(self, package: str, case_sensitive: bool = False) -&gt; bool:\n        \"\"\"Whether or not the report contains a vulnerability affecting the given package.\n\n        Parameters\n        ----------\n        package : str\n            Name of the package to search for.\n        case_sensitive : bool\n            Case sensitive search, by default False\n\n        Returns\n        -------\n        bool\n            The given package is affected by a vulnerability in the report.\n        \"\"\"\n        for _ in self.vulns_with_package(package, case_sensitive):\n            return True\n        return False\n\n    def vuln_with_cve(\n        self, cve: str, case_sensitive: bool = False\n    ) -&gt; Optional[VulnerabilityItem]:\n        \"\"\"Returns a vulnerability with the specified CVE ID if it exists in the report.\n\n        Parameters\n        ----------\n        cve : str\n            The CVE ID of the vulnerability to return.\n        case_sensitive : bool\n            Case sensitive search, by default False\n\n        Returns\n        -------\n        Optional[VulnerabilityItem]\n            A vulnerability with the specified CVE ID if it exists, otherwise `None`.\n        \"\"\"\n        for vuln in self.vulnerabilities:\n            if vuln.id is None:\n                continue\n            vuln_id = vuln.id\n            if not case_sensitive:\n                vuln_id = vuln.id.lower()\n                cve = cve.lower()\n            if vuln_id == cve:\n                return vuln\n        return None\n\n    def vulns_with_package(\n        self, package: str, case_sensitive: bool = False\n    ) -&gt; Iterable[VulnerabilityItem]:\n        \"\"\"Generator that yields all vulnerabilities that affect the given package.\n\n        Parameters\n        ----------\n        package : str\n            The package name to search for.\n        case_sensitive : bool\n            Case sensitive search, by default False\n\n        Yields\n        ------\n        VulnerabilityItem\n            Vulnerability that affects the given package.\n        \"\"\"\n        for vuln in self.vulnerabilities:\n            if vuln.package is None:\n                continue\n            vuln_package = vuln.package\n            if not case_sensitive:\n                vuln_package = vuln.package.lower()\n                package = package.lower()\n            if vuln_package == package:\n                yield vuln\n\n    def vulns_with_description(\n        self, description: str, case_sensitive: bool = False\n    ) -&gt; Iterable[VulnerabilityItem]:\n        \"\"\"Generator that yields all vulnerabilities whose description contains the given string.\n\n        Parameters\n        ----------\n        description : str\n            The string to search for in vulnerability descriptions.\n        case_sensitive : bool\n            Case sensitive search, by default False\n\n        Yields\n        ------\n        VulnerabilityItem\n            Vulnerability whose description contains the given string.\n        \"\"\"\n        for vuln in self.vulnerabilities:\n            if vuln.description is None:\n                continue\n            vuln_description = vuln.description\n            if not case_sensitive:\n                description = description.lower()\n                vuln_description = vuln_description.lower()\n            if description in vuln_description:\n                yield vuln\n</code></pre>"}, {"location": "reference/models/_scanner/#harborapi.models._scanner.HarborVulnerabilityReport.generated_at", "title": "<code>generated_at = Field(None, description='The time the vulnerability report was generated.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_scanner/#harborapi.models._scanner.HarborVulnerabilityReport.artifact", "title": "<code>artifact = Field(default=None, description='The scanned artifact.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_scanner/#harborapi.models._scanner.HarborVulnerabilityReport.scanner", "title": "<code>scanner = Field(default=None, description='The scanner used to generate the report.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_scanner/#harborapi.models._scanner.HarborVulnerabilityReport.severity", "title": "<code>severity = Field(default=Severity.unknown, description='The overall severity of the vulnerabilities.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_scanner/#harborapi.models._scanner.HarborVulnerabilityReport.vulnerabilities", "title": "<code>vulnerabilities = Field(default_factory=list, description='The list of vulnerabilities found.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_scanner/#harborapi.models._scanner.HarborVulnerabilityReport.model_config", "title": "<code>model_config = ConfigDict(ignored_types=(cached_property,))</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/_scanner/#harborapi.models._scanner.HarborVulnerabilityReport.fixable", "title": "<code>fixable</code>  <code>property</code>", "text": ""}, {"location": "reference/models/_scanner/#harborapi.models._scanner.HarborVulnerabilityReport.unfixable", "title": "<code>unfixable</code>  <code>property</code>", "text": ""}, {"location": "reference/models/_scanner/#harborapi.models._scanner.HarborVulnerabilityReport.critical", "title": "<code>critical</code>  <code>property</code>", "text": ""}, {"location": "reference/models/_scanner/#harborapi.models._scanner.HarborVulnerabilityReport.high", "title": "<code>high</code>  <code>property</code>", "text": ""}, {"location": "reference/models/_scanner/#harborapi.models._scanner.HarborVulnerabilityReport.medium", "title": "<code>medium</code>  <code>property</code>", "text": ""}, {"location": "reference/models/_scanner/#harborapi.models._scanner.HarborVulnerabilityReport.low", "title": "<code>low</code>  <code>property</code>", "text": ""}, {"location": "reference/models/_scanner/#harborapi.models._scanner.HarborVulnerabilityReport.distribution", "title": "<code>distribution</code>  <code>property</code>", "text": ""}, {"location": "reference/models/_scanner/#harborapi.models._scanner.HarborVulnerabilityReport.cvss_scores", "title": "<code>cvss_scores</code>  <code>cached</code> <code>property</code>", "text": "<p>Returns a list of CVSS scores for each vulnerability. Vulnerabilities with a score of <code>None</code> are omitted.</p> <p>Returns:</p> Type Description <code>List[Optional[float]]</code> <p>A list of CVSS scores for each vulnerability.</p>"}, {"location": "reference/models/_scanner/#harborapi.models._scanner.HarborVulnerabilityReport.__repr__", "title": "<code>__repr__()</code>", "text": "Source code in <code>harborapi/models/scanner.py</code> <pre><code>def __repr__(self) -&gt; str:\n    return f\"HarborVulnerabilityReport(generated_at={self.generated_at}, artifact={self.artifact}, scanner={self.scanner}, severity={self.severity}, vulnerabilities=list(len={len(self.vulnerabilities)}))\"\n</code></pre>"}, {"location": "reference/models/_scanner/#harborapi.models._scanner.HarborVulnerabilityReport.vulnerabilities_by_severity", "title": "<code>vulnerabilities_by_severity(severity)</code>", "text": "Source code in <code>harborapi/models/scanner.py</code> <pre><code>def vulnerabilities_by_severity(\n    self, severity: Severity\n) -&gt; List[VulnerabilityItem]:\n    return [v for v in self.vulnerabilities if v.severity == severity]\n</code></pre>"}, {"location": "reference/models/_scanner/#harborapi.models._scanner.HarborVulnerabilityReport.sort", "title": "<code>sort(descending=True, use_cvss=False)</code>", "text": "<p>Sorts the vulnerabilities by severity in place.</p> <p>A wrapper around <code>vulnerabilities.sort</code> that sorts by severity, then optionally by CVSS score to break ties.</p> <p>Parameters:</p> Name Type Description Default <code>descending</code> <code>bool</code> <p>Whether to sort in descending order, by default True Equivalent to <code>reverse=True</code> in <code>sorted()</code>.</p> <code>True</code> <code>use_cvss</code> <code>bool</code> <p>Whether to use CVSS score to determine sorting order when items have identical severity, by default False This is somewhat experimental and may be removed in the future.</p> <code>False</code> Source code in <code>harborapi/models/scanner.py</code> <pre><code>def sort(self, descending: bool = True, use_cvss: bool = False) -&gt; None:\n    \"\"\"Sorts the vulnerabilities by severity in place.\n\n    A wrapper around `vulnerabilities.sort` that sorts by severity,\n    then optionally by CVSS score to break ties.\n\n    Parameters\n    ----------\n    descending : bool, optional\n        Whether to sort in descending order, by default True\n        Equivalent to `reverse=True` in `sorted()`.\n    use_cvss : bool, optional\n        Whether to use CVSS score to determine sorting order\n        when items have identical severity, by default False\n        This is somewhat experimental and may be removed in the future.\n    \"\"\"\n\n    def cmp(v1: VulnerabilityItem, v2: VulnerabilityItem) -&gt; int:\n        if v1.severity &gt; v2.severity:\n            return 1\n        elif v1.severity &lt; v2.severity:\n            return -1\n        if not use_cvss:\n            return 0\n        diff = v1.get_cvss_score(self.scanner) - v2.get_cvss_score(self.scanner)\n        if diff &gt; 0:\n            return 1\n        elif diff &lt; 0:\n            return -1\n        return 0\n\n    self.vulnerabilities.sort(key=functools.cmp_to_key(cmp), reverse=descending)\n</code></pre>"}, {"location": "reference/models/_scanner/#harborapi.models._scanner.HarborVulnerabilityReport.top_vulns", "title": "<code>top_vulns(n=5, fixable=False)</code>", "text": "<p>Returns the n most severe vulnerabilities.</p> <p>Parameters:</p> Name Type Description Default <code>n</code> <code>int</code> <p>The maximum number of vulnerabilities to return.</p> <code>5</code> <code>fixable</code> <code>bool</code> <p>If <code>True</code>, only vulnerabilities with a fix version are returned.</p> <code>False</code> <p>Returns:</p> Type Description <code>List[VulnerabilityItem]</code> <p>The n most severe vulnerabilities.</p> Source code in <code>harborapi/models/scanner.py</code> <pre><code>def top_vulns(self, n: int = 5, fixable: bool = False) -&gt; List[VulnerabilityItem]:\n    \"\"\"Returns the n most severe vulnerabilities.\n\n\n    Parameters\n    ----------\n    n : int\n        The maximum number of vulnerabilities to return.\n    fixable : bool\n        If `True`, only vulnerabilities with a fix version are returned.\n\n    Returns\n    -------\n    List[VulnerabilityItem]\n        The n most severe vulnerabilities.\n\n    \"\"\"\n    vulns: Iterable[VulnerabilityItem] = []\n    if fixable:\n        vulns = self.fixable\n    else:\n        vulns = self.vulnerabilities\n    vulns = filter(lambda v: v.get_cvss_score(self.scanner) is not None, vulns)\n    return sorted(\n        vulns, key=lambda v: v.get_cvss_score(self.scanner), reverse=True\n    )[:n]\n</code></pre>"}, {"location": "reference/models/_scanner/#harborapi.models._scanner.HarborVulnerabilityReport.has_cve", "title": "<code>has_cve(cve_id, case_sensitive=False)</code>", "text": "<p>Whether or not the report contains a vulnerability with the given CVE ID.</p> <p>Parameters:</p> Name Type Description Default <code>cve_id</code> <code>str</code> <p>The CVE ID to search for.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>Report contains the a vulnerability with the given CVE ID.</p> Source code in <code>harborapi/models/scanner.py</code> <pre><code>def has_cve(self, cve_id: str, case_sensitive: bool = False) -&gt; bool:\n    \"\"\"Whether or not the report contains a vulnerability with the given CVE ID.\n\n    Parameters\n    ----------\n    cve_id : str\n        The CVE ID to search for.\n\n    Returns\n    -------\n    bool\n        Report contains the a vulnerability with the given CVE ID.\n    \"\"\"\n    return self.vuln_with_cve(cve_id, case_sensitive) is not None\n</code></pre>"}, {"location": "reference/models/_scanner/#harborapi.models._scanner.HarborVulnerabilityReport.has_description", "title": "<code>has_description(description, case_sensitive=False)</code>", "text": "<p>Whether or not the report contains a vulnerability whose description contains the given string.</p> <p>Parameters:</p> Name Type Description Default <code>description</code> <code>str</code> <p>The string to search for in the descriptions.</p> required <code>case_sensitive</code> <code>bool</code> <p>Case sensitive search, by default False</p> <code>False</code> <p>Returns:</p> Type Description <code>bool</code> <p>The report contains a vulnerability whose description contains the given string.</p> Source code in <code>harborapi/models/scanner.py</code> <pre><code>def has_description(self, description: str, case_sensitive: bool = False) -&gt; bool:\n    \"\"\"Whether or not the report contains a vulnerability whose description contains the given string.\n\n    Parameters\n    ----------\n    description : str\n        The string to search for in the descriptions.\n    case_sensitive : bool\n        Case sensitive search, by default False\n\n    Returns\n    -------\n    bool\n        The report contains a vulnerability whose description contains the given string.\n    \"\"\"\n    for _ in self.vulns_with_description(description, case_sensitive):\n        return True\n    return False\n</code></pre>"}, {"location": "reference/models/_scanner/#harborapi.models._scanner.HarborVulnerabilityReport.has_package", "title": "<code>has_package(package, case_sensitive=False)</code>", "text": "<p>Whether or not the report contains a vulnerability affecting the given package.</p> <p>Parameters:</p> Name Type Description Default <code>package</code> <code>str</code> <p>Name of the package to search for.</p> required <code>case_sensitive</code> <code>bool</code> <p>Case sensitive search, by default False</p> <code>False</code> <p>Returns:</p> Type Description <code>bool</code> <p>The given package is affected by a vulnerability in the report.</p> Source code in <code>harborapi/models/scanner.py</code> <pre><code>def has_package(self, package: str, case_sensitive: bool = False) -&gt; bool:\n    \"\"\"Whether or not the report contains a vulnerability affecting the given package.\n\n    Parameters\n    ----------\n    package : str\n        Name of the package to search for.\n    case_sensitive : bool\n        Case sensitive search, by default False\n\n    Returns\n    -------\n    bool\n        The given package is affected by a vulnerability in the report.\n    \"\"\"\n    for _ in self.vulns_with_package(package, case_sensitive):\n        return True\n    return False\n</code></pre>"}, {"location": "reference/models/_scanner/#harborapi.models._scanner.HarborVulnerabilityReport.vuln_with_cve", "title": "<code>vuln_with_cve(cve, case_sensitive=False)</code>", "text": "<p>Returns a vulnerability with the specified CVE ID if it exists in the report.</p> <p>Parameters:</p> Name Type Description Default <code>cve</code> <code>str</code> <p>The CVE ID of the vulnerability to return.</p> required <code>case_sensitive</code> <code>bool</code> <p>Case sensitive search, by default False</p> <code>False</code> <p>Returns:</p> Type Description <code>Optional[VulnerabilityItem]</code> <p>A vulnerability with the specified CVE ID if it exists, otherwise <code>None</code>.</p> Source code in <code>harborapi/models/scanner.py</code> <pre><code>def vuln_with_cve(\n    self, cve: str, case_sensitive: bool = False\n) -&gt; Optional[VulnerabilityItem]:\n    \"\"\"Returns a vulnerability with the specified CVE ID if it exists in the report.\n\n    Parameters\n    ----------\n    cve : str\n        The CVE ID of the vulnerability to return.\n    case_sensitive : bool\n        Case sensitive search, by default False\n\n    Returns\n    -------\n    Optional[VulnerabilityItem]\n        A vulnerability with the specified CVE ID if it exists, otherwise `None`.\n    \"\"\"\n    for vuln in self.vulnerabilities:\n        if vuln.id is None:\n            continue\n        vuln_id = vuln.id\n        if not case_sensitive:\n            vuln_id = vuln.id.lower()\n            cve = cve.lower()\n        if vuln_id == cve:\n            return vuln\n    return None\n</code></pre>"}, {"location": "reference/models/_scanner/#harborapi.models._scanner.HarborVulnerabilityReport.vulns_with_package", "title": "<code>vulns_with_package(package, case_sensitive=False)</code>", "text": "<p>Generator that yields all vulnerabilities that affect the given package.</p> <p>Parameters:</p> Name Type Description Default <code>package</code> <code>str</code> <p>The package name to search for.</p> required <code>case_sensitive</code> <code>bool</code> <p>Case sensitive search, by default False</p> <code>False</code> <p>Yields:</p> Type Description <code>VulnerabilityItem</code> <p>Vulnerability that affects the given package.</p> Source code in <code>harborapi/models/scanner.py</code> <pre><code>def vulns_with_package(\n    self, package: str, case_sensitive: bool = False\n) -&gt; Iterable[VulnerabilityItem]:\n    \"\"\"Generator that yields all vulnerabilities that affect the given package.\n\n    Parameters\n    ----------\n    package : str\n        The package name to search for.\n    case_sensitive : bool\n        Case sensitive search, by default False\n\n    Yields\n    ------\n    VulnerabilityItem\n        Vulnerability that affects the given package.\n    \"\"\"\n    for vuln in self.vulnerabilities:\n        if vuln.package is None:\n            continue\n        vuln_package = vuln.package\n        if not case_sensitive:\n            vuln_package = vuln.package.lower()\n            package = package.lower()\n        if vuln_package == package:\n            yield vuln\n</code></pre>"}, {"location": "reference/models/_scanner/#harborapi.models._scanner.HarborVulnerabilityReport.vulns_with_description", "title": "<code>vulns_with_description(description, case_sensitive=False)</code>", "text": "<p>Generator that yields all vulnerabilities whose description contains the given string.</p> <p>Parameters:</p> Name Type Description Default <code>description</code> <code>str</code> <p>The string to search for in vulnerability descriptions.</p> required <code>case_sensitive</code> <code>bool</code> <p>Case sensitive search, by default False</p> <code>False</code> <p>Yields:</p> Type Description <code>VulnerabilityItem</code> <p>Vulnerability whose description contains the given string.</p> Source code in <code>harborapi/models/scanner.py</code> <pre><code>def vulns_with_description(\n    self, description: str, case_sensitive: bool = False\n) -&gt; Iterable[VulnerabilityItem]:\n    \"\"\"Generator that yields all vulnerabilities whose description contains the given string.\n\n    Parameters\n    ----------\n    description : str\n        The string to search for in vulnerability descriptions.\n    case_sensitive : bool\n        Case sensitive search, by default False\n\n    Yields\n    ------\n    VulnerabilityItem\n        Vulnerability whose description contains the given string.\n    \"\"\"\n    for vuln in self.vulnerabilities:\n        if vuln.description is None:\n            continue\n        vuln_description = vuln.description\n        if not case_sensitive:\n            description = description.lower()\n            vuln_description = vuln_description.lower()\n        if description in vuln_description:\n            yield vuln\n</code></pre>"}, {"location": "reference/models/_scanner/#harborapi.models._scanner.get_semver", "title": "<code>get_semver(version)</code>", "text": "Source code in <code>harborapi/version.py</code> <pre><code>def get_semver(version: Optional[VersionType]) -&gt; SemVer:\n    if isinstance(version, SemVer):\n        return version\n    elif isinstance(version, tuple):\n        for i, v in enumerate(version):\n            # first 3 values are major, minor, patch\n            if i &lt;= 2:\n                if not isinstance(v, int):\n                    raise ValueError(\n                        f\"Version tuple must contain integers, got {version}\"\n                    )\n                elif v &lt; 0:\n                    raise ValueError(\n                        f\"Version tuple must contain positive integers, got {version}\"\n                    )\n            try:\n                return SemVer(*version)\n            except Exception as e:\n                raise ValueError(f\"Invalid version {version}: {e}\")\n        else:\n            raise ValueError(f\"Invalid semver tuple: {version}\")\n    elif isinstance(version, int):\n        # Return SemVer with major version only if version is an integer\n        return SemVer(version)\n    elif version is None:\n        # Return empty SemVer if version is None or empty string\n        return SemVer(0, 0, 0)\n\n    # Otherwise, parse the version string\n    parts = version.split(\".\", 2)\n    major, minor, patch = 0, 0, 0\n    prerelease = None\n    build = None\n    if len(parts) &gt; 0:\n        major = clean_version_number(parts[0])\n    if len(parts) &gt; 1:\n        minor = clean_version_number(parts[1])\n    # Patch + prerelease + build\n    if len(parts) &gt; 2:\n        patch_str = parts[2]\n        # Get prerelease (if exists)\n        try:\n            patch_str, prerelease = patch_str.split(\"-\", 1)\n        except:  # noqa: E722\n            pass\n        # Get build info (if exists)\n        try:\n            if prerelease:\n                prerelease, build = prerelease.split(\"+\", 1)\n            else:\n                patch_str, build = patch_str.split(\"+\", 1)\n        except:  # noqa: E722\n            pass\n        patch = clean_version_number(patch_str)\n\n    return SemVer(major, minor, patch, prerelease, build)\n</code></pre>"}, {"location": "reference/models/_scanner/#harborapi.models._scanner.most_severe", "title": "<code>most_severe(severities)</code>", "text": "<p>Returns the highest severity in a list of severities.</p> Source code in <code>harborapi/models/scanner.py</code> <pre><code>def most_severe(severities: Iterable[Severity]) -&gt; Severity:\n    \"\"\"Returns the highest severity in a list of severities.\"\"\"\n    return max(severities, key=lambda x: SEVERITY_PRIORITY[x], default=Severity.unknown)\n</code></pre>"}, {"location": "reference/models/_scanner/#harborapi.models._scanner.sort_distribution", "title": "<code>sort_distribution(distribution)</code>", "text": "<p>Turn a counter of Severities into a sorted list of (severity, count) tuples.</p> Source code in <code>harborapi/models/scanner.py</code> <pre><code>def sort_distribution(distribution: \"Counter[Severity]\") -&gt; List[Tuple[Severity, int]]:\n    \"\"\"Turn a counter of Severities into a sorted list of (severity, count) tuples.\"\"\"\n    return [\n        (k, v)\n        for k, v in sorted(distribution.items(), key=lambda x: SEVERITY_PRIORITY[x[0]])\n    ]\n</code></pre>"}, {"location": "reference/models/base/", "title": "harborapi.models.base", "text": "<p>Base module for models that defines a base Pydantic model class that adds shared functionality and capabilities to all models.</p> <p>Support for printing the models as Rich tables is added through the use of the special <code>__rich_console__</code> method. See the Rich documentation for more information: https://rich.readthedocs.io/en/latest/protocol.html#console-render/.</p>"}, {"location": "reference/models/base/#harborapi.models.base.rich_installed", "title": "<code>rich_installed = True</code>  <code>module-attribute</code>", "text": ""}, {"location": "reference/models/base/#harborapi.models.base.BaseModelType", "title": "<code>BaseModelType = TypeVar('BaseModelType', bound='BaseModel')</code>  <code>module-attribute</code>", "text": ""}, {"location": "reference/models/base/#harborapi.models.base.DEPTH_TITLE_COLORS", "title": "<code>DEPTH_TITLE_COLORS = {0: 'magenta', 1: 'cyan', 2: 'blue', 3: 'green', 4: 'yellow', 5: 'red'}</code>  <code>module-attribute</code>", "text": ""}, {"location": "reference/models/base/#harborapi.models.base.T", "title": "<code>T = TypeVar('T')</code>  <code>module-attribute</code>", "text": ""}, {"location": "reference/models/base/#harborapi.models.base.RootModel", "title": "<code>RootModel</code>", "text": "Source code in <code>harborapi/models/base.py</code> <pre><code>class RootModel(PydanticRootModel[T]):\n    model_config = ConfigDict(validate_assignment=True)\n\n    root: T\n\n    def __bool__(self) -&gt; bool:\n        return bool(self.root)\n\n    def __iter__(self) -&gt; Generator[Tuple[Any, Any], None, None]:\n        # TODO: fix API spec so root  types can never be none, only\n        # the empty container. That way we can always iterate and access\n        # without checking for None.\n        if isinstance(self.root, Iterable):\n            yield from iter(self.root)  # pyright: ignore[reportUnknownArgumentType, reportUnknownMemberType]\n        else:\n            yield from iter([])\n\n    def __getitem__(self, key: Any) -&gt; Any:\n        if isinstance(self.root, (Mapping, Sequence)):\n            return self.root[key]  # pyright: ignore[reportUnknownVariableType, reportUnknownMemberType]\n        return None\n\n    # Enables dot access to dict keys for backwards compatibility\n    def __getattr__(self, attr: str) -&gt; T:\n        try:\n            return self.root[attr]  # pyright: ignore[reportUnknownVariableType, reportIndexIssue]\n        except (KeyError, TypeError, IndexError):\n            raise AttributeError(f\"{self.__class__.__name__} has no attribute {attr}\")\n</code></pre>"}, {"location": "reference/models/base/#harborapi.models.base.RootModel.model_config", "title": "<code>model_config = ConfigDict(validate_assignment=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/base/#harborapi.models.base.RootModel.root", "title": "<code>root</code>  <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/base/#harborapi.models.base.RootModel.__bool__", "title": "<code>__bool__()</code>", "text": "Source code in <code>harborapi/models/base.py</code> <pre><code>def __bool__(self) -&gt; bool:\n    return bool(self.root)\n</code></pre>"}, {"location": "reference/models/base/#harborapi.models.base.RootModel.__iter__", "title": "<code>__iter__()</code>", "text": "Source code in <code>harborapi/models/base.py</code> <pre><code>def __iter__(self) -&gt; Generator[Tuple[Any, Any], None, None]:\n    # TODO: fix API spec so root  types can never be none, only\n    # the empty container. That way we can always iterate and access\n    # without checking for None.\n    if isinstance(self.root, Iterable):\n        yield from iter(self.root)  # pyright: ignore[reportUnknownArgumentType, reportUnknownMemberType]\n    else:\n        yield from iter([])\n</code></pre>"}, {"location": "reference/models/base/#harborapi.models.base.RootModel.__getitem__", "title": "<code>__getitem__(key)</code>", "text": "Source code in <code>harborapi/models/base.py</code> <pre><code>def __getitem__(self, key: Any) -&gt; Any:\n    if isinstance(self.root, (Mapping, Sequence)):\n        return self.root[key]  # pyright: ignore[reportUnknownVariableType, reportUnknownMemberType]\n    return None\n</code></pre>"}, {"location": "reference/models/base/#harborapi.models.base.RootModel.__getattr__", "title": "<code>__getattr__(attr)</code>", "text": "Source code in <code>harborapi/models/base.py</code> <pre><code>def __getattr__(self, attr: str) -&gt; T:\n    try:\n        return self.root[attr]  # pyright: ignore[reportUnknownVariableType, reportIndexIssue]\n    except (KeyError, TypeError, IndexError):\n        raise AttributeError(f\"{self.__class__.__name__} has no attribute {attr}\")\n</code></pre>"}, {"location": "reference/models/base/#harborapi.models.base.BaseModel", "title": "<code>BaseModel</code>", "text": "Source code in <code>harborapi/models/base.py</code> <pre><code>class BaseModel(PydanticBaseModel):\n    model_config = ConfigDict(extra=\"allow\", validate_assignment=True, strict=False)\n\n    # Validators\n\n    # The __rich* properties are only used by methods defined when Rich\n    # is installed, but they are defined here, so that static typing works\n    # when overriding the properties in subclasses.\n    @property\n    def __rich_table_title__(self) -&gt; str:\n        \"\"\"The title to use for the table representation of the model.\n        By default, the model's class name is be used.\n        \"\"\"\n        try:\n            title = self.__name__\n            assert isinstance(title, str)\n        except (AttributeError, AssertionError):\n            title = self.__class__.__name__\n        return title\n\n    @property\n    def __rich_panel_title__(self) -&gt; Optional[str]:\n        \"\"\"Title of the panel that wraps the table representation of the model.\"\"\"\n        return None\n\n    def convert_to(\n        self, model: Type[BaseModelType], extra: bool = False\n    ) -&gt; BaseModelType:\n        \"\"\"Converts the model to a different model type.\n\n        By default, only fields that are defined in the destination model\n        are included in the converted model.\n\n        Parameters\n        ----------\n        model : Type[BaseModelType]\n            The model type to convert to.\n        extra : bool\n            Whether to include fields that are not defined in the destination model.\n\n        Returns\n        -------\n        BaseModelType\n            The converted model.\n        \"\"\"\n        # TODO: include mapping of source fields to destination fields\n        # e.g. Project.name -&gt; ProjectReq.project_name\n        # pass in mapping: {\"name\": \"project_name\"}\n        if extra:\n            include = None\n        else:\n            include = model.get_model_fields()\n        return model.model_validate(self.model_dump(include=include))\n\n    @classmethod\n    def get_model_fields(cls) -&gt; Set[str]:\n        \"\"\"Get a list of the names of the model's fields.\n\n        Returns\n        -------\n        List[str]\n            The names of the model's fields.\n        \"\"\"\n        return set(cls.model_fields)\n\n    if rich_installed:\n\n        def __rich_console__(\n            self, console: Console, options: ConsoleOptions\n        ) -&gt; RenderResult:\n            \"\"\"Rich console representation of the model.\n            Returns a panel containing tables representing the model's\n            fields and values.\n            If the model has a nested model, the nested model's table representation\n            is printed after the main table.\n\n            See: https://rich.readthedocs.io/en/latest/protocol.html#console-render\n            \"\"\"\n            yield self.as_panel(with_description=False)\n\n        def as_panel(self, title: Optional[str] = None, **kwargs: Any) -&gt; Panel:\n            \"\"\"Returns table representation of model wrapped in a Panel.\n            Passes all keyword arguments to `as_table`.\n\n            Returns\n            -------\n            Panel\n                A Rich panel containing the table representation of the model.\n            \"\"\"\n            title = title or self.__rich_panel_title__\n            return Panel(Group(*self.as_table(**kwargs)), title=title)\n\n        def as_table(\n            self,\n            with_description: bool = False,\n            max_depth: Optional[int] = None,\n            parent_field: Optional[str] = None,\n            _depth: int = 1,\n        ) -&gt; Iterable[Table]:\n            \"\"\"Returns a Rich table representation of the model, and any nested models.\n\n            Parameters\n            ----------\n            with_description : bool\n                Whether to include the description of the model fields.\n            max_depth : Optional[int]\n                The maximum depth to print nested models.\n                `None` means no limit.\n            parent_field : Optional[str]\n                The title of the parent field that contains this model.\n                Used when printing submodels.\n            _depth : int\n                DO NOT SET THIS.\n                This is used internally to track the current depth level.\n\n            Returns\n            -------\n            Iterable[Table]\n                A generator of Rich tables representing the model and any nested models.\n            \"\"\"\n            # VOCABULARY:\n            # \"field\" -&gt; a field in the model spec\n            # \"field name\" -&gt; the name of the field in the model spec\n            # \"submodel\" -&gt; a nested model\n            # \"submodel table\" -&gt; the table representation of a nested model\n\n            # None and n &lt;= 0 means no limit to recursion depth\n            if max_depth is not None and max_depth &lt;= 0:\n                max_depth = None\n\n            # TODO: add list index indicator for list fields\n            if not parent_field:\n                title = type(self).__qualname__\n            else:\n                title = f\"{parent_field}\"\n\n            columns = [\n                Column(\n                    header=\"Field\", justify=\"left\", style=\"green\", header_style=\"bold\"\n                ),\n                Column(header=\"Value\", style=\"blue\", justify=\"left\", overflow=\"fold\"),\n            ]\n            if with_description:\n                columns.append(\n                    Column(header=\"Description\", style=\"yellow\", justify=\"left\"),\n                )\n\n            table = Table(\n                title=f\"[bold]{title}[/bold]\",\n                title_style=DEPTH_TITLE_COLORS.get(_depth, \"magenta\"),\n                title_justify=\"left\",\n                expand=True,\n                *columns,\n            )\n\n            subtables = []  # type: list[Iterable[Table]]\n\n            def add_submodel_table(field_title: str, submodel: \"BaseModel\") -&gt; str:\n                \"\"\"Adds a submodel table to the subtables list.\"\"\"\n                if parent_field:\n                    pfield = f\"{parent_field}.{field_title}\"\n                else:\n                    pfield = f\"{type(self).__qualname__}.{field_title}\"\n                submodel_table = submodel.as_table(\n                    with_description=with_description,\n                    max_depth=max_depth,\n                    _depth=_depth + 1,\n                    parent_field=pfield,\n                )\n                subtables.append(submodel_table)\n                return pfield\n\n            # Iterate over self to get model fields + extra fields\n            for field_name, value in super(BaseModel, self).__iter__():\n                # Prioritize getting field info from __fields__ dict\n                # since this dict contains more metadata for the field\n                field = self.model_fields.get(field_name)\n                if field is not None:\n                    # Try to use field title if available\n                    field_title = str(field.title or field_name)\n                    # Get the field value\n                    value = getattr(self, field_name)\n                    description = str(field.description) or \"\"\n                else:\n                    field_title = field_name\n                    description = \"\"\n\n                submodels = []  # type: Iterable[BaseModel]\n                if isinstance(value, BaseModel):\n                    submodels = [value]\n                elif isinstance(value, Iterable):\n                    if all(isinstance(v, BaseModel) for v in value):\n                        submodels = value\n\n                # Only print the submodel table if we are not at the max depth\n                # If we don't enter this, we print the string representation of the\n                # submodel(s) in the main table.\n                if submodels and (max_depth is None or _depth &lt; max_depth):\n                    # consume iterable immediately so we can get table title\n                    # It's likely this is NOT a generator, but we don't want to\n                    # assume that.\n                    submodels = list(submodels)\n                    table_title = \"\"\n                    for submodel in submodels:\n                        table_title = add_submodel_table(field_title, submodel)\n                    value = f\"[bold]See below ({table_title})[/bold]\"\n\n                row = [field_title, str(value)]\n                if with_description:\n                    row.append(description)\n                table.add_row(*row)\n\n            # TODO: sort table rows by field name\n\n            yield table\n            for subtable in subtables:\n                yield from subtable\n</code></pre>"}, {"location": "reference/models/base/#harborapi.models.base.BaseModel.model_config", "title": "<code>model_config = ConfigDict(extra='allow', validate_assignment=True, strict=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/base/#harborapi.models.base.BaseModel.__rich_table_title__", "title": "<code>__rich_table_title__</code>  <code>property</code>", "text": "<p>The title to use for the table representation of the model. By default, the model's class name is be used.</p>"}, {"location": "reference/models/base/#harborapi.models.base.BaseModel.__rich_panel_title__", "title": "<code>__rich_panel_title__</code>  <code>property</code>", "text": "<p>Title of the panel that wraps the table representation of the model.</p>"}, {"location": "reference/models/base/#harborapi.models.base.BaseModel.convert_to", "title": "<code>convert_to(model, extra=False)</code>", "text": "<p>Converts the model to a different model type.</p> <p>By default, only fields that are defined in the destination model are included in the converted model.</p> <p>Parameters:</p> Name Type Description Default <code>model</code> <code>Type[BaseModelType]</code> <p>The model type to convert to.</p> required <code>extra</code> <code>bool</code> <p>Whether to include fields that are not defined in the destination model.</p> <code>False</code> <p>Returns:</p> Type Description <code>BaseModelType</code> <p>The converted model.</p> Source code in <code>harborapi/models/base.py</code> <pre><code>def convert_to(\n    self, model: Type[BaseModelType], extra: bool = False\n) -&gt; BaseModelType:\n    \"\"\"Converts the model to a different model type.\n\n    By default, only fields that are defined in the destination model\n    are included in the converted model.\n\n    Parameters\n    ----------\n    model : Type[BaseModelType]\n        The model type to convert to.\n    extra : bool\n        Whether to include fields that are not defined in the destination model.\n\n    Returns\n    -------\n    BaseModelType\n        The converted model.\n    \"\"\"\n    # TODO: include mapping of source fields to destination fields\n    # e.g. Project.name -&gt; ProjectReq.project_name\n    # pass in mapping: {\"name\": \"project_name\"}\n    if extra:\n        include = None\n    else:\n        include = model.get_model_fields()\n    return model.model_validate(self.model_dump(include=include))\n</code></pre>"}, {"location": "reference/models/base/#harborapi.models.base.BaseModel.get_model_fields", "title": "<code>get_model_fields()</code>  <code>classmethod</code>", "text": "<p>Get a list of the names of the model's fields.</p> <p>Returns:</p> Type Description <code>List[str]</code> <p>The names of the model's fields.</p> Source code in <code>harborapi/models/base.py</code> <pre><code>@classmethod\ndef get_model_fields(cls) -&gt; Set[str]:\n    \"\"\"Get a list of the names of the model's fields.\n\n    Returns\n    -------\n    List[str]\n        The names of the model's fields.\n    \"\"\"\n    return set(cls.model_fields)\n</code></pre>"}, {"location": "reference/models/base/#harborapi.models.base.BaseModel.__rich_console__", "title": "<code>__rich_console__(console, options)</code>", "text": "<p>Rich console representation of the model. Returns a panel containing tables representing the model's fields and values. If the model has a nested model, the nested model's table representation is printed after the main table.</p> <p>See: https://rich.readthedocs.io/en/latest/protocol.html#console-render</p> Source code in <code>harborapi/models/base.py</code> <pre><code>def __rich_console__(\n    self, console: Console, options: ConsoleOptions\n) -&gt; RenderResult:\n    \"\"\"Rich console representation of the model.\n    Returns a panel containing tables representing the model's\n    fields and values.\n    If the model has a nested model, the nested model's table representation\n    is printed after the main table.\n\n    See: https://rich.readthedocs.io/en/latest/protocol.html#console-render\n    \"\"\"\n    yield self.as_panel(with_description=False)\n</code></pre>"}, {"location": "reference/models/base/#harborapi.models.base.BaseModel.as_panel", "title": "<code>as_panel(title=None, **kwargs)</code>", "text": "<p>Returns table representation of model wrapped in a Panel. Passes all keyword arguments to <code>as_table</code>.</p> <p>Returns:</p> Type Description <code>Panel</code> <p>A Rich panel containing the table representation of the model.</p> Source code in <code>harborapi/models/base.py</code> <pre><code>def as_panel(self, title: Optional[str] = None, **kwargs: Any) -&gt; Panel:\n    \"\"\"Returns table representation of model wrapped in a Panel.\n    Passes all keyword arguments to `as_table`.\n\n    Returns\n    -------\n    Panel\n        A Rich panel containing the table representation of the model.\n    \"\"\"\n    title = title or self.__rich_panel_title__\n    return Panel(Group(*self.as_table(**kwargs)), title=title)\n</code></pre>"}, {"location": "reference/models/base/#harborapi.models.base.BaseModel.as_table", "title": "<code>as_table(with_description=False, max_depth=None, parent_field=None, _depth=1)</code>", "text": "<p>Returns a Rich table representation of the model, and any nested models.</p> <p>Parameters:</p> Name Type Description Default <code>with_description</code> <code>bool</code> <p>Whether to include the description of the model fields.</p> <code>False</code> <code>max_depth</code> <code>Optional[int]</code> <p>The maximum depth to print nested models. <code>None</code> means no limit.</p> <code>None</code> <code>parent_field</code> <code>Optional[str]</code> <p>The title of the parent field that contains this model. Used when printing submodels.</p> <code>None</code> <code>_depth</code> <code>int</code> <p>DO NOT SET THIS. This is used internally to track the current depth level.</p> <code>1</code> <p>Returns:</p> Type Description <code>Iterable[Table]</code> <p>A generator of Rich tables representing the model and any nested models.</p> Source code in <code>harborapi/models/base.py</code> <pre><code>def as_table(\n    self,\n    with_description: bool = False,\n    max_depth: Optional[int] = None,\n    parent_field: Optional[str] = None,\n    _depth: int = 1,\n) -&gt; Iterable[Table]:\n    \"\"\"Returns a Rich table representation of the model, and any nested models.\n\n    Parameters\n    ----------\n    with_description : bool\n        Whether to include the description of the model fields.\n    max_depth : Optional[int]\n        The maximum depth to print nested models.\n        `None` means no limit.\n    parent_field : Optional[str]\n        The title of the parent field that contains this model.\n        Used when printing submodels.\n    _depth : int\n        DO NOT SET THIS.\n        This is used internally to track the current depth level.\n\n    Returns\n    -------\n    Iterable[Table]\n        A generator of Rich tables representing the model and any nested models.\n    \"\"\"\n    # VOCABULARY:\n    # \"field\" -&gt; a field in the model spec\n    # \"field name\" -&gt; the name of the field in the model spec\n    # \"submodel\" -&gt; a nested model\n    # \"submodel table\" -&gt; the table representation of a nested model\n\n    # None and n &lt;= 0 means no limit to recursion depth\n    if max_depth is not None and max_depth &lt;= 0:\n        max_depth = None\n\n    # TODO: add list index indicator for list fields\n    if not parent_field:\n        title = type(self).__qualname__\n    else:\n        title = f\"{parent_field}\"\n\n    columns = [\n        Column(\n            header=\"Field\", justify=\"left\", style=\"green\", header_style=\"bold\"\n        ),\n        Column(header=\"Value\", style=\"blue\", justify=\"left\", overflow=\"fold\"),\n    ]\n    if with_description:\n        columns.append(\n            Column(header=\"Description\", style=\"yellow\", justify=\"left\"),\n        )\n\n    table = Table(\n        title=f\"[bold]{title}[/bold]\",\n        title_style=DEPTH_TITLE_COLORS.get(_depth, \"magenta\"),\n        title_justify=\"left\",\n        expand=True,\n        *columns,\n    )\n\n    subtables = []  # type: list[Iterable[Table]]\n\n    def add_submodel_table(field_title: str, submodel: \"BaseModel\") -&gt; str:\n        \"\"\"Adds a submodel table to the subtables list.\"\"\"\n        if parent_field:\n            pfield = f\"{parent_field}.{field_title}\"\n        else:\n            pfield = f\"{type(self).__qualname__}.{field_title}\"\n        submodel_table = submodel.as_table(\n            with_description=with_description,\n            max_depth=max_depth,\n            _depth=_depth + 1,\n            parent_field=pfield,\n        )\n        subtables.append(submodel_table)\n        return pfield\n\n    # Iterate over self to get model fields + extra fields\n    for field_name, value in super(BaseModel, self).__iter__():\n        # Prioritize getting field info from __fields__ dict\n        # since this dict contains more metadata for the field\n        field = self.model_fields.get(field_name)\n        if field is not None:\n            # Try to use field title if available\n            field_title = str(field.title or field_name)\n            # Get the field value\n            value = getattr(self, field_name)\n            description = str(field.description) or \"\"\n        else:\n            field_title = field_name\n            description = \"\"\n\n        submodels = []  # type: Iterable[BaseModel]\n        if isinstance(value, BaseModel):\n            submodels = [value]\n        elif isinstance(value, Iterable):\n            if all(isinstance(v, BaseModel) for v in value):\n                submodels = value\n\n        # Only print the submodel table if we are not at the max depth\n        # If we don't enter this, we print the string representation of the\n        # submodel(s) in the main table.\n        if submodels and (max_depth is None or _depth &lt; max_depth):\n            # consume iterable immediately so we can get table title\n            # It's likely this is NOT a generator, but we don't want to\n            # assume that.\n            submodels = list(submodels)\n            table_title = \"\"\n            for submodel in submodels:\n                table_title = add_submodel_table(field_title, submodel)\n            value = f\"[bold]See below ({table_title})[/bold]\"\n\n        row = [field_title, str(value)]\n        if with_description:\n            row.append(description)\n        table.add_row(*row)\n\n    # TODO: sort table rows by field name\n\n    yield table\n    for subtable in subtables:\n        yield from subtable\n</code></pre>"}, {"location": "reference/models/buildhistory/", "title": "harborapi.models.buildhistory", "text": "<p>Module that defines build history models. These are not generated from the Swagger 2.0 schema, but are instead defined manually. This is because the Swagger 2.0 schema does not define the OIDC models.</p> <p>Models defined here are part of the Harbor API, but not documented in the official schema.</p> <p>The models in this module are NOT automatically generated.</p>"}, {"location": "reference/models/buildhistory/#harborapi.models.buildhistory.BuildHistoryEntry", "title": "<code>BuildHistoryEntry</code>", "text": "Source code in <code>harborapi/models/buildhistory.py</code> <pre><code>class BuildHistoryEntry(BaseModel):\n    created: datetime\n    created_by: str\n    author: Optional[str] = None\n    empty_layer: bool = False\n</code></pre>"}, {"location": "reference/models/buildhistory/#harborapi.models.buildhistory.BuildHistoryEntry.created", "title": "<code>created</code>  <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/buildhistory/#harborapi.models.buildhistory.BuildHistoryEntry.created_by", "title": "<code>created_by</code>  <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/buildhistory/#harborapi.models.buildhistory.BuildHistoryEntry.author", "title": "<code>author = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/buildhistory/#harborapi.models.buildhistory.BuildHistoryEntry.empty_layer", "title": "<code>empty_layer = False</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/mappings/", "title": "harborapi.models.mappings", "text": "<p>Custom mapping types.</p>"}, {"location": "reference/models/mappings/#harborapi.models.mappings.FirstDict", "title": "<code>FirstDict</code>", "text": "<p>Dict with method to get its first value.</p> Source code in <code>harborapi/models/mappings.py</code> <pre><code>class FirstDict(OrderedDict[_KT, _VT]):\n    \"\"\"Dict with method to get its first value.\"\"\"\n\n    def first(self) -&gt; Optional[_VT]:\n        \"\"\"Return the first value in the dict or None if dict is empty.\"\"\"\n        return next(iter(self.values()), None)\n</code></pre>"}, {"location": "reference/models/mappings/#harborapi.models.mappings.FirstDict.first", "title": "<code>first()</code>", "text": "<p>Return the first value in the dict or None if dict is empty.</p> Source code in <code>harborapi/models/mappings.py</code> <pre><code>def first(self) -&gt; Optional[_VT]:\n    \"\"\"Return the first value in the dict or None if dict is empty.\"\"\"\n    return next(iter(self.values()), None)\n</code></pre>"}, {"location": "reference/models/models/", "title": "harborapi.models.models", "text": "<p>The canonical representation of the Harbor API models, after modifications have been made to rectify inconsistencies and errors in the official Swagger schema. To see the unmodified auto-generated models, see the harborapi.models._models module.</p>"}, {"location": "reference/models/models/#harborapi.models.models.Error", "title": "<code>Error</code>", "text": "<p>               Bases: <code>BaseModel</code></p> <p>Error response from Harbor.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class Error(BaseModel):\n    \"\"\"Error response from Harbor.\"\"\"\n\n    code: Optional[str] = Field(default=None, description=\"The error code\")\n    message: Optional[str] = Field(default=None, description=\"The error message\")\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.Error.code", "title": "<code>code = Field(default=None, description='The error code')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Error.message", "title": "<code>message = Field(default=None, description='The error message')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.SearchRepository", "title": "<code>SearchRepository</code>", "text": "<p>               Bases: <code>BaseModel</code></p> <p>Repository search result.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class SearchRepository(BaseModel):\n    \"\"\"Repository search result.\"\"\"\n\n    project_id: Optional[int] = Field(\n        default=None, description=\"The ID of the project that the repository belongs to\"\n    )\n    project_name: Optional[str] = Field(\n        default=None,\n        description=\"The name of the project that the repository belongs to\",\n    )\n    project_public: Optional[bool] = Field(\n        default=None,\n        description=\"The flag to indicate the publicity of the project that the repository belongs to (1 is public, 0 is not)\",\n    )\n    repository_name: Optional[str] = Field(\n        default=None, description=\"The name of the repository\"\n    )\n    pull_count: Optional[int] = Field(\n        default=None, description=\"The count how many times the repository is pulled\"\n    )\n    artifact_count: Optional[int] = Field(\n        default=None, description=\"The count of artifacts in the repository\"\n    )\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.SearchRepository.project_id", "title": "<code>project_id = Field(default=None, description='The ID of the project that the repository belongs to')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.SearchRepository.project_name", "title": "<code>project_name = Field(default=None, description='The name of the project that the repository belongs to')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.SearchRepository.project_public", "title": "<code>project_public = Field(default=None, description='The flag to indicate the publicity of the project that the repository belongs to (1 is public, 0 is not)')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.SearchRepository.repository_name", "title": "<code>repository_name = Field(default=None, description='The name of the repository')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.SearchRepository.pull_count", "title": "<code>pull_count = Field(default=None, description='The count how many times the repository is pulled')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.SearchRepository.artifact_count", "title": "<code>artifact_count = Field(default=None, description='The count of artifacts in the repository')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Repository", "title": "<code>Repository</code>", "text": "<p>               Bases: <code>BaseModel</code></p> Source code in <code>harborapi/models/models.py</code> <pre><code>class Repository(BaseModel):\n    id: Optional[int] = Field(default=None, description=\"The ID of the repository\")\n    project_id: Optional[int] = Field(\n        default=None, description=\"The ID of the project that the repository belongs to\"\n    )\n    name: Optional[str] = Field(default=None, description=\"The name of the repository\")\n    description: Optional[str] = Field(\n        default=None, description=\"The description of the repository\"\n    )\n    artifact_count: Optional[int] = Field(\n        default=None, description=\"The count of the artifacts inside the repository\"\n    )\n    pull_count: Optional[int] = Field(\n        default=None,\n        description=\"The count that the artifact inside the repository pulled\",\n    )\n    creation_time: Optional[datetime] = Field(\n        default=None, description=\"The creation time of the repository\"\n    )\n    update_time: Optional[datetime] = Field(\n        default=None, description=\"The update time of the repository\"\n    )\n\n    @property\n    def base_name(self) -&gt; str:\n        \"\"\"The repository name without the project name\n\n        Returns\n        -------\n        Optional[str]\n            The basename of the repository name\n        \"\"\"\n        s = self.split_name()\n        return s[1] if s else \"\"\n\n    @property\n    def project_name(self) -&gt; str:\n        \"\"\"The name of the project that the repository belongs to\n\n        Returns\n        -------\n        Optional[str]\n            The name of the project that the repository belongs to\n        \"\"\"\n        s = self.split_name()\n        return s[0] if s else \"\"\n\n    def split_name(self) -&gt; Optional[Tuple[str, str]]:\n        \"\"\"Split name into tuple of project and repository name\n\n        Returns\n        -------\n        Optional[Tuple[str, str]]\n            Tuple of project name and repo name\n        \"\"\"\n        if not self.name:\n            return None\n        components = self.name.split(\"/\", 1)\n        if len(components) != 2:\n            logger.warning(\n                \"Repository name '%s' is not in the format &lt;project&gt;/&lt;repo&gt;\", self.name\n            )\n            return None\n        return (components[0], components[1])\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.Repository.id", "title": "<code>id = Field(default=None, description='The ID of the repository')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Repository.project_id", "title": "<code>project_id = Field(default=None, description='The ID of the project that the repository belongs to')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Repository.name", "title": "<code>name = Field(default=None, description='The name of the repository')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Repository.description", "title": "<code>description = Field(default=None, description='The description of the repository')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Repository.artifact_count", "title": "<code>artifact_count = Field(default=None, description='The count of the artifacts inside the repository')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Repository.pull_count", "title": "<code>pull_count = Field(default=None, description='The count that the artifact inside the repository pulled')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Repository.creation_time", "title": "<code>creation_time = Field(default=None, description='The creation time of the repository')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Repository.update_time", "title": "<code>update_time = Field(default=None, description='The update time of the repository')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Repository.base_name", "title": "<code>base_name</code>  <code>property</code>", "text": "<p>The repository name without the project name</p> <p>Returns:</p> Type Description <code>Optional[str]</code> <p>The basename of the repository name</p>"}, {"location": "reference/models/models/#harborapi.models.models.Repository.project_name", "title": "<code>project_name</code>  <code>property</code>", "text": "<p>The name of the project that the repository belongs to</p> <p>Returns:</p> Type Description <code>Optional[str]</code> <p>The name of the project that the repository belongs to</p>"}, {"location": "reference/models/models/#harborapi.models.models.Repository.split_name", "title": "<code>split_name()</code>", "text": "<p>Split name into tuple of project and repository name</p> <p>Returns:</p> Type Description <code>Optional[Tuple[str, str]]</code> <p>Tuple of project name and repo name</p> Source code in <code>harborapi/models/models.py</code> <pre><code>def split_name(self) -&gt; Optional[Tuple[str, str]]:\n    \"\"\"Split name into tuple of project and repository name\n\n    Returns\n    -------\n    Optional[Tuple[str, str]]\n        Tuple of project name and repo name\n    \"\"\"\n    if not self.name:\n        return None\n    components = self.name.split(\"/\", 1)\n    if len(components) != 2:\n        logger.warning(\n            \"Repository name '%s' is not in the format &lt;project&gt;/&lt;repo&gt;\", self.name\n        )\n        return None\n    return (components[0], components[1])\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.Tag", "title": "<code>Tag</code>", "text": "<p>               Bases: <code>BaseModel</code></p> Source code in <code>harborapi/models/models.py</code> <pre><code>class Tag(BaseModel):\n    id: Optional[int] = Field(default=None, description=\"The ID of the tag\")\n    repository_id: Optional[int] = Field(\n        default=None, description=\"The ID of the repository that the tag belongs to\"\n    )\n    artifact_id: Optional[int] = Field(\n        default=None, description=\"The ID of the artifact that the tag attached to\"\n    )\n    name: Optional[str] = Field(default=None, description=\"The name of the tag\")\n    push_time: Optional[datetime] = Field(\n        default=None, description=\"The push time of the tag\"\n    )\n    pull_time: Optional[datetime] = Field(\n        default=None, description=\"The latest pull time of the tag\"\n    )\n    immutable: Optional[bool] = Field(\n        default=None, description=\"The immutable status of the tag\"\n    )\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.Tag.id", "title": "<code>id = Field(default=None, description='The ID of the tag')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Tag.repository_id", "title": "<code>repository_id = Field(default=None, description='The ID of the repository that the tag belongs to')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Tag.artifact_id", "title": "<code>artifact_id = Field(default=None, description='The ID of the artifact that the tag attached to')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Tag.name", "title": "<code>name = Field(default=None, description='The name of the tag')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Tag.push_time", "title": "<code>push_time = Field(default=None, description='The push time of the tag')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Tag.pull_time", "title": "<code>pull_time = Field(default=None, description='The latest pull time of the tag')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Tag.immutable", "title": "<code>immutable = Field(default=None, description='The immutable status of the tag')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ExtraAttrs", "title": "<code>ExtraAttrs</code>", "text": "<p>               Bases: <code>RootModel[Optional[Dict[str, Dict[str, Any]]]]</code></p> Source code in <code>harborapi/models/models.py</code> <pre><code>class ExtraAttrs(RootModel[Optional[Dict[str, Dict[str, Any]]]]):\n    root: Optional[Dict[str, Any]] = None\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.ExtraAttrs.root", "title": "<code>root = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Annotations", "title": "<code>Annotations</code>", "text": "<p>               Bases: <code>RootModel[Optional[Dict[str, str]]]</code></p> Source code in <code>harborapi/models/models.py</code> <pre><code>class Annotations(RootModel[Optional[Dict[str, str]]]):\n    root: Optional[Dict[str, str]] = None\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.Annotations.root", "title": "<code>root = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.AdditionLink", "title": "<code>AdditionLink</code>", "text": "<p>               Bases: <code>BaseModel</code></p> Source code in <code>harborapi/models/models.py</code> <pre><code>class AdditionLink(BaseModel):\n    href: Optional[str] = Field(default=None, description=\"The link of the addition\")\n    absolute: Optional[bool] = Field(\n        default=None, description=\"Determine whether the link is an absolute URL or not\"\n    )\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.AdditionLink.href", "title": "<code>href = Field(default=None, description='The link of the addition')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.AdditionLink.absolute", "title": "<code>absolute = Field(default=None, description='Determine whether the link is an absolute URL or not')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Platform", "title": "<code>Platform</code>", "text": "<p>               Bases: <code>BaseModel</code></p> Source code in <code>harborapi/models/models.py</code> <pre><code>class Platform(BaseModel):\n    architecture: Optional[str] = Field(\n        default=None, description=\"The architecture that the artifact applys to\"\n    )\n    os: Optional[str] = Field(\n        default=None, description=\"The OS that the artifact applys to\"\n    )\n    field_os_version_: Optional[str] = Field(\n        default=None,\n        alias=\"'os.version'\",\n        description=\"The version of the OS that the artifact applys to\",\n    )\n    field_os_features_: Optional[List[str]] = Field(\n        default=None,\n        alias=\"'os.features'\",\n        description=\"The features of the OS that the artifact applys to\",\n    )\n    variant: Optional[str] = Field(default=None, description=\"The variant of the CPU\")\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.Platform.architecture", "title": "<code>architecture = Field(default=None, description='The architecture that the artifact applys to')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Platform.os", "title": "<code>os = Field(default=None, description='The OS that the artifact applys to')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Platform.field_os_version_", "title": "<code>field_os_version_ = Field(default=None, alias=\"'os.version'\", description='The version of the OS that the artifact applys to')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Platform.field_os_features_", "title": "<code>field_os_features_ = Field(default=None, alias=\"'os.features'\", description='The features of the OS that the artifact applys to')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Platform.variant", "title": "<code>variant = Field(default=None, description='The variant of the CPU')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Label", "title": "<code>Label</code>", "text": "<p>               Bases: <code>BaseModel</code></p> Source code in <code>harborapi/models/models.py</code> <pre><code>class Label(BaseModel):\n    id: Optional[int] = Field(default=None, description=\"The ID of the label\")\n    name: Optional[str] = Field(default=None, description=\"The name the label\")\n    description: Optional[str] = Field(\n        default=None, description=\"The description the label\"\n    )\n    color: Optional[str] = Field(default=None, description=\"The color the label\")\n    scope: Optional[str] = Field(default=None, description=\"The scope the label\")\n    project_id: Optional[int] = Field(\n        default=None, description=\"The ID of project that the label belongs to\"\n    )\n    creation_time: Optional[datetime] = Field(\n        default=None, description=\"The creation time the label\"\n    )\n    update_time: Optional[datetime] = Field(\n        default=None, description=\"The update time of the label\"\n    )\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.Label.id", "title": "<code>id = Field(default=None, description='The ID of the label')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Label.name", "title": "<code>name = Field(default=None, description='The name the label')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Label.description", "title": "<code>description = Field(default=None, description='The description the label')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Label.color", "title": "<code>color = Field(default=None, description='The color the label')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Label.scope", "title": "<code>scope = Field(default=None, description='The scope the label')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Label.project_id", "title": "<code>project_id = Field(default=None, description='The ID of project that the label belongs to')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Label.creation_time", "title": "<code>creation_time = Field(default=None, description='The creation time the label')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Label.update_time", "title": "<code>update_time = Field(default=None, description='The update time of the label')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Scanner", "title": "<code>Scanner</code>", "text": "<p>               Bases: <code>BaseModel</code></p> Source code in <code>harborapi/models/models.py</code> <pre><code>class Scanner(BaseModel):\n    name: Optional[str] = Field(\n        default=None, description=\"Name of the scanner\", examples=[\"Trivy\"]\n    )\n    vendor: Optional[str] = Field(\n        default=None,\n        description=\"Name of the scanner provider\",\n        examples=[\"Aqua Security\"],\n    )\n    version: Optional[str] = Field(\n        default=None, description=\"Version of the scanner adapter\", examples=[\"v0.9.1\"]\n    )\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.Scanner.name", "title": "<code>name = Field(default=None, description='Name of the scanner', examples=['Trivy'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Scanner.vendor", "title": "<code>vendor = Field(default=None, description='Name of the scanner provider', examples=['Aqua Security'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Scanner.version", "title": "<code>version = Field(default=None, description='Version of the scanner adapter', examples=['v0.9.1'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.SBOMOverview", "title": "<code>SBOMOverview</code>", "text": "<p>               Bases: <code>BaseModel</code></p> <p>The generate SBOM overview information</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class SBOMOverview(BaseModel):\n    \"\"\"\n    The generate SBOM overview information\n    \"\"\"\n\n    start_time: Optional[datetime] = Field(\n        default=None,\n        description=\"The start time of the generating sbom report task\",\n        examples=[\"2006-01-02T14:04:05Z\"],\n    )\n    end_time: Optional[datetime] = Field(\n        default=None,\n        description=\"The end time of the generating sbom report task\",\n        examples=[\"2006-01-02T15:04:05Z\"],\n    )\n    scan_status: Optional[str] = Field(\n        default=None, description=\"The status of the generating SBOM task\"\n    )\n    sbom_digest: Optional[str] = Field(\n        default=None, description=\"The digest of the generated SBOM accessory\"\n    )\n    report_id: Optional[str] = Field(\n        default=None,\n        description=\"id of the native scan report\",\n        examples=[\"5f62c830-f996-11e9-957f-0242c0a89008\"],\n    )\n    duration: Optional[int] = Field(\n        default=None,\n        description=\"Time in seconds required to create the report\",\n        examples=[300],\n    )\n    scanner: Optional[Scanner] = None\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.SBOMOverview.start_time", "title": "<code>start_time = Field(default=None, description='The start time of the generating sbom report task', examples=['2006-01-02T14:04:05Z'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.SBOMOverview.end_time", "title": "<code>end_time = Field(default=None, description='The end time of the generating sbom report task', examples=['2006-01-02T15:04:05Z'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.SBOMOverview.scan_status", "title": "<code>scan_status = Field(default=None, description='The status of the generating SBOM task')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.SBOMOverview.sbom_digest", "title": "<code>sbom_digest = Field(default=None, description='The digest of the generated SBOM accessory')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.SBOMOverview.report_id", "title": "<code>report_id = Field(default=None, description='id of the native scan report', examples=['5f62c830-f996-11e9-957f-0242c0a89008'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.SBOMOverview.duration", "title": "<code>duration = Field(default=None, description='Time in seconds required to create the report', examples=[300])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.SBOMOverview.scanner", "title": "<code>scanner = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.VulnerabilitySummary", "title": "<code>VulnerabilitySummary</code>", "text": "<p>               Bases: <code>BaseModel</code></p> <p>Summary of vulnerabilities found in a scan.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class VulnerabilitySummary(BaseModel):\n    \"\"\"Summary of vulnerabilities found in a scan.\"\"\"\n\n    total: Optional[int] = Field(\n        default=None,\n        description=\"The total number of the found vulnerabilities\",\n        examples=[500],\n    )\n    fixable: Optional[int] = Field(\n        default=None,\n        description=\"The number of the fixable vulnerabilities\",\n        examples=[100],\n    )\n    summary: Optional[Dict[str, int]] = Field(\n        default=None,\n        description=\"Numbers of the vulnerabilities with different severity\",\n        examples=[{\"Critical\": 5, \"High\": 5}],\n    )\n    critical: int = Field(\n        default=0,\n        alias=\"Critical\",\n        description=\"The number of critical vulnerabilities detected.\",\n    )\n    high: int = Field(\n        default=0,\n        alias=\"High\",\n        description=\"The number of critical vulnerabilities detected.\",\n    )\n    medium: int = Field(\n        default=0,\n        alias=\"Medium\",\n        description=\"The number of critical vulnerabilities detected.\",\n    )\n    low: int = Field(\n        default=0,\n        alias=\"Low\",\n        description=\"The number of critical vulnerabilities detected.\",\n    )\n    unknown: int = Field(\n        default=0,\n        alias=\"Unknown\",\n        description=\"The number of critical vulnerabilities detected.\",\n    )\n\n    @model_validator(mode=\"before\")\n    @classmethod\n    def _assign_severity_breakdown(cls, values: Dict[str, Any]) -&gt; Dict[str, Any]:\n        summary = values.get(\"summary\") or {}\n        if not isinstance(summary, dict):\n            raise ValueError(\"'summary' must be a dict\")\n        return {**values, **summary}\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.VulnerabilitySummary.total", "title": "<code>total = Field(default=None, description='The total number of the found vulnerabilities', examples=[500])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.VulnerabilitySummary.fixable", "title": "<code>fixable = Field(default=None, description='The number of the fixable vulnerabilities', examples=[100])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.VulnerabilitySummary.summary", "title": "<code>summary = Field(default=None, description='Numbers of the vulnerabilities with different severity', examples=[{'Critical': 5, 'High': 5}])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.VulnerabilitySummary.critical", "title": "<code>critical = Field(default=0, alias='Critical', description='The number of critical vulnerabilities detected.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.VulnerabilitySummary.high", "title": "<code>high = Field(default=0, alias='High', description='The number of critical vulnerabilities detected.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.VulnerabilitySummary.medium", "title": "<code>medium = Field(default=0, alias='Medium', description='The number of critical vulnerabilities detected.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.VulnerabilitySummary.low", "title": "<code>low = Field(default=0, alias='Low', description='The number of critical vulnerabilities detected.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.VulnerabilitySummary.unknown", "title": "<code>unknown = Field(default=0, alias='Unknown', description='The number of critical vulnerabilities detected.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.AuditLog", "title": "<code>AuditLog</code>", "text": "<p>               Bases: <code>BaseModel</code></p> Source code in <code>harborapi/models/models.py</code> <pre><code>class AuditLog(BaseModel):\n    id: Optional[int] = Field(\n        default=None, description=\"The ID of the audit log entry.\"\n    )\n    username: Optional[str] = Field(\n        default=None, description=\"Username of the user in this log entry.\"\n    )\n    resource: Optional[str] = Field(\n        default=None, description=\"Name of the repository in this log entry.\"\n    )\n    resource_type: Optional[str] = Field(\n        default=None, description=\"Tag of the repository in this log entry.\"\n    )\n    operation: Optional[str] = Field(\n        default=None,\n        description=\"The operation against the repository in this log entry.\",\n    )\n    op_time: Optional[datetime] = Field(\n        default=None,\n        description=\"The time when this operation is triggered.\",\n        examples=[\"2006-01-02T15:04:05Z\"],\n    )\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.AuditLog.id", "title": "<code>id = Field(default=None, description='The ID of the audit log entry.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.AuditLog.username", "title": "<code>username = Field(default=None, description='Username of the user in this log entry.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.AuditLog.resource", "title": "<code>resource = Field(default=None, description='Name of the repository in this log entry.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.AuditLog.resource_type", "title": "<code>resource_type = Field(default=None, description='Tag of the repository in this log entry.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.AuditLog.operation", "title": "<code>operation = Field(default=None, description='The operation against the repository in this log entry.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.AuditLog.op_time", "title": "<code>op_time = Field(default=None, description='The time when this operation is triggered.', examples=['2006-01-02T15:04:05Z'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Metadata", "title": "<code>Metadata</code>", "text": "<p>               Bases: <code>BaseModel</code></p> Source code in <code>harborapi/models/models.py</code> <pre><code>class Metadata(BaseModel):\n    id: Optional[str] = Field(default=None, description=\"id\")\n    name: Optional[str] = Field(default=None, description=\"name\")\n    icon: Optional[str] = Field(default=None, description=\"icon\")\n    maintainers: Optional[List[str]] = Field(default=None, description=\"maintainers\")\n    version: Optional[str] = Field(default=None, description=\"version\")\n    source: Optional[str] = Field(default=None, description=\"source\")\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.Metadata.id", "title": "<code>id = Field(default=None, description='id')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Metadata.name", "title": "<code>name = Field(default=None, description='name')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Metadata.icon", "title": "<code>icon = Field(default=None, description='icon')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Metadata.maintainers", "title": "<code>maintainers = Field(default=None, description='maintainers')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Metadata.version", "title": "<code>version = Field(default=None, description='version')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Metadata.source", "title": "<code>source = Field(default=None, description='source')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Instance", "title": "<code>Instance</code>", "text": "<p>               Bases: <code>BaseModel</code></p> Source code in <code>harborapi/models/models.py</code> <pre><code>class Instance(BaseModel):\n    id: Optional[int] = Field(default=None, description=\"Unique ID\")\n    name: Optional[str] = Field(default=None, description=\"Instance name\")\n    description: Optional[str] = Field(\n        default=None, description=\"Description of instance\"\n    )\n    vendor: Optional[str] = Field(\n        default=None, description=\"Based on which driver, identified by ID\"\n    )\n    endpoint: Optional[str] = Field(\n        default=None, description=\"The service endpoint of this instance\"\n    )\n    auth_mode: Optional[str] = Field(\n        default=None, description=\"The authentication way supported\"\n    )\n    auth_info: Optional[Dict[str, str]] = Field(\n        default=None, description=\"The auth credential data if exists\"\n    )\n    status: Optional[str] = Field(default=None, description=\"The health status\")\n    enabled: Optional[bool] = Field(\n        default=None, description=\"Whether the instance is activated or not\"\n    )\n    default: Optional[bool] = Field(\n        default=None, description=\"Whether the instance is default or not\"\n    )\n    insecure: Optional[bool] = Field(\n        default=None, description=\"Whether the instance endpoint is insecure or not\"\n    )\n    setup_timestamp: Optional[int] = Field(\n        default=None, description=\"The timestamp of instance setting up\"\n    )\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.Instance.id", "title": "<code>id = Field(default=None, description='Unique ID')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Instance.name", "title": "<code>name = Field(default=None, description='Instance name')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Instance.description", "title": "<code>description = Field(default=None, description='Description of instance')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Instance.vendor", "title": "<code>vendor = Field(default=None, description='Based on which driver, identified by ID')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Instance.endpoint", "title": "<code>endpoint = Field(default=None, description='The service endpoint of this instance')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Instance.auth_mode", "title": "<code>auth_mode = Field(default=None, description='The authentication way supported')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Instance.auth_info", "title": "<code>auth_info = Field(default=None, description='The auth credential data if exists')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Instance.status", "title": "<code>status = Field(default=None, description='The health status')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Instance.enabled", "title": "<code>enabled = Field(default=None, description='Whether the instance is activated or not')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Instance.default", "title": "<code>default = Field(default=None, description='Whether the instance is default or not')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Instance.insecure", "title": "<code>insecure = Field(default=None, description='Whether the instance endpoint is insecure or not')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Instance.setup_timestamp", "title": "<code>setup_timestamp = Field(default=None, description='The timestamp of instance setting up')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.PreheatPolicy", "title": "<code>PreheatPolicy</code>", "text": "<p>               Bases: <code>BaseModel</code></p> Source code in <code>harborapi/models/models.py</code> <pre><code>class PreheatPolicy(BaseModel):\n    id: Optional[int] = Field(default=None, description=\"The ID of preheat policy\")\n    name: Optional[str] = Field(default=None, description=\"The Name of preheat policy\")\n    description: Optional[str] = Field(\n        default=None, description=\"The Description of preheat policy\"\n    )\n    project_id: Optional[int] = Field(\n        default=None, description=\"The ID of preheat policy project\"\n    )\n    provider_id: Optional[int] = Field(\n        default=None, description=\"The ID of preheat policy provider\"\n    )\n    provider_name: Optional[str] = Field(\n        default=None, description=\"The Name of preheat policy provider\"\n    )\n    filters: Optional[str] = Field(\n        default=None, description=\"The Filters of preheat policy\"\n    )\n    trigger: Optional[str] = Field(\n        default=None, description=\"The Trigger of preheat policy\"\n    )\n    enabled: Optional[bool] = Field(\n        default=None, description=\"Whether the preheat policy enabled\"\n    )\n    scope: Optional[str] = Field(\n        default=None, description=\"The scope of preheat policy\"\n    )\n    creation_time: Optional[datetime] = Field(\n        default=None, description=\"The Create Time of preheat policy\"\n    )\n    update_time: Optional[datetime] = Field(\n        default=None, description=\"The Update Time of preheat policy\"\n    )\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.PreheatPolicy.id", "title": "<code>id = Field(default=None, description='The ID of preheat policy')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.PreheatPolicy.name", "title": "<code>name = Field(default=None, description='The Name of preheat policy')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.PreheatPolicy.description", "title": "<code>description = Field(default=None, description='The Description of preheat policy')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.PreheatPolicy.project_id", "title": "<code>project_id = Field(default=None, description='The ID of preheat policy project')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.PreheatPolicy.provider_id", "title": "<code>provider_id = Field(default=None, description='The ID of preheat policy provider')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.PreheatPolicy.provider_name", "title": "<code>provider_name = Field(default=None, description='The Name of preheat policy provider')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.PreheatPolicy.filters", "title": "<code>filters = Field(default=None, description='The Filters of preheat policy')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.PreheatPolicy.trigger", "title": "<code>trigger = Field(default=None, description='The Trigger of preheat policy')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.PreheatPolicy.enabled", "title": "<code>enabled = Field(default=None, description='Whether the preheat policy enabled')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.PreheatPolicy.scope", "title": "<code>scope = Field(default=None, description='The scope of preheat policy')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.PreheatPolicy.creation_time", "title": "<code>creation_time = Field(default=None, description='The Create Time of preheat policy')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.PreheatPolicy.update_time", "title": "<code>update_time = Field(default=None, description='The Update Time of preheat policy')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Metrics", "title": "<code>Metrics</code>", "text": "<p>               Bases: <code>BaseModel</code></p> Source code in <code>harborapi/models/models.py</code> <pre><code>class Metrics(BaseModel):\n    task_count: Optional[int] = Field(default=None, description=\"The count of task\")\n    success_task_count: Optional[int] = Field(\n        default=None, description=\"The count of success task\"\n    )\n    error_task_count: Optional[int] = Field(\n        default=None, description=\"The count of error task\"\n    )\n    pending_task_count: Optional[int] = Field(\n        default=None, description=\"The count of pending task\"\n    )\n    running_task_count: Optional[int] = Field(\n        default=None, description=\"The count of running task\"\n    )\n    scheduled_task_count: Optional[int] = Field(\n        default=None, description=\"The count of scheduled task\"\n    )\n    stopped_task_count: Optional[int] = Field(\n        default=None, description=\"The count of stopped task\"\n    )\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.Metrics.task_count", "title": "<code>task_count = Field(default=None, description='The count of task')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Metrics.success_task_count", "title": "<code>success_task_count = Field(default=None, description='The count of success task')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Metrics.error_task_count", "title": "<code>error_task_count = Field(default=None, description='The count of error task')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Metrics.pending_task_count", "title": "<code>pending_task_count = Field(default=None, description='The count of pending task')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Metrics.running_task_count", "title": "<code>running_task_count = Field(default=None, description='The count of running task')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Metrics.scheduled_task_count", "title": "<code>scheduled_task_count = Field(default=None, description='The count of scheduled task')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Metrics.stopped_task_count", "title": "<code>stopped_task_count = Field(default=None, description='The count of stopped task')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Execution", "title": "<code>Execution</code>", "text": "<p>               Bases: <code>BaseModel</code></p> Source code in <code>harborapi/models/models.py</code> <pre><code>class Execution(BaseModel):\n    id: Optional[int] = Field(default=None, description=\"The ID of execution\")\n    vendor_type: Optional[str] = Field(\n        default=None, description=\"The vendor type of execution\"\n    )\n    vendor_id: Optional[int] = Field(\n        default=None, description=\"The vendor id of execution\"\n    )\n    status: Optional[str] = Field(default=None, description=\"The status of execution\")\n    status_message: Optional[str] = Field(\n        default=None, description=\"The status message of execution\"\n    )\n    metrics: Optional[Metrics] = None\n    trigger: Optional[str] = Field(default=None, description=\"The trigger of execution\")\n    extra_attrs: Optional[ExtraAttrs] = None\n    start_time: Optional[str] = Field(\n        default=None, description=\"The start time of execution\"\n    )\n    end_time: Optional[str] = Field(\n        default=None, description=\"The end time of execution\"\n    )\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.Execution.id", "title": "<code>id = Field(default=None, description='The ID of execution')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Execution.vendor_type", "title": "<code>vendor_type = Field(default=None, description='The vendor type of execution')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Execution.vendor_id", "title": "<code>vendor_id = Field(default=None, description='The vendor id of execution')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Execution.status", "title": "<code>status = Field(default=None, description='The status of execution')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Execution.status_message", "title": "<code>status_message = Field(default=None, description='The status message of execution')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Execution.metrics", "title": "<code>metrics = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Execution.trigger", "title": "<code>trigger = Field(default=None, description='The trigger of execution')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Execution.extra_attrs", "title": "<code>extra_attrs = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Execution.start_time", "title": "<code>start_time = Field(default=None, description='The start time of execution')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Execution.end_time", "title": "<code>end_time = Field(default=None, description='The end time of execution')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Task", "title": "<code>Task</code>", "text": "<p>               Bases: <code>BaseModel</code></p> Source code in <code>harborapi/models/models.py</code> <pre><code>class Task(BaseModel):\n    id: Optional[int] = Field(default=None, description=\"The ID of task\")\n    execution_id: Optional[int] = Field(\n        default=None, description=\"The ID of task execution\"\n    )\n    status: Optional[str] = Field(default=None, description=\"The status of task\")\n    status_message: Optional[str] = Field(\n        default=None, description=\"The status message of task\"\n    )\n    run_count: Optional[int] = Field(default=None, description=\"The count of task run\")\n    extra_attrs: Optional[ExtraAttrs] = None\n    creation_time: Optional[str] = Field(\n        default=None, description=\"The creation time of task\"\n    )\n    update_time: Optional[str] = Field(\n        default=None, description=\"The update time of task\"\n    )\n    start_time: Optional[str] = Field(\n        default=None, description=\"The start time of task\"\n    )\n    end_time: Optional[str] = Field(default=None, description=\"The end time of task\")\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.Task.id", "title": "<code>id = Field(default=None, description='The ID of task')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Task.execution_id", "title": "<code>execution_id = Field(default=None, description='The ID of task execution')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Task.status", "title": "<code>status = Field(default=None, description='The status of task')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Task.status_message", "title": "<code>status_message = Field(default=None, description='The status message of task')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Task.run_count", "title": "<code>run_count = Field(default=None, description='The count of task run')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Task.extra_attrs", "title": "<code>extra_attrs = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Task.creation_time", "title": "<code>creation_time = Field(default=None, description='The creation time of task')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Task.update_time", "title": "<code>update_time = Field(default=None, description='The update time of task')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Task.start_time", "title": "<code>start_time = Field(default=None, description='The start time of task')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Task.end_time", "title": "<code>end_time = Field(default=None, description='The end time of task')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ProviderUnderProject", "title": "<code>ProviderUnderProject</code>", "text": "<p>               Bases: <code>BaseModel</code></p> Source code in <code>harborapi/models/models.py</code> <pre><code>class ProviderUnderProject(BaseModel):\n    id: Optional[int] = None\n    provider: Optional[str] = None\n    enabled: Optional[bool] = None\n    default: Optional[bool] = None\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.ProviderUnderProject.id", "title": "<code>id = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ProviderUnderProject.provider", "title": "<code>provider = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ProviderUnderProject.enabled", "title": "<code>enabled = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ProviderUnderProject.default", "title": "<code>default = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Icon", "title": "<code>Icon</code>", "text": "<p>               Bases: <code>BaseModel</code></p> Source code in <code>harborapi/models/models.py</code> <pre><code>class Icon(BaseModel):\n    content_type: Optional[str] = Field(\n        default=None, alias=\"content-type\", description=\"The content type of the icon\"\n    )\n    content: Optional[str] = Field(\n        default=None, description=\"The base64 encoded content of the icon\"\n    )\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.Icon.content_type", "title": "<code>content_type = Field(default=None, alias='content-type', description='The content type of the icon')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Icon.content", "title": "<code>content = Field(default=None, description='The base64 encoded content of the icon')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ProjectDeletable", "title": "<code>ProjectDeletable</code>", "text": "<p>               Bases: <code>BaseModel</code></p> Source code in <code>harborapi/models/models.py</code> <pre><code>class ProjectDeletable(BaseModel):\n    deletable: Optional[bool] = Field(\n        default=None, description=\"Whether the project can be deleted.\"\n    )\n    message: Optional[str] = Field(\n        default=None,\n        description=\"The detail message when the project can not be deleted.\",\n    )\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.ProjectDeletable.deletable", "title": "<code>deletable = Field(default=None, description='Whether the project can be deleted.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ProjectDeletable.message", "title": "<code>message = Field(default=None, description='The detail message when the project can not be deleted.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ProjectMetadata", "title": "<code>ProjectMetadata</code>", "text": "<p>               Bases: <code>BaseModel</code></p> Source code in <code>harborapi/models/models.py</code> <pre><code>class ProjectMetadata(BaseModel):\n    public: Optional[str] = Field(\n        default=None,\n        description='The public status of the project. The valid values are \"true\", \"false\".',\n    )\n    enable_content_trust: Optional[str] = Field(\n        default=None,\n        description='Whether content trust is enabled or not. If it is enabled, user can\\'t pull unsigned images from this project. The valid values are \"true\", \"false\".',\n    )\n    enable_content_trust_cosign: Optional[str] = Field(\n        default=None,\n        description='Whether cosign content trust is enabled or not. If it is enabled, user can\\'t pull images without cosign signature from this project. The valid values are \"true\", \"false\".',\n    )\n    prevent_vul: Optional[str] = Field(\n        default=None,\n        description='Whether prevent the vulnerable images from running. The valid values are \"true\", \"false\".',\n    )\n    severity: Optional[str] = Field(\n        default=None,\n        description='If the vulnerability is high than severity defined here, the images can\\'t be pulled. The valid values are \"none\", \"low\", \"medium\", \"high\", \"critical\".',\n    )\n    auto_scan: Optional[str] = Field(\n        default=None,\n        description='Whether scan images automatically when pushing. The valid values are \"true\", \"false\".',\n    )\n    auto_sbom_generation: Optional[str] = Field(\n        default=None,\n        description='Whether generating SBOM automatically when pushing a subject artifact. The valid values are \"true\", \"false\".',\n    )\n    reuse_sys_cve_allowlist: Optional[str] = Field(\n        default=None,\n        description='Whether this project reuse the system level CVE allowlist as the allowlist of its own.  The valid values are \"true\", \"false\". If it is set to \"true\" the actual allowlist associate with this project, if any, will be ignored.',\n    )\n    retention_id: Optional[Union[str, int]] = Field(\n        default=None, description=\"The ID of the tag retention policy for the project\"\n    )\n    proxy_speed_kb: Optional[str] = Field(\n        default=None,\n        description=\"The bandwidth limit of proxy cache, in Kbps (kilobits per second). It limits the communication between Harbor and the upstream registry, not the client and the Harbor.\",\n    )\n\n    @field_validator(\"*\", mode=\"before\")\n    @classmethod\n    def _validate_strbool(\n        cls: PyType[\"BaseModel\"], v: Any, info: ValidationInfo\n    ) -&gt; Any:\n        \"\"\"The project metadata model spec specifies that all fields are\n        strings, but their valid values are 'true' and 'false'.\n\n        Pydantic has built-in conversion from bool to str, but it yields\n        'True' and 'False' instead of 'true' and 'false'. This validator\n        converts bools to the strings 'true' and 'false' instead.\n\n        This validator only converts the values if the field\n        description contains the word '\"true\"' (with double quotes).\n        \"\"\"\n        if not isinstance(v, bool):\n            return v\n        if not info.field_name:\n            raise ValueError(\"Validator is not attached to a field.\")\n        field = cls.model_fields[info.field_name]\n        if not field.description or '\"true\"' not in field.description:\n            return v\n        return str(v).lower()\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.ProjectMetadata.public", "title": "<code>public = Field(default=None, description='The public status of the project. The valid values are \"true\", \"false\".')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ProjectMetadata.enable_content_trust", "title": "<code>enable_content_trust = Field(default=None, description='Whether content trust is enabled or not. If it is enabled, user can\\'t pull unsigned images from this project. The valid values are \"true\", \"false\".')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ProjectMetadata.enable_content_trust_cosign", "title": "<code>enable_content_trust_cosign = Field(default=None, description='Whether cosign content trust is enabled or not. If it is enabled, user can\\'t pull images without cosign signature from this project. The valid values are \"true\", \"false\".')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ProjectMetadata.prevent_vul", "title": "<code>prevent_vul = Field(default=None, description='Whether prevent the vulnerable images from running. The valid values are \"true\", \"false\".')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ProjectMetadata.severity", "title": "<code>severity = Field(default=None, description='If the vulnerability is high than severity defined here, the images can\\'t be pulled. The valid values are \"none\", \"low\", \"medium\", \"high\", \"critical\".')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ProjectMetadata.auto_scan", "title": "<code>auto_scan = Field(default=None, description='Whether scan images automatically when pushing. The valid values are \"true\", \"false\".')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ProjectMetadata.auto_sbom_generation", "title": "<code>auto_sbom_generation = Field(default=None, description='Whether generating SBOM automatically when pushing a subject artifact. The valid values are \"true\", \"false\".')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ProjectMetadata.reuse_sys_cve_allowlist", "title": "<code>reuse_sys_cve_allowlist = Field(default=None, description='Whether this project reuse the system level CVE allowlist as the allowlist of its own.  The valid values are \"true\", \"false\". If it is set to \"true\" the actual allowlist associate with this project, if any, will be ignored.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ProjectMetadata.retention_id", "title": "<code>retention_id = Field(default=None, description='The ID of the tag retention policy for the project')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ProjectMetadata.proxy_speed_kb", "title": "<code>proxy_speed_kb = Field(default=None, description='The bandwidth limit of proxy cache, in Kbps (kilobits per second). It limits the communication between Harbor and the upstream registry, not the client and the Harbor.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ProjectScanner", "title": "<code>ProjectScanner</code>", "text": "<p>               Bases: <code>BaseModel</code></p> Source code in <code>harborapi/models/models.py</code> <pre><code>class ProjectScanner(BaseModel):\n    uuid: str = Field(..., description=\"The identifier of the scanner registration\")\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.ProjectScanner.uuid", "title": "<code>uuid = Field(..., description='The identifier of the scanner registration')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.CVEAllowlistItem", "title": "<code>CVEAllowlistItem</code>", "text": "<p>               Bases: <code>BaseModel</code></p> <p>CVE allowlist item.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class CVEAllowlistItem(BaseModel):\n    \"\"\"CVE allowlist item.\"\"\"\n\n    cve_id: Optional[str] = Field(\n        default=None, description='The ID of the CVE, such as \"CVE-2019-10164\"'\n    )\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.CVEAllowlistItem.cve_id", "title": "<code>cve_id = Field(default=None, description='The ID of the CVE, such as \"CVE-2019-10164\"')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ReplicationTriggerSettings", "title": "<code>ReplicationTriggerSettings</code>", "text": "<p>               Bases: <code>BaseModel</code></p> Source code in <code>harborapi/models/models.py</code> <pre><code>class ReplicationTriggerSettings(BaseModel):\n    cron: Optional[str] = Field(\n        default=None, description=\"The cron string for scheduled trigger\"\n    )\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.ReplicationTriggerSettings.cron", "title": "<code>cron = Field(default=None, description='The cron string for scheduled trigger')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ReplicationFilter", "title": "<code>ReplicationFilter</code>", "text": "<p>               Bases: <code>BaseModel</code></p> Source code in <code>harborapi/models/models.py</code> <pre><code>class ReplicationFilter(BaseModel):\n    type: Optional[str] = Field(\n        default=None, description=\"The replication policy filter type.\"\n    )\n    value: Union[str, Dict[str, Any], None] = Field(\n        default=None, description=\"The value of replication policy filter.\"\n    )\n    decoration: Optional[str] = Field(\n        default=None, description=\"matches or excludes the result\"\n    )\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.ReplicationFilter.type", "title": "<code>type = Field(default=None, description='The replication policy filter type.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ReplicationFilter.value", "title": "<code>value = Field(default=None, description='The value of replication policy filter.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ReplicationFilter.decoration", "title": "<code>decoration = Field(default=None, description='matches or excludes the result')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RegistryCredential", "title": "<code>RegistryCredential</code>", "text": "<p>               Bases: <code>BaseModel</code></p> Source code in <code>harborapi/models/models.py</code> <pre><code>class RegistryCredential(BaseModel):\n    type: Optional[str] = Field(\n        default=None, description=\"Credential type, such as 'basic', 'oauth'.\"\n    )\n    access_key: Optional[str] = Field(\n        default=None,\n        description=\"Access key, e.g. user name when credential type is 'basic'.\",\n    )\n    access_secret: Optional[str] = Field(\n        default=None,\n        description=\"Access secret, e.g. password when credential type is 'basic'.\",\n    )\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.RegistryCredential.type", "title": "<code>type = Field(default=None, description=\"Credential type, such as 'basic', 'oauth'.\")</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RegistryCredential.access_key", "title": "<code>access_key = Field(default=None, description=\"Access key, e.g. user name when credential type is 'basic'.\")</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RegistryCredential.access_secret", "title": "<code>access_secret = Field(default=None, description=\"Access secret, e.g. password when credential type is 'basic'.\")</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Registry", "title": "<code>Registry</code>", "text": "<p>               Bases: <code>BaseModel</code></p> Source code in <code>harborapi/models/models.py</code> <pre><code>class Registry(BaseModel):\n    id: Optional[int] = Field(default=None, description=\"The registry ID.\")\n    url: Optional[str] = Field(default=None, description=\"The registry URL string.\")\n    name: Optional[str] = Field(default=None, description=\"The registry name.\")\n    credential: Optional[RegistryCredential] = None\n    type: Optional[str] = Field(\n        default=None, description=\"Type of the registry, e.g. 'harbor'.\"\n    )\n    insecure: Optional[bool] = Field(\n        default=None,\n        description=\"Whether or not the certificate will be verified when Harbor tries to access the server.\",\n    )\n    description: Optional[str] = Field(\n        default=None, description=\"Description of the registry.\"\n    )\n    status: Optional[str] = Field(\n        default=None, description=\"Health status of the registry.\"\n    )\n    creation_time: Optional[datetime] = Field(\n        default=None, description=\"The create time of the policy.\"\n    )\n    update_time: Optional[datetime] = Field(\n        default=None, description=\"The update time of the policy.\"\n    )\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.Registry.id", "title": "<code>id = Field(default=None, description='The registry ID.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Registry.url", "title": "<code>url = Field(default=None, description='The registry URL string.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Registry.name", "title": "<code>name = Field(default=None, description='The registry name.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Registry.credential", "title": "<code>credential = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Registry.type", "title": "<code>type = Field(default=None, description=\"Type of the registry, e.g. 'harbor'.\")</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Registry.insecure", "title": "<code>insecure = Field(default=None, description='Whether or not the certificate will be verified when Harbor tries to access the server.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Registry.description", "title": "<code>description = Field(default=None, description='Description of the registry.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Registry.status", "title": "<code>status = Field(default=None, description='Health status of the registry.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Registry.creation_time", "title": "<code>creation_time = Field(default=None, description='The create time of the policy.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Registry.update_time", "title": "<code>update_time = Field(default=None, description='The update time of the policy.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RegistryUpdate", "title": "<code>RegistryUpdate</code>", "text": "<p>               Bases: <code>BaseModel</code></p> Source code in <code>harborapi/models/models.py</code> <pre><code>class RegistryUpdate(BaseModel):\n    name: Optional[str] = Field(default=None, description=\"The registry name.\")\n    description: Optional[str] = Field(\n        default=None, description=\"Description of the registry.\"\n    )\n    url: Optional[str] = Field(default=None, description=\"The registry URL.\")\n    credential_type: Optional[str] = Field(\n        default=None, description=\"Credential type of the registry, e.g. 'basic'.\"\n    )\n    access_key: Optional[str] = Field(\n        default=None, description=\"The registry access key.\"\n    )\n    access_secret: Optional[str] = Field(\n        default=None, description=\"The registry access secret.\"\n    )\n    insecure: Optional[bool] = Field(\n        default=None,\n        description=\"Whether or not the certificate will be verified when Harbor tries to access the server.\",\n    )\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.RegistryUpdate.name", "title": "<code>name = Field(default=None, description='The registry name.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RegistryUpdate.description", "title": "<code>description = Field(default=None, description='Description of the registry.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RegistryUpdate.url", "title": "<code>url = Field(default=None, description='The registry URL.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RegistryUpdate.credential_type", "title": "<code>credential_type = Field(default=None, description=\"Credential type of the registry, e.g. 'basic'.\")</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RegistryUpdate.access_key", "title": "<code>access_key = Field(default=None, description='The registry access key.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RegistryUpdate.access_secret", "title": "<code>access_secret = Field(default=None, description='The registry access secret.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RegistryUpdate.insecure", "title": "<code>insecure = Field(default=None, description='Whether or not the certificate will be verified when Harbor tries to access the server.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RegistryPing", "title": "<code>RegistryPing</code>", "text": "<p>               Bases: <code>BaseModel</code></p> Source code in <code>harborapi/models/models.py</code> <pre><code>class RegistryPing(BaseModel):\n    id: Optional[int] = Field(default=None, description=\"The registry ID.\")\n    type: Optional[str] = Field(\n        default=None, description=\"Type of the registry, e.g. 'harbor'.\"\n    )\n    url: Optional[str] = Field(default=None, description=\"The registry URL.\")\n    credential_type: Optional[str] = Field(\n        default=None, description=\"Credential type of the registry, e.g. 'basic'.\"\n    )\n    access_key: Optional[str] = Field(\n        default=None, description=\"The registry access key.\"\n    )\n    access_secret: Optional[str] = Field(\n        default=None, description=\"The registry access secret.\"\n    )\n    insecure: Optional[bool] = Field(\n        default=None,\n        description=\"Whether or not the certificate will be verified when Harbor tries to access the server.\",\n    )\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.RegistryPing.id", "title": "<code>id = Field(default=None, description='The registry ID.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RegistryPing.type", "title": "<code>type = Field(default=None, description=\"Type of the registry, e.g. 'harbor'.\")</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RegistryPing.url", "title": "<code>url = Field(default=None, description='The registry URL.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RegistryPing.credential_type", "title": "<code>credential_type = Field(default=None, description=\"Credential type of the registry, e.g. 'basic'.\")</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RegistryPing.access_key", "title": "<code>access_key = Field(default=None, description='The registry access key.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RegistryPing.access_secret", "title": "<code>access_secret = Field(default=None, description='The registry access secret.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RegistryPing.insecure", "title": "<code>insecure = Field(default=None, description='Whether or not the certificate will be verified when Harbor tries to access the server.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RegistryProviderCredentialPattern", "title": "<code>RegistryProviderCredentialPattern</code>", "text": "<p>               Bases: <code>BaseModel</code></p> <p>Pattern for a registry credential.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class RegistryProviderCredentialPattern(BaseModel):\n    \"\"\"Pattern for a registry credential.\"\"\"\n\n    access_key_type: Optional[str] = Field(\n        default=None, description=\"The access key type\"\n    )\n    access_key_data: Optional[str] = Field(\n        default=None, description=\"The access key data\"\n    )\n    access_secret_type: Optional[str] = Field(\n        default=None, description=\"The access secret type\"\n    )\n    access_secret_data: Optional[str] = Field(\n        default=None, description=\"The access secret data\"\n    )\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.RegistryProviderCredentialPattern.access_key_type", "title": "<code>access_key_type = Field(default=None, description='The access key type')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RegistryProviderCredentialPattern.access_key_data", "title": "<code>access_key_data = Field(default=None, description='The access key data')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RegistryProviderCredentialPattern.access_secret_type", "title": "<code>access_secret_type = Field(default=None, description='The access secret type')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RegistryProviderCredentialPattern.access_secret_data", "title": "<code>access_secret_data = Field(default=None, description='The access secret data')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RegistryEndpoint", "title": "<code>RegistryEndpoint</code>", "text": "<p>               Bases: <code>BaseModel</code></p> <p>Registry endpoint configuration.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class RegistryEndpoint(BaseModel):\n    \"\"\"Registry endpoint configuration.\"\"\"\n\n    key: Optional[str] = Field(default=None, description=\"The endpoint key\")\n    value: Optional[str] = Field(default=None, description=\"The endpoint value\")\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.RegistryEndpoint.key", "title": "<code>key = Field(default=None, description='The endpoint key')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RegistryEndpoint.value", "title": "<code>value = Field(default=None, description='The endpoint value')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.FilterStyle", "title": "<code>FilterStyle</code>", "text": "<p>               Bases: <code>BaseModel</code></p> <p>Style of the resource filter.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class FilterStyle(BaseModel):\n    \"\"\"Style of the resource filter.\"\"\"\n\n    type: Optional[str] = Field(default=None, description=\"The filter type\")\n    style: Optional[str] = Field(default=None, description=\"The filter style\")\n    values: Optional[List[str]] = Field(default=None, description=\"The filter values\")\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.FilterStyle.type", "title": "<code>type = Field(default=None, description='The filter type')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.FilterStyle.style", "title": "<code>style = Field(default=None, description='The filter style')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.FilterStyle.values", "title": "<code>values = Field(default=None, description='The filter values')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ResourceList", "title": "<code>ResourceList</code>", "text": "<p>               Bases: <code>RootModel[Optional[Dict[str, int]]]</code></p> Source code in <code>harborapi/models/models.py</code> <pre><code>class ResourceList(RootModel[Optional[Dict[str, int]]]):\n    root: Optional[Dict[str, int]] = None\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.ResourceList.root", "title": "<code>root = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ReplicationExecution", "title": "<code>ReplicationExecution</code>", "text": "<p>               Bases: <code>BaseModel</code></p> <p>The execution of a replication job.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class ReplicationExecution(BaseModel):\n    \"\"\"The execution of a replication job.\"\"\"\n\n    id: Optional[int] = Field(default=None, description=\"The ID of the execution\")\n    policy_id: Optional[int] = Field(\n        default=None, description=\"The ID if the policy that the execution belongs to\"\n    )\n    status: Optional[str] = Field(\n        default=None, description=\"The status of the execution\"\n    )\n    trigger: Optional[str] = Field(default=None, description=\"The trigger mode\")\n    start_time: Optional[datetime] = Field(default=None, description=\"The start time\")\n    end_time: Optional[datetime] = Field(default=None, description=\"The end time\")\n    status_text: Optional[str] = Field(default=None, description=\"The status text\")\n    total: Optional[int] = Field(\n        default=None, description=\"The total count of all executions\"\n    )\n    failed: Optional[int] = Field(\n        default=None, description=\"The count of failed executions\"\n    )\n    succeed: Optional[int] = Field(\n        default=None, description=\"The count of succeed executions\"\n    )\n    in_progress: Optional[int] = Field(\n        default=None, description=\"The count of in_progress executions\"\n    )\n    stopped: Optional[int] = Field(\n        default=None, description=\"The count of stopped executions\"\n    )\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.ReplicationExecution.id", "title": "<code>id = Field(default=None, description='The ID of the execution')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ReplicationExecution.policy_id", "title": "<code>policy_id = Field(default=None, description='The ID if the policy that the execution belongs to')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ReplicationExecution.status", "title": "<code>status = Field(default=None, description='The status of the execution')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ReplicationExecution.trigger", "title": "<code>trigger = Field(default=None, description='The trigger mode')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ReplicationExecution.start_time", "title": "<code>start_time = Field(default=None, description='The start time')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ReplicationExecution.end_time", "title": "<code>end_time = Field(default=None, description='The end time')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ReplicationExecution.status_text", "title": "<code>status_text = Field(default=None, description='The status text')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ReplicationExecution.total", "title": "<code>total = Field(default=None, description='The total count of all executions')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ReplicationExecution.failed", "title": "<code>failed = Field(default=None, description='The count of failed executions')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ReplicationExecution.succeed", "title": "<code>succeed = Field(default=None, description='The count of succeed executions')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ReplicationExecution.in_progress", "title": "<code>in_progress = Field(default=None, description='The count of in_progress executions')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ReplicationExecution.stopped", "title": "<code>stopped = Field(default=None, description='The count of stopped executions')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.StartReplicationExecution", "title": "<code>StartReplicationExecution</code>", "text": "<p>               Bases: <code>BaseModel</code></p> Source code in <code>harborapi/models/models.py</code> <pre><code>class StartReplicationExecution(BaseModel):\n    policy_id: Optional[int] = Field(\n        default=None, description=\"The ID of policy that the execution belongs to.\"\n    )\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.StartReplicationExecution.policy_id", "title": "<code>policy_id = Field(default=None, description='The ID of policy that the execution belongs to.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ReplicationTask", "title": "<code>ReplicationTask</code>", "text": "<p>               Bases: <code>BaseModel</code></p> <p>A task that is a part of a replication job.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class ReplicationTask(BaseModel):\n    \"\"\"A task that is a part of a replication job.\"\"\"\n\n    id: Optional[int] = Field(default=None, description=\"The ID of the task\")\n    execution_id: Optional[int] = Field(\n        default=None, description=\"The ID of the execution that the task belongs to\"\n    )\n    status: Optional[str] = Field(default=None, description=\"The status of the task\")\n    job_id: Optional[str] = Field(\n        default=None,\n        description=\"The ID of the underlying job that the task related to\",\n    )\n    operation: Optional[str] = Field(\n        default=None, description=\"The operation of the task\"\n    )\n    resource_type: Optional[str] = Field(\n        default=None, description=\"The type of the resource that the task operates\"\n    )\n    src_resource: Optional[str] = Field(\n        default=None, description=\"The source resource that the task operates\"\n    )\n    dst_resource: Optional[str] = Field(\n        default=None, description=\"The destination resource that the task operates\"\n    )\n    start_time: Optional[datetime] = Field(\n        default=None, description=\"The start time of the task\"\n    )\n    end_time: Optional[datetime] = Field(\n        default=None, description=\"The end time of the task\"\n    )\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.ReplicationTask.id", "title": "<code>id = Field(default=None, description='The ID of the task')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ReplicationTask.execution_id", "title": "<code>execution_id = Field(default=None, description='The ID of the execution that the task belongs to')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ReplicationTask.status", "title": "<code>status = Field(default=None, description='The status of the task')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ReplicationTask.job_id", "title": "<code>job_id = Field(default=None, description='The ID of the underlying job that the task related to')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ReplicationTask.operation", "title": "<code>operation = Field(default=None, description='The operation of the task')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ReplicationTask.resource_type", "title": "<code>resource_type = Field(default=None, description='The type of the resource that the task operates')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ReplicationTask.src_resource", "title": "<code>src_resource = Field(default=None, description='The source resource that the task operates')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ReplicationTask.dst_resource", "title": "<code>dst_resource = Field(default=None, description='The destination resource that the task operates')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ReplicationTask.start_time", "title": "<code>start_time = Field(default=None, description='The start time of the task')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ReplicationTask.end_time", "title": "<code>end_time = Field(default=None, description='The end time of the task')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RobotCreated", "title": "<code>RobotCreated</code>", "text": "<p>               Bases: <code>BaseModel</code></p> <p>Response for robot account creation.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class RobotCreated(BaseModel):\n    \"\"\"Response for robot account creation.\"\"\"\n\n    id: Optional[int] = Field(default=None, description=\"The ID of the robot\")\n    name: Optional[str] = Field(default=None, description=\"The name of the robot\")\n    secret: Optional[str] = Field(default=None, description=\"The secret of the robot\")\n    creation_time: Optional[datetime] = Field(\n        default=None, description=\"The creation time of the robot.\"\n    )\n    expires_at: Optional[int] = Field(\n        default=None, description=\"The expiration date of the robot\"\n    )\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.RobotCreated.id", "title": "<code>id = Field(default=None, description='The ID of the robot')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RobotCreated.name", "title": "<code>name = Field(default=None, description='The name of the robot')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RobotCreated.secret", "title": "<code>secret = Field(default=None, description='The secret of the robot')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RobotCreated.creation_time", "title": "<code>creation_time = Field(default=None, description='The creation time of the robot.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RobotCreated.expires_at", "title": "<code>expires_at = Field(default=None, description='The expiration date of the robot')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RobotSec", "title": "<code>RobotSec</code>", "text": "<p>               Bases: <code>BaseModel</code></p> <p>Response for robot account secret refresh/update.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class RobotSec(BaseModel):\n    \"\"\"Response for robot account secret refresh/update.\"\"\"\n\n    secret: Optional[str] = Field(default=None, description=\"The secret of the robot\")\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.RobotSec.secret", "title": "<code>secret = Field(default=None, description='The secret of the robot')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Access", "title": "<code>Access</code>", "text": "<p>               Bases: <code>BaseModel</code></p> Source code in <code>harborapi/models/models.py</code> <pre><code>class Access(BaseModel):\n    resource: Optional[str] = Field(\n        default=None,\n        description=\"The resource of the access. Possible resources are listed here for system and project level https://github.com/goharbor/harbor/blob/main/src/common/rbac/const.go\",\n    )\n    action: Optional[str] = Field(\n        default=None,\n        description=\"The action of the access. Possible actions are *, pull, push, create, read, update, delete, list, operate, scanner-pull and stop.\",\n    )\n    effect: Optional[str] = Field(default=None, description=\"The effect of the access\")\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.Access.resource", "title": "<code>resource = Field(default=None, description='The resource of the access. Possible resources are listed here for system and project level https://github.com/goharbor/harbor/blob/main/src/common/rbac/const.go')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Access.action", "title": "<code>action = Field(default=None, description='The action of the access. Possible actions are *, pull, push, create, read, update, delete, list, operate, scanner-pull and stop.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Access.effect", "title": "<code>effect = Field(default=None, description='The effect of the access')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RobotCreateV1", "title": "<code>RobotCreateV1</code>", "text": "<p>               Bases: <code>BaseModel</code></p> Source code in <code>harborapi/models/models.py</code> <pre><code>class RobotCreateV1(BaseModel):\n    name: Optional[str] = Field(default=None, description=\"The name of robot account\")\n    description: Optional[str] = Field(\n        default=None, description=\"The description of robot account\"\n    )\n    expires_at: Optional[int] = Field(\n        default=None,\n        description=\"The expiration time on or after which the JWT MUST NOT be accepted for processing.\",\n    )\n    access: Optional[List[Access]] = Field(\n        default=None, description=\"The permission of robot account\"\n    )\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.RobotCreateV1.name", "title": "<code>name = Field(default=None, description='The name of robot account')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RobotCreateV1.description", "title": "<code>description = Field(default=None, description='The description of robot account')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RobotCreateV1.expires_at", "title": "<code>expires_at = Field(default=None, description='The expiration time on or after which the JWT MUST NOT be accepted for processing.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RobotCreateV1.access", "title": "<code>access = Field(default=None, description='The permission of robot account')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Storage", "title": "<code>Storage</code>", "text": "<p>               Bases: <code>BaseModel</code></p> Source code in <code>harborapi/models/models.py</code> <pre><code>class Storage(BaseModel):\n    total: Optional[int] = Field(default=None, description=\"Total volume size.\")\n    free: Optional[int] = Field(default=None, description=\"Free volume size.\")\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.Storage.total", "title": "<code>total = Field(default=None, description='Total volume size.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Storage.free", "title": "<code>free = Field(default=None, description='Free volume size.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.AuthproxySetting", "title": "<code>AuthproxySetting</code>", "text": "<p>               Bases: <code>BaseModel</code></p> Source code in <code>harborapi/models/models.py</code> <pre><code>class AuthproxySetting(BaseModel):\n    endpoint: Optional[str] = Field(\n        default=None,\n        description=\"The fully qualified URI of login endpoint of authproxy, such as 'https://192.168.1.2:8443/login'\",\n    )\n    tokenreivew_endpoint: Optional[str] = Field(\n        default=None,\n        description=\"The fully qualified URI of token review endpoint of authproxy, such as 'https://192.168.1.2:8443/tokenreview'\",\n    )\n    skip_search: Optional[bool] = Field(\n        default=None,\n        description=\"The flag to determine whether Harbor can skip search the user/group when adding him as a member.\",\n    )\n    verify_cert: Optional[bool] = Field(\n        default=None,\n        description=\"The flag to determine whether Harbor should verify the certificate when connecting to the auth proxy.\",\n    )\n    server_certificate: Optional[str] = Field(\n        default=None,\n        description=\"The certificate to be pinned when connecting auth proxy.\",\n    )\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.AuthproxySetting.endpoint", "title": "<code>endpoint = Field(default=None, description=\"The fully qualified URI of login endpoint of authproxy, such as 'https://192.168.1.2:8443/login'\")</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.AuthproxySetting.tokenreivew_endpoint", "title": "<code>tokenreivew_endpoint = Field(default=None, description=\"The fully qualified URI of token review endpoint of authproxy, such as 'https://192.168.1.2:8443/tokenreview'\")</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.AuthproxySetting.skip_search", "title": "<code>skip_search = Field(default=None, description='The flag to determine whether Harbor can skip search the user/group when adding him as a member.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.AuthproxySetting.verify_cert", "title": "<code>verify_cert = Field(default=None, description='The flag to determine whether Harbor should verify the certificate when connecting to the auth proxy.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.AuthproxySetting.server_certificate", "title": "<code>server_certificate = Field(default=None, description='The certificate to be pinned when connecting auth proxy.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.SystemInfo", "title": "<code>SystemInfo</code>", "text": "<p>               Bases: <code>BaseModel</code></p> Source code in <code>harborapi/models/models.py</code> <pre><code>class SystemInfo(BaseModel):\n    storage: Optional[List[Storage]] = Field(\n        default=None, description=\"The storage of system.\"\n    )\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.SystemInfo.storage", "title": "<code>storage = Field(default=None, description='The storage of system.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Type", "title": "<code>Type</code>", "text": "<p>               Bases: <code>Enum</code></p> <p>The schedule type. The valid values are 'Hourly', 'Daily', 'Weekly', 'Custom', 'Manual', 'None' and 'Schedule'. 'Manual' means to trigger it right away, 'Schedule' means to trigger it by a specified cron schedule and 'None' means to cancel the schedule.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class Type(Enum):\n    \"\"\"\n    The schedule type. The valid values are 'Hourly', 'Daily', 'Weekly', 'Custom', 'Manual', 'None' and 'Schedule'.\n    'Manual' means to trigger it right away, 'Schedule' means to trigger it by a specified cron schedule and\n    'None' means to cancel the schedule.\n\n    \"\"\"\n\n    hourly = \"Hourly\"\n    daily = \"Daily\"\n    weekly = \"Weekly\"\n    custom = \"Custom\"\n    manual = \"Manual\"\n    \"Trigger schedule right away.\"\n    none = \"None\"\n    \"Cancel the schedule.\"\n    schedule = \"Schedule\"\n    \"Trigger based on cron schedule.\"\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.Type.hourly", "title": "<code>hourly = 'Hourly'</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Type.daily", "title": "<code>daily = 'Daily'</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Type.weekly", "title": "<code>weekly = 'Weekly'</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Type.custom", "title": "<code>custom = 'Custom'</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Type.manual", "title": "<code>manual = 'Manual'</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": "<p>Trigger schedule right away.</p>"}, {"location": "reference/models/models/#harborapi.models.models.Type.none", "title": "<code>none = 'None'</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": "<p>Cancel the schedule.</p>"}, {"location": "reference/models/models/#harborapi.models.models.Type.schedule", "title": "<code>schedule = 'Schedule'</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": "<p>Trigger based on cron schedule.</p>"}, {"location": "reference/models/models/#harborapi.models.models.ScheduleObj", "title": "<code>ScheduleObj</code>", "text": "<p>               Bases: <code>BaseModel</code></p> Source code in <code>harborapi/models/models.py</code> <pre><code>class ScheduleObj(BaseModel):\n    type: Optional[Type] = Field(\n        default=None,\n        description=\"The schedule type. The valid values are 'Hourly', 'Daily', 'Weekly', 'Custom', 'Manual', 'None' and 'Schedule'.\\n'Manual' means to trigger it right away, 'Schedule' means to trigger it by a specified cron schedule and\\n'None' means to cancel the schedule.\\n\",\n    )\n    cron: Optional[str] = Field(\n        default=None, description=\"A cron expression, a time-based job scheduler.\"\n    )\n    next_scheduled_time: Optional[datetime] = Field(\n        default=None, description=\"The next time to schedule to run the job.\"\n    )\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.ScheduleObj.type", "title": "<code>type = Field(default=None, description=\"The schedule type. The valid values are 'Hourly', 'Daily', 'Weekly', 'Custom', 'Manual', 'None' and 'Schedule'.\\n'Manual' means to trigger it right away, 'Schedule' means to trigger it by a specified cron schedule and\\n'None' means to cancel the schedule.\\n\")</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ScheduleObj.cron", "title": "<code>cron = Field(default=None, description='A cron expression, a time-based job scheduler.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ScheduleObj.next_scheduled_time", "title": "<code>next_scheduled_time = Field(default=None, description='The next time to schedule to run the job.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Trigger", "title": "<code>Trigger</code>", "text": "<p>               Bases: <code>Enum</code></p> <p>Trigger type for a 'scan all' job.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class Trigger(Enum):\n    \"\"\"Trigger type for a 'scan all' job.\"\"\"\n\n    manual = \"Manual\"\n    schedule = \"Schedule\"\n    event = \"Event\"\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.Trigger.manual", "title": "<code>manual = 'Manual'</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Trigger.schedule", "title": "<code>schedule = 'Schedule'</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Trigger.event", "title": "<code>event = 'Event'</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Stats", "title": "<code>Stats</code>", "text": "<p>               Bases: <code>BaseModel</code></p> <p>Progress of the 'scan all' process.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class Stats(BaseModel):\n    \"\"\"Progress of the 'scan all' process.\"\"\"\n\n    total: Optional[int] = Field(\n        default=None,\n        description=\"The total number of scan processes triggered by the scan all action\",\n        examples=[100],\n    )\n    completed: Optional[int] = Field(\n        default=None,\n        description=\"The number of the finished scan processes triggered by the scan all action\",\n        examples=[90],\n    )\n    metrics: Optional[Dict[str, int]] = Field(\n        default=None,\n        description=\"The metrics data for the each status\",\n        examples=[{\"Success\": 5, \"Error\": 2, \"Running\": 3}],\n    )\n    ongoing: Optional[bool] = Field(\n        default=None, description=\"A flag indicating job status of scan all.\"\n    )\n    trigger: Optional[Trigger] = Field(\n        default=None, description=\"The trigger of the scan all job.\"\n    )\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.Stats.total", "title": "<code>total = Field(default=None, description='The total number of scan processes triggered by the scan all action', examples=[100])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Stats.completed", "title": "<code>completed = Field(default=None, description='The number of the finished scan processes triggered by the scan all action', examples=[90])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Stats.metrics", "title": "<code>metrics = Field(default=None, description='The metrics data for the each status', examples=[{'Success': 5, 'Error': 2, 'Running': 3}])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Stats.ongoing", "title": "<code>ongoing = Field(default=None, description='A flag indicating job status of scan all.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Stats.trigger", "title": "<code>trigger = Field(default=None, description='The trigger of the scan all job.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RetentionRuleParamMetadata", "title": "<code>RetentionRuleParamMetadata</code>", "text": "<p>               Bases: <code>BaseModel</code></p> <p>Parameters for a retention rule.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class RetentionRuleParamMetadata(BaseModel):\n    \"\"\"Parameters for a retention rule.\"\"\"\n\n    type: Optional[str] = None\n    unit: Optional[str] = None\n    required: Optional[bool] = None\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.RetentionRuleParamMetadata.type", "title": "<code>type = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RetentionRuleParamMetadata.unit", "title": "<code>unit = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RetentionRuleParamMetadata.required", "title": "<code>required = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RetentionSelectorMetadata", "title": "<code>RetentionSelectorMetadata</code>", "text": "<p>               Bases: <code>BaseModel</code></p> <p>Metadata for a retention rule selector.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class RetentionSelectorMetadata(BaseModel):\n    \"\"\"Metadata for a retention rule selector.\"\"\"\n\n    display_text: Optional[str] = None\n    kind: Optional[str] = None\n    decorations: Optional[List[str]] = None\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.RetentionSelectorMetadata.display_text", "title": "<code>display_text = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RetentionSelectorMetadata.kind", "title": "<code>kind = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RetentionSelectorMetadata.decorations", "title": "<code>decorations = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RetentionRuleTrigger", "title": "<code>RetentionRuleTrigger</code>", "text": "<p>               Bases: <code>BaseModel</code></p> Source code in <code>harborapi/models/models.py</code> <pre><code>class RetentionRuleTrigger(BaseModel):\n    kind: Optional[str] = None\n    settings: Optional[Dict[str, Any]] = None\n    references: Optional[Dict[str, Any]] = None\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.RetentionRuleTrigger.kind", "title": "<code>kind = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RetentionRuleTrigger.settings", "title": "<code>settings = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RetentionRuleTrigger.references", "title": "<code>references = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RetentionPolicyScope", "title": "<code>RetentionPolicyScope</code>", "text": "<p>               Bases: <code>BaseModel</code></p> Source code in <code>harborapi/models/models.py</code> <pre><code>class RetentionPolicyScope(BaseModel):\n    level: Optional[str] = None\n    ref: Optional[int] = None\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.RetentionPolicyScope.level", "title": "<code>level = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RetentionPolicyScope.ref", "title": "<code>ref = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RetentionSelector", "title": "<code>RetentionSelector</code>", "text": "<p>               Bases: <code>BaseModel</code></p> Source code in <code>harborapi/models/models.py</code> <pre><code>class RetentionSelector(BaseModel):\n    kind: Optional[str] = None\n    decoration: Optional[str] = None\n    pattern: Optional[str] = None\n    extras: Optional[str] = None\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.RetentionSelector.kind", "title": "<code>kind = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RetentionSelector.decoration", "title": "<code>decoration = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RetentionSelector.pattern", "title": "<code>pattern = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RetentionSelector.extras", "title": "<code>extras = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RetentionExecution", "title": "<code>RetentionExecution</code>", "text": "<p>               Bases: <code>BaseModel</code></p> Source code in <code>harborapi/models/models.py</code> <pre><code>class RetentionExecution(BaseModel):\n    id: Optional[int] = None\n    policy_id: Optional[int] = None\n    start_time: Optional[str] = None\n    end_time: Optional[str] = None\n    status: Optional[str] = None\n    trigger: Optional[str] = None\n    dry_run: Optional[bool] = None\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.RetentionExecution.id", "title": "<code>id = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RetentionExecution.policy_id", "title": "<code>policy_id = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RetentionExecution.start_time", "title": "<code>start_time = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RetentionExecution.end_time", "title": "<code>end_time = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RetentionExecution.status", "title": "<code>status = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RetentionExecution.trigger", "title": "<code>trigger = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RetentionExecution.dry_run", "title": "<code>dry_run = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RetentionExecutionTask", "title": "<code>RetentionExecutionTask</code>", "text": "<p>               Bases: <code>BaseModel</code></p> Source code in <code>harborapi/models/models.py</code> <pre><code>class RetentionExecutionTask(BaseModel):\n    id: Optional[int] = None\n    execution_id: Optional[int] = None\n    repository: Optional[str] = None\n    job_id: Optional[str] = None\n    status: Optional[str] = None\n    status_code: Optional[int] = None\n    status_revision: Optional[int] = None\n    start_time: Optional[str] = None\n    end_time: Optional[str] = None\n    total: Optional[int] = None\n    retained: Optional[int] = None\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.RetentionExecutionTask.id", "title": "<code>id = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RetentionExecutionTask.execution_id", "title": "<code>execution_id = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RetentionExecutionTask.repository", "title": "<code>repository = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RetentionExecutionTask.job_id", "title": "<code>job_id = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RetentionExecutionTask.status", "title": "<code>status = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RetentionExecutionTask.status_code", "title": "<code>status_code = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RetentionExecutionTask.status_revision", "title": "<code>status_revision = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RetentionExecutionTask.start_time", "title": "<code>start_time = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RetentionExecutionTask.end_time", "title": "<code>end_time = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RetentionExecutionTask.total", "title": "<code>total = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RetentionExecutionTask.retained", "title": "<code>retained = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.QuotaUpdateReq", "title": "<code>QuotaUpdateReq</code>", "text": "<p>               Bases: <code>BaseModel</code></p> Source code in <code>harborapi/models/models.py</code> <pre><code>class QuotaUpdateReq(BaseModel):\n    hard: Optional[ResourceList] = None\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.QuotaUpdateReq.hard", "title": "<code>hard = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.QuotaRefObject", "title": "<code>QuotaRefObject</code>", "text": "<p>               Bases: <code>RootModel[Optional[Dict[str, Dict[str, Any]]]]</code></p> Source code in <code>harborapi/models/models.py</code> <pre><code>class QuotaRefObject(RootModel[Optional[Dict[str, Dict[str, Any]]]]):\n    root: Optional[Dict[str, Any]] = None\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.QuotaRefObject.root", "title": "<code>root = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Quota", "title": "<code>Quota</code>", "text": "<p>               Bases: <code>BaseModel</code></p> <p>Quota object.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class Quota(BaseModel):\n    \"\"\"Quota object.\"\"\"\n\n    id: Optional[int] = Field(default=None, description=\"ID of the quota\")\n    ref: Optional[QuotaRefObject] = None\n    hard: Optional[ResourceList] = None\n    used: Optional[ResourceList] = None\n    creation_time: Optional[datetime] = Field(\n        default=None, description=\"the creation time of the quota\"\n    )\n    update_time: Optional[datetime] = Field(\n        default=None, description=\"the update time of the quota\"\n    )\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.Quota.id", "title": "<code>id = Field(default=None, description='ID of the quota')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Quota.ref", "title": "<code>ref = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Quota.hard", "title": "<code>hard = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Quota.used", "title": "<code>used = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Quota.creation_time", "title": "<code>creation_time = Field(default=None, description='the creation time of the quota')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Quota.update_time", "title": "<code>update_time = Field(default=None, description='the update time of the quota')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ScannerRegistration", "title": "<code>ScannerRegistration</code>", "text": "<p>               Bases: <code>BaseModel</code></p> <p>A registered scanner adapter.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class ScannerRegistration(BaseModel):\n    \"\"\"A registered scanner adapter.\"\"\"\n\n    uuid: Optional[str] = Field(\n        default=None, description=\"The unique identifier of this registration.\"\n    )\n    name: Optional[str] = Field(\n        default=None, description=\"The name of this registration.\", examples=[\"Trivy\"]\n    )\n    description: Optional[str] = Field(\n        default=None,\n        description=\"An optional description of this registration.\",\n        examples=[\n            \"A free-to-use tool that scans container images for package vulnerabilities.\\n\"\n        ],\n    )\n    url: Optional[AnyUrl] = Field(\n        default=None,\n        description=\"A base URL of the scanner adapter\",\n        examples=[\"http://harbor-scanner-trivy:8080\"],\n    )\n    disabled: Optional[bool] = Field(\n        default=False, description=\"Indicate whether the registration is enabled or not\"\n    )\n    is_default: Optional[bool] = Field(\n        default=False,\n        description=\"Indicate if the registration is set as the system default one\",\n    )\n    auth: Optional[str] = Field(\n        default=\"\",\n        description='Specify what authentication approach is adopted for the HTTP communications.\\nSupported types Basic\", \"Bearer\" and api key header \"X-ScannerAdapter-API-Key\"\\n',\n        examples=[\"Bearer\"],\n    )\n    access_credential: Optional[str] = Field(\n        default=None,\n        description=\"An optional value of the HTTP Authorization header sent with each request to the Scanner Adapter API.\\n\",\n        examples=[\"Bearer: JWTTOKENGOESHERE\"],\n    )\n    skip_cert_verify: Optional[bool] = Field(\n        default=False,\n        alias=\"skip_certVerify\",\n        description=\"Indicate if skip the certificate verification when sending HTTP requests\",\n    )\n    use_internal_addr: Optional[bool] = Field(\n        default=False,\n        description=\"Indicate whether use internal registry addr for the scanner to pull content or not\",\n    )\n    create_time: Optional[datetime] = Field(\n        default=None, description=\"The creation time of this registration\"\n    )\n    update_time: Optional[datetime] = Field(\n        default=None, description=\"The update time of this registration\"\n    )\n    adapter: Optional[str] = Field(\n        default=None,\n        description=\"Optional property to describe the name of the scanner registration\",\n        examples=[\"Trivy\"],\n    )\n    vendor: Optional[str] = Field(\n        default=None,\n        description=\"Optional property to describe the vendor of the scanner registration\",\n        examples=[\"CentOS\"],\n    )\n    version: Optional[str] = Field(\n        default=None,\n        description=\"Optional property to describe the version of the scanner registration\",\n        examples=[\"1.0.1\"],\n    )\n    health: Optional[str] = Field(\n        default=\"\",\n        description=\"Indicate the healthy of the registration\",\n        examples=[\"healthy\"],\n    )\n    capabilities: Optional[Dict[str, Any]] = Field(\n        default=None,\n        description=\"Indicates the capabilities of the scanner, e.g. support_vulnerability or support_sbom.\",\n        examples=[{\"support_vulnerability\": True, \"support_sbom\": True}],\n    )\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.ScannerRegistration.uuid", "title": "<code>uuid = Field(default=None, description='The unique identifier of this registration.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ScannerRegistration.name", "title": "<code>name = Field(default=None, description='The name of this registration.', examples=['Trivy'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ScannerRegistration.description", "title": "<code>description = Field(default=None, description='An optional description of this registration.', examples=['A free-to-use tool that scans container images for package vulnerabilities.\\n'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ScannerRegistration.url", "title": "<code>url = Field(default=None, description='A base URL of the scanner adapter', examples=['http://harbor-scanner-trivy:8080'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ScannerRegistration.disabled", "title": "<code>disabled = Field(default=False, description='Indicate whether the registration is enabled or not')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ScannerRegistration.is_default", "title": "<code>is_default = Field(default=False, description='Indicate if the registration is set as the system default one')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ScannerRegistration.auth", "title": "<code>auth = Field(default='', description='Specify what authentication approach is adopted for the HTTP communications.\\nSupported types Basic\", \"Bearer\" and api key header \"X-ScannerAdapter-API-Key\"\\n', examples=['Bearer'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ScannerRegistration.access_credential", "title": "<code>access_credential = Field(default=None, description='An optional value of the HTTP Authorization header sent with each request to the Scanner Adapter API.\\n', examples=['Bearer: JWTTOKENGOESHERE'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ScannerRegistration.skip_cert_verify", "title": "<code>skip_cert_verify = Field(default=False, alias='skip_certVerify', description='Indicate if skip the certificate verification when sending HTTP requests')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ScannerRegistration.use_internal_addr", "title": "<code>use_internal_addr = Field(default=False, description='Indicate whether use internal registry addr for the scanner to pull content or not')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ScannerRegistration.create_time", "title": "<code>create_time = Field(default=None, description='The creation time of this registration')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ScannerRegistration.update_time", "title": "<code>update_time = Field(default=None, description='The update time of this registration')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ScannerRegistration.adapter", "title": "<code>adapter = Field(default=None, description='Optional property to describe the name of the scanner registration', examples=['Trivy'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ScannerRegistration.vendor", "title": "<code>vendor = Field(default=None, description='Optional property to describe the vendor of the scanner registration', examples=['CentOS'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ScannerRegistration.version", "title": "<code>version = Field(default=None, description='Optional property to describe the version of the scanner registration', examples=['1.0.1'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ScannerRegistration.health", "title": "<code>health = Field(default='', description='Indicate the healthy of the registration', examples=['healthy'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ScannerRegistration.capabilities", "title": "<code>capabilities = Field(default=None, description='Indicates the capabilities of the scanner, e.g. support_vulnerability or support_sbom.', examples=[{'support_vulnerability': True, 'support_sbom': True}])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ScannerRegistrationReq", "title": "<code>ScannerRegistrationReq</code>", "text": "<p>               Bases: <code>BaseModel</code></p> Source code in <code>harborapi/models/models.py</code> <pre><code>class ScannerRegistrationReq(BaseModel):\n    name: str = Field(\n        ..., description=\"The name of this registration\", examples=[\"Trivy\"]\n    )\n    description: Optional[str] = Field(\n        default=None,\n        description=\"An optional description of this registration.\",\n        examples=[\n            \"A free-to-use tool that scans container images for package vulnerabilities.\\n\"\n        ],\n    )\n    url: AnyUrl = Field(\n        ...,\n        description=\"A base URL of the scanner adapter.\",\n        examples=[\"http://harbor-scanner-trivy:8080\"],\n    )\n    auth: Optional[str] = Field(\n        default=None,\n        description='Specify what authentication approach is adopted for the HTTP communications.\\nSupported types Basic\", \"Bearer\" and api key header \"X-ScannerAdapter-API-Key\"\\n',\n        examples=[\"Bearer\"],\n    )\n    access_credential: Optional[str] = Field(\n        default=None,\n        description=\"An optional value of the HTTP Authorization header sent with each request to the Scanner Adapter API.\\n\",\n        examples=[\"Bearer: JWTTOKENGOESHERE\"],\n    )\n    skip_cert_verify: Optional[bool] = Field(\n        default=False,\n        alias=\"skip_certVerify\",\n        description=\"Indicate if skip the certificate verification when sending HTTP requests\",\n    )\n    use_internal_addr: Optional[bool] = Field(\n        default=False,\n        description=\"Indicate whether use internal registry addr for the scanner to pull content or not\",\n    )\n    disabled: Optional[bool] = Field(\n        default=False, description=\"Indicate whether the registration is enabled or not\"\n    )\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.ScannerRegistrationReq.name", "title": "<code>name = Field(..., description='The name of this registration', examples=['Trivy'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ScannerRegistrationReq.description", "title": "<code>description = Field(default=None, description='An optional description of this registration.', examples=['A free-to-use tool that scans container images for package vulnerabilities.\\n'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ScannerRegistrationReq.url", "title": "<code>url = Field(..., description='A base URL of the scanner adapter.', examples=['http://harbor-scanner-trivy:8080'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ScannerRegistrationReq.auth", "title": "<code>auth = Field(default=None, description='Specify what authentication approach is adopted for the HTTP communications.\\nSupported types Basic\", \"Bearer\" and api key header \"X-ScannerAdapter-API-Key\"\\n', examples=['Bearer'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ScannerRegistrationReq.access_credential", "title": "<code>access_credential = Field(default=None, description='An optional value of the HTTP Authorization header sent with each request to the Scanner Adapter API.\\n', examples=['Bearer: JWTTOKENGOESHERE'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ScannerRegistrationReq.skip_cert_verify", "title": "<code>skip_cert_verify = Field(default=False, alias='skip_certVerify', description='Indicate if skip the certificate verification when sending HTTP requests')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ScannerRegistrationReq.use_internal_addr", "title": "<code>use_internal_addr = Field(default=False, description='Indicate whether use internal registry addr for the scanner to pull content or not')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ScannerRegistrationReq.disabled", "title": "<code>disabled = Field(default=False, description='Indicate whether the registration is enabled or not')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ScannerRegistrationSettings", "title": "<code>ScannerRegistrationSettings</code>", "text": "<p>               Bases: <code>BaseModel</code></p> Source code in <code>harborapi/models/models.py</code> <pre><code>class ScannerRegistrationSettings(BaseModel):\n    name: str = Field(\n        ..., description=\"The name of this registration\", examples=[\"Trivy\"]\n    )\n    url: AnyUrl = Field(\n        ...,\n        description=\"A base URL of the scanner adapter.\",\n        examples=[\"http://harbor-scanner-trivy:8080\"],\n    )\n    auth: Optional[str] = Field(\n        default=\"\",\n        description='Specify what authentication approach is adopted for the HTTP communications.\\nSupported types Basic\", \"Bearer\" and api key header \"X-ScannerAdapter-API-Key\"\\n',\n    )\n    access_credential: Optional[str] = Field(\n        default=None,\n        description=\"An optional value of the HTTP Authorization header sent with each request to the Scanner Adapter API.\\n\",\n        examples=[\"Bearer: JWTTOKENGOESHERE\"],\n    )\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.ScannerRegistrationSettings.name", "title": "<code>name = Field(..., description='The name of this registration', examples=['Trivy'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ScannerRegistrationSettings.url", "title": "<code>url = Field(..., description='A base URL of the scanner adapter.', examples=['http://harbor-scanner-trivy:8080'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ScannerRegistrationSettings.auth", "title": "<code>auth = Field(default='', description='Specify what authentication approach is adopted for the HTTP communications.\\nSupported types Basic\", \"Bearer\" and api key header \"X-ScannerAdapter-API-Key\"\\n')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ScannerRegistrationSettings.access_credential", "title": "<code>access_credential = Field(default=None, description='An optional value of the HTTP Authorization header sent with each request to the Scanner Adapter API.\\n', examples=['Bearer: JWTTOKENGOESHERE'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.IsDefault", "title": "<code>IsDefault</code>", "text": "<p>               Bases: <code>BaseModel</code></p> Source code in <code>harborapi/models/models.py</code> <pre><code>class IsDefault(BaseModel):\n    is_default: Optional[bool] = Field(\n        default=None,\n        description=\"A flag indicating whether a scanner registration is default.\",\n    )\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.IsDefault.is_default", "title": "<code>is_default = Field(default=None, description='A flag indicating whether a scanner registration is default.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ScannerCapability", "title": "<code>ScannerCapability</code>", "text": "<p>               Bases: <code>BaseModel</code></p> Source code in <code>harborapi/models/models.py</code> <pre><code>class ScannerCapability(BaseModel):\n    type: Optional[str] = Field(\n        default=None,\n        description=\"Specify the type of scanner capability, like vulnerability or sbom\\n\",\n        examples=[\"sbom\"],\n    )\n    consumes_mime_types: Optional[List[str]] = None\n    produces_mime_types: Optional[List[str]] = None\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.ScannerCapability.type", "title": "<code>type = Field(default=None, description='Specify the type of scanner capability, like vulnerability or sbom\\n', examples=['sbom'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ScannerCapability.consumes_mime_types", "title": "<code>consumes_mime_types = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ScannerCapability.produces_mime_types", "title": "<code>produces_mime_types = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ScannerAdapterMetadata", "title": "<code>ScannerAdapterMetadata</code>", "text": "<p>               Bases: <code>BaseModel</code></p> <p>Metadata for a scanner adapter.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class ScannerAdapterMetadata(BaseModel):\n    \"\"\"Metadata for a scanner adapter.\"\"\"\n\n    scanner: Optional[Scanner] = None\n    capabilities: Optional[List[ScannerCapability]] = None\n    properties: Optional[Dict[str, str]] = Field(\n        default=None,\n        examples=[{\"harbor.scanner-adapter/registry-authorization-type\": \"Bearer\"}],\n    )\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.ScannerAdapterMetadata.scanner", "title": "<code>scanner = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ScannerAdapterMetadata.capabilities", "title": "<code>capabilities = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ScannerAdapterMetadata.properties", "title": "<code>properties = Field(default=None, examples=[{'harbor.scanner-adapter/registry-authorization-type': 'Bearer'}])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ImmutableSelector", "title": "<code>ImmutableSelector</code>", "text": "<p>               Bases: <code>BaseModel</code></p> Source code in <code>harborapi/models/models.py</code> <pre><code>class ImmutableSelector(BaseModel):\n    kind: Optional[str] = None\n    decoration: Optional[str] = None\n    pattern: Optional[str] = None\n    extras: Optional[str] = None\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.ImmutableSelector.kind", "title": "<code>kind = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ImmutableSelector.decoration", "title": "<code>decoration = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ImmutableSelector.pattern", "title": "<code>pattern = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ImmutableSelector.extras", "title": "<code>extras = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.LdapConf", "title": "<code>LdapConf</code>", "text": "<p>               Bases: <code>BaseModel</code></p> <p>LDAP configuration properties.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class LdapConf(BaseModel):\n    \"\"\"LDAP configuration properties.\"\"\"\n\n    ldap_url: Optional[str] = Field(\n        default=None, description=\"The url of ldap service.\"\n    )\n    ldap_search_dn: Optional[str] = Field(\n        default=None, description=\"The search dn of ldap service.\"\n    )\n    ldap_search_password: Optional[str] = Field(\n        default=None, description=\"The search password of ldap service.\"\n    )\n    ldap_base_dn: Optional[str] = Field(\n        default=None, description=\"The base dn of ldap service.\"\n    )\n    ldap_filter: Optional[str] = Field(\n        default=None, description=\"The serach filter of ldap service.\"\n    )\n    ldap_uid: Optional[str] = Field(\n        default=None, description=\"The serach uid from ldap service attributes.\"\n    )\n    ldap_scope: Optional[int] = Field(\n        default=None, description=\"The serach scope of ldap service.\"\n    )\n    ldap_connection_timeout: Optional[int] = Field(\n        default=None, description=\"The connect timeout of ldap service(second).\"\n    )\n    ldap_verify_cert: Optional[bool] = Field(\n        default=None, description=\"Verify Ldap server certificate.\"\n    )\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.LdapConf.ldap_url", "title": "<code>ldap_url = Field(default=None, description='The url of ldap service.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.LdapConf.ldap_search_dn", "title": "<code>ldap_search_dn = Field(default=None, description='The search dn of ldap service.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.LdapConf.ldap_search_password", "title": "<code>ldap_search_password = Field(default=None, description='The search password of ldap service.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.LdapConf.ldap_base_dn", "title": "<code>ldap_base_dn = Field(default=None, description='The base dn of ldap service.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.LdapConf.ldap_filter", "title": "<code>ldap_filter = Field(default=None, description='The serach filter of ldap service.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.LdapConf.ldap_uid", "title": "<code>ldap_uid = Field(default=None, description='The serach uid from ldap service attributes.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.LdapConf.ldap_scope", "title": "<code>ldap_scope = Field(default=None, description='The serach scope of ldap service.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.LdapConf.ldap_connection_timeout", "title": "<code>ldap_connection_timeout = Field(default=None, description='The connect timeout of ldap service(second).')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.LdapConf.ldap_verify_cert", "title": "<code>ldap_verify_cert = Field(default=None, description='Verify Ldap server certificate.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.LdapPingResult", "title": "<code>LdapPingResult</code>", "text": "<p>               Bases: <code>BaseModel</code></p> <p>Result of a ping to an LDAP server.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class LdapPingResult(BaseModel):\n    \"\"\"Result of a ping to an LDAP server.\"\"\"\n\n    success: Optional[bool] = Field(default=None, description=\"Test success\")\n    message: Optional[str] = Field(\n        default=None, description=\"The ping operation output message.\"\n    )\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.LdapPingResult.success", "title": "<code>success = Field(default=None, description='Test success')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.LdapPingResult.message", "title": "<code>message = Field(default=None, description='The ping operation output message.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.LdapImportUsers", "title": "<code>LdapImportUsers</code>", "text": "<p>               Bases: <code>BaseModel</code></p> Source code in <code>harborapi/models/models.py</code> <pre><code>class LdapImportUsers(BaseModel):\n    ldap_uid_list: Optional[List[str]] = Field(\n        default=None, description=\"selected uid list\"\n    )\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.LdapImportUsers.ldap_uid_list", "title": "<code>ldap_uid_list = Field(default=None, description='selected uid list')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.LdapFailedImportUser", "title": "<code>LdapFailedImportUser</code>", "text": "<p>               Bases: <code>BaseModel</code></p> Source code in <code>harborapi/models/models.py</code> <pre><code>class LdapFailedImportUser(BaseModel):\n    uid: Optional[str] = Field(default=None, description=\"the uid can't add to system.\")\n    error: Optional[str] = Field(default=None, description=\"fail reason.\")\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.LdapFailedImportUser.uid", "title": "<code>uid = Field(default=None, description=\"the uid can't add to system.\")</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.LdapFailedImportUser.error", "title": "<code>error = Field(default=None, description='fail reason.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.LdapUser", "title": "<code>LdapUser</code>", "text": "<p>               Bases: <code>BaseModel</code></p> Source code in <code>harborapi/models/models.py</code> <pre><code>class LdapUser(BaseModel):\n    username: Optional[str] = Field(default=None, description=\"ldap username.\")\n    realname: Optional[str] = Field(\n        default=None, description='The user realname from \"uid\" or \"cn\" attribute.'\n    )\n    email: Optional[str] = Field(\n        default=None,\n        description='The user email address from \"mail\" or \"email\" attribute.',\n    )\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.LdapUser.username", "title": "<code>username = Field(default=None, description='ldap username.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.LdapUser.realname", "title": "<code>realname = Field(default=None, description='The user realname from \"uid\" or \"cn\" attribute.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.LdapUser.email", "title": "<code>email = Field(default=None, description='The user email address from \"mail\" or \"email\" attribute.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.UserGroup", "title": "<code>UserGroup</code>", "text": "<p>               Bases: <code>BaseModel</code></p> Source code in <code>harborapi/models/models.py</code> <pre><code>class UserGroup(BaseModel):\n    id: Optional[int] = Field(default=None, description=\"The ID of the user group\")\n    group_name: Optional[str] = Field(\n        default=None, description=\"The name of the user group\"\n    )\n    group_type: Optional[int] = Field(\n        default=None,\n        description=\"The group type, 1 for LDAP group, 2 for HTTP group, 3 for OIDC group.\",\n    )\n    ldap_group_dn: Optional[str] = Field(\n        default=None,\n        description=\"The DN of the LDAP group if group type is 1 (LDAP group).\",\n    )\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.UserGroup.id", "title": "<code>id = Field(default=None, description='The ID of the user group')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.UserGroup.group_name", "title": "<code>group_name = Field(default=None, description='The name of the user group')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.UserGroup.group_type", "title": "<code>group_type = Field(default=None, description='The group type, 1 for LDAP group, 2 for HTTP group, 3 for OIDC group.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.UserGroup.ldap_group_dn", "title": "<code>ldap_group_dn = Field(default=None, description='The DN of the LDAP group if group type is 1 (LDAP group).')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.UserGroupSearchItem", "title": "<code>UserGroupSearchItem</code>", "text": "<p>               Bases: <code>BaseModel</code></p> Source code in <code>harborapi/models/models.py</code> <pre><code>class UserGroupSearchItem(BaseModel):\n    id: Optional[int] = Field(default=None, description=\"The ID of the user group\")\n    group_name: Optional[str] = Field(\n        default=None, description=\"The name of the user group\"\n    )\n    group_type: Optional[int] = Field(\n        default=None,\n        description=\"The group type, 1 for LDAP group, 2 for HTTP group, 3 for OIDC group.\",\n    )\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.UserGroupSearchItem.id", "title": "<code>id = Field(default=None, description='The ID of the user group')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.UserGroupSearchItem.group_name", "title": "<code>group_name = Field(default=None, description='The name of the user group')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.UserGroupSearchItem.group_type", "title": "<code>group_type = Field(default=None, description='The group type, 1 for LDAP group, 2 for HTTP group, 3 for OIDC group.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.EventType", "title": "<code>EventType</code>", "text": "<p>               Bases: <code>RootModel[str]</code></p> Source code in <code>harborapi/models/models.py</code> <pre><code>class EventType(RootModel[str]):\n    root: str = Field(\n        ..., description=\"Webhook supported event type.\", examples=[\"PULL_ARTIFACT\"]\n    )\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.EventType.root", "title": "<code>root = Field(..., description='Webhook supported event type.', examples=['PULL_ARTIFACT'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.NotifyType", "title": "<code>NotifyType</code>", "text": "<p>               Bases: <code>RootModel[str]</code></p> Source code in <code>harborapi/models/models.py</code> <pre><code>class NotifyType(RootModel[str]):\n    root: str = Field(\n        ..., description=\"Webhook supported notify type.\", examples=[\"http\"]\n    )\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.NotifyType.root", "title": "<code>root = Field(..., description='Webhook supported notify type.', examples=['http'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.PayloadFormatType", "title": "<code>PayloadFormatType</code>", "text": "<p>               Bases: <code>RootModel[str]</code></p> Source code in <code>harborapi/models/models.py</code> <pre><code>class PayloadFormatType(RootModel[str]):\n    root: str = Field(\n        ..., description=\"The type of webhook paylod format.\", examples=[\"CloudEvents\"]\n    )\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.PayloadFormatType.root", "title": "<code>root = Field(..., description='The type of webhook paylod format.', examples=['CloudEvents'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.PayloadFormat", "title": "<code>PayloadFormat</code>", "text": "<p>               Bases: <code>BaseModel</code></p> <p>Webhook payload format types.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class PayloadFormat(BaseModel):\n    \"\"\"Webhook payload format types.\"\"\"\n\n    notify_type: Optional[NotifyType] = None\n    formats: Optional[List[PayloadFormatType]] = Field(\n        default=None, description=\"The supported payload formats for this notify type.\"\n    )\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.PayloadFormat.notify_type", "title": "<code>notify_type = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.PayloadFormat.formats", "title": "<code>formats = Field(default=None, description='The supported payload formats for this notify type.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.WebhookTargetObject", "title": "<code>WebhookTargetObject</code>", "text": "<p>               Bases: <code>BaseModel</code></p> <p>Webhook target</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class WebhookTargetObject(BaseModel):\n    \"\"\"Webhook target\"\"\"\n\n    type: Optional[str] = Field(\n        default=None, description=\"The webhook target notify type.\"\n    )\n    address: Optional[str] = Field(\n        default=None, description=\"The webhook target address.\"\n    )\n    auth_header: Optional[str] = Field(\n        default=None, description=\"The webhook auth header.\"\n    )\n    skip_cert_verify: Optional[bool] = Field(\n        default=None, description=\"Whether or not to skip cert verify.\"\n    )\n    payload_format: Optional[PayloadFormatType] = None\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.WebhookTargetObject.type", "title": "<code>type = Field(default=None, description='The webhook target notify type.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.WebhookTargetObject.address", "title": "<code>address = Field(default=None, description='The webhook target address.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.WebhookTargetObject.auth_header", "title": "<code>auth_header = Field(default=None, description='The webhook auth header.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.WebhookTargetObject.skip_cert_verify", "title": "<code>skip_cert_verify = Field(default=None, description='Whether or not to skip cert verify.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.WebhookTargetObject.payload_format", "title": "<code>payload_format = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.WebhookPolicy", "title": "<code>WebhookPolicy</code>", "text": "<p>               Bases: <code>BaseModel</code></p> <p>Webhook policy definition.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class WebhookPolicy(BaseModel):\n    \"\"\"Webhook policy definition.\"\"\"\n\n    id: Optional[int] = Field(default=None, description=\"The webhook policy ID.\")\n    name: Optional[str] = Field(default=None, description=\"The name of webhook policy.\")\n    description: Optional[str] = Field(\n        default=None, description=\"The description of webhook policy.\"\n    )\n    project_id: Optional[int] = Field(\n        default=None, description=\"The project ID of webhook policy.\"\n    )\n    targets: Optional[List[WebhookTargetObject]] = None\n    event_types: Optional[List[str]] = None\n    creator: Optional[str] = Field(\n        default=None, description=\"The creator of the webhook policy.\"\n    )\n    creation_time: Optional[datetime] = Field(\n        default=None, description=\"The create time of the webhook policy.\"\n    )\n    update_time: Optional[datetime] = Field(\n        default=None, description=\"The update time of the webhook policy.\"\n    )\n    enabled: Optional[bool] = Field(\n        default=None, description=\"Whether the webhook policy is enabled or not.\"\n    )\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.WebhookPolicy.id", "title": "<code>id = Field(default=None, description='The webhook policy ID.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.WebhookPolicy.name", "title": "<code>name = Field(default=None, description='The name of webhook policy.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.WebhookPolicy.description", "title": "<code>description = Field(default=None, description='The description of webhook policy.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.WebhookPolicy.project_id", "title": "<code>project_id = Field(default=None, description='The project ID of webhook policy.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.WebhookPolicy.targets", "title": "<code>targets = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.WebhookPolicy.event_types", "title": "<code>event_types = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.WebhookPolicy.creator", "title": "<code>creator = Field(default=None, description='The creator of the webhook policy.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.WebhookPolicy.creation_time", "title": "<code>creation_time = Field(default=None, description='The create time of the webhook policy.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.WebhookPolicy.update_time", "title": "<code>update_time = Field(default=None, description='The update time of the webhook policy.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.WebhookPolicy.enabled", "title": "<code>enabled = Field(default=None, description='Whether the webhook policy is enabled or not.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.WebhookLastTrigger", "title": "<code>WebhookLastTrigger</code>", "text": "<p>               Bases: <code>BaseModel</code></p> <p>Last trigger of the webhook and the event type of the trigger.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class WebhookLastTrigger(BaseModel):\n    \"\"\"Last trigger of the webhook and the event type of the trigger.\"\"\"\n\n    policy_name: Optional[str] = Field(\n        default=None, description=\"The webhook policy name.\"\n    )\n    event_type: Optional[str] = Field(\n        default=None, description=\"The webhook event type.\"\n    )\n    enabled: Optional[bool] = Field(\n        default=None, description=\"Whether or not the webhook policy enabled.\"\n    )\n    creation_time: Optional[datetime] = Field(\n        default=None, description=\"The creation time of webhook policy.\"\n    )\n    last_trigger_time: Optional[datetime] = Field(\n        default=None, description=\"The last trigger time of webhook policy.\"\n    )\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.WebhookLastTrigger.policy_name", "title": "<code>policy_name = Field(default=None, description='The webhook policy name.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.WebhookLastTrigger.event_type", "title": "<code>event_type = Field(default=None, description='The webhook event type.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.WebhookLastTrigger.enabled", "title": "<code>enabled = Field(default=None, description='Whether or not the webhook policy enabled.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.WebhookLastTrigger.creation_time", "title": "<code>creation_time = Field(default=None, description='The creation time of webhook policy.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.WebhookLastTrigger.last_trigger_time", "title": "<code>last_trigger_time = Field(default=None, description='The last trigger time of webhook policy.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.WebhookJob", "title": "<code>WebhookJob</code>", "text": "<p>               Bases: <code>BaseModel</code></p> <p>A webhook job.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class WebhookJob(BaseModel):\n    \"\"\"A webhook job.\"\"\"\n\n    id: Optional[int] = Field(default=None, description=\"The webhook job ID.\")\n    policy_id: Optional[int] = Field(default=None, description=\"The webhook policy ID.\")\n    event_type: Optional[str] = Field(\n        default=None, description=\"The webhook job event type.\"\n    )\n    notify_type: Optional[str] = Field(\n        default=None, description=\"The webhook job notify type.\"\n    )\n    status: Optional[str] = Field(default=None, description=\"The webhook job status.\")\n    job_detail: Optional[str] = Field(\n        default=None, description=\"The webhook job notify detailed data.\"\n    )\n    creation_time: Optional[datetime] = Field(\n        default=None, description=\"The webhook job creation time.\"\n    )\n    update_time: Optional[datetime] = Field(\n        default=None, description=\"The webhook job update time.\"\n    )\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.WebhookJob.id", "title": "<code>id = Field(default=None, description='The webhook job ID.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.WebhookJob.policy_id", "title": "<code>policy_id = Field(default=None, description='The webhook policy ID.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.WebhookJob.event_type", "title": "<code>event_type = Field(default=None, description='The webhook job event type.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.WebhookJob.notify_type", "title": "<code>notify_type = Field(default=None, description='The webhook job notify type.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.WebhookJob.status", "title": "<code>status = Field(default=None, description='The webhook job status.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.WebhookJob.job_detail", "title": "<code>job_detail = Field(default=None, description='The webhook job notify detailed data.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.WebhookJob.creation_time", "title": "<code>creation_time = Field(default=None, description='The webhook job creation time.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.WebhookJob.update_time", "title": "<code>update_time = Field(default=None, description='The webhook job update time.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.InternalConfigurationValue", "title": "<code>InternalConfigurationValue</code>", "text": "<p>               Bases: <code>BaseModel</code></p> Source code in <code>harborapi/models/models.py</code> <pre><code>class InternalConfigurationValue(BaseModel):\n    value: Optional[Dict[str, Any]] = Field(\n        default=None, description=\"The value of current config item\"\n    )\n    editable: Optional[bool] = Field(\n        default=None, description=\"The configure item can be updated or not\"\n    )\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.InternalConfigurationValue.value", "title": "<code>value = Field(default=None, description='The value of current config item')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.InternalConfigurationValue.editable", "title": "<code>editable = Field(default=None, description='The configure item can be updated or not')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Parameter", "title": "<code>Parameter</code>", "text": "<p>               Bases: <code>BaseModel</code></p> <p>Parameters for a 'scan all' policy.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class Parameter(BaseModel):\n    \"\"\"Parameters for a 'scan all' policy.\"\"\"\n\n    daily_time: Optional[int] = Field(\n        default=None,\n        description='The offset in seconds of UTC 0 o\\'clock, only valid when the policy type is \"daily\"',\n    )\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.Parameter.daily_time", "title": "<code>daily_time = Field(default=None, description='The offset in seconds of UTC 0 o\\'clock, only valid when the policy type is \"daily\"')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ScanAllPolicy", "title": "<code>ScanAllPolicy</code>", "text": "<p>               Bases: <code>BaseModel</code></p> Source code in <code>harborapi/models/models.py</code> <pre><code>class ScanAllPolicy(BaseModel):\n    type: Optional[str] = Field(\n        default=None,\n        description='The type of scan all policy, currently the valid values are \"none\" and \"daily\"',\n    )\n    parameter: Optional[Parameter] = Field(\n        default=None,\n        description=\"The parameters of the policy, the values are dependent on the type of the policy.\",\n    )\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.ScanAllPolicy.type", "title": "<code>type = Field(default=None, description='The type of scan all policy, currently the valid values are \"none\" and \"daily\"')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ScanAllPolicy.parameter", "title": "<code>parameter = Field(default=None, description='The parameters of the policy, the values are dependent on the type of the policy.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Configurations", "title": "<code>Configurations</code>", "text": "<p>               Bases: <code>BaseModel</code></p> Source code in <code>harborapi/models/models.py</code> <pre><code>class Configurations(BaseModel):\n    auth_mode: Optional[str] = Field(\n        default=None,\n        description='The auth mode of current system, such as \"db_auth\", \"ldap_auth\", \"oidc_auth\"',\n    )\n    primary_auth_mode: Optional[bool] = Field(\n        default=None,\n        description=\"The flag to indicate whether the current auth mode should consider as a primary one.\",\n    )\n    ldap_base_dn: Optional[str] = Field(\n        default=None, description=\"The Base DN for LDAP binding.\"\n    )\n    ldap_filter: Optional[str] = Field(\n        default=None, description=\"The filter for LDAP search\"\n    )\n    ldap_group_base_dn: Optional[str] = Field(\n        default=None, description=\"The base DN to search LDAP group.\"\n    )\n    ldap_group_admin_dn: Optional[str] = Field(\n        default=None,\n        description=\"Specify the ldap group which have the same privilege with Harbor admin\",\n    )\n    ldap_group_attribute_name: Optional[str] = Field(\n        default=None,\n        description=\"The attribute which is used as identity of the LDAP group, default is cn.'\",\n    )\n    ldap_group_search_filter: Optional[str] = Field(\n        default=None, description=\"The filter to search the ldap group\"\n    )\n    ldap_group_search_scope: Optional[int] = Field(\n        default=None,\n        description=\"The scope to search ldap group. ''0-LDAP_SCOPE_BASE, 1-LDAP_SCOPE_ONELEVEL, 2-LDAP_SCOPE_SUBTREE''\",\n    )\n    ldap_group_attach_parallel: Optional[bool] = Field(\n        default=None,\n        description=\"Attach LDAP user group information in parallel, the parallel worker count is 5\",\n    )\n    ldap_scope: Optional[int] = Field(\n        default=None,\n        description=\"The scope to search ldap users,'0-LDAP_SCOPE_BASE, 1-LDAP_SCOPE_ONELEVEL, 2-LDAP_SCOPE_SUBTREE'\",\n    )\n    ldap_search_dn: Optional[str] = Field(\n        default=None, description=\"The DN of the user to do the search.\"\n    )\n    ldap_search_password: Optional[str] = Field(\n        default=None, description=\"The password of the ldap search dn\"\n    )\n    ldap_timeout: Optional[int] = Field(\n        default=None, description=\"Timeout in seconds for connection to LDAP server\"\n    )\n    ldap_uid: Optional[str] = Field(\n        default=None,\n        description='The attribute which is used as identity for the LDAP binding, such as \"CN\" or \"SAMAccountname\"',\n    )\n    ldap_url: Optional[str] = Field(default=None, description=\"The URL of LDAP server\")\n    ldap_verify_cert: Optional[bool] = Field(\n        default=None,\n        description=\"Whether verify your OIDC server certificate, disable it if your OIDC server is hosted via self-hosted certificate.\",\n    )\n    ldap_group_membership_attribute: Optional[str] = Field(\n        default=None, description=\"The user attribute to identify the group membership\"\n    )\n    project_creation_restriction: Optional[str] = Field(\n        default=None,\n        description=\"Indicate who can create projects, it could be ''adminonly'' or ''everyone''.\",\n    )\n    read_only: Optional[bool] = Field(\n        default=None,\n        description=\"The flag to indicate whether Harbor is in readonly mode.\",\n    )\n    self_registration: Optional[bool] = Field(\n        default=None,\n        description=\"Whether the Harbor instance supports self-registration.  If it''s set to false, admin need to add user to the instance.\",\n    )\n    token_expiration: Optional[int] = Field(\n        default=None,\n        description=\"The expiration time of the token for internal Registry, in minutes.\",\n    )\n    uaa_client_id: Optional[str] = Field(\n        default=None, description=\"The client id of UAA\"\n    )\n    uaa_client_secret: Optional[str] = Field(\n        default=None, description=\"The client secret of the UAA\"\n    )\n    uaa_endpoint: Optional[str] = Field(\n        default=None, description=\"The endpoint of the UAA\"\n    )\n    uaa_verify_cert: Optional[bool] = Field(\n        default=None, description=\"Verify the certificate in UAA server\"\n    )\n    http_authproxy_endpoint: Optional[str] = Field(\n        default=None, description=\"The endpoint of the HTTP auth\"\n    )\n    http_authproxy_tokenreview_endpoint: Optional[str] = Field(\n        default=None, description=\"The token review endpoint\"\n    )\n    http_authproxy_admin_groups: Optional[str] = Field(\n        default=None, description=\"The group which has the harbor admin privileges\"\n    )\n    http_authproxy_admin_usernames: Optional[str] = Field(\n        default=None, description=\"The username which has the harbor admin privileges\"\n    )\n    http_authproxy_verify_cert: Optional[bool] = Field(\n        default=None, description=\"Verify the HTTP auth provider's certificate\"\n    )\n    http_authproxy_skip_search: Optional[bool] = Field(\n        default=None, description=\"Search user before onboard\"\n    )\n    http_authproxy_server_certificate: Optional[str] = Field(\n        default=None, description=\"The certificate of the HTTP auth provider\"\n    )\n    oidc_name: Optional[str] = Field(default=None, description=\"The OIDC provider name\")\n    oidc_endpoint: Optional[str] = Field(\n        default=None, description=\"The endpoint of the OIDC provider\"\n    )\n    oidc_client_id: Optional[str] = Field(\n        default=None, description=\"The client ID of the OIDC provider\"\n    )\n    oidc_client_secret: Optional[str] = Field(\n        default=None, description=\"The OIDC provider secret\"\n    )\n    oidc_groups_claim: Optional[str] = Field(\n        default=None, description=\"The attribute claims the group name\"\n    )\n    oidc_admin_group: Optional[str] = Field(\n        default=None, description=\"The OIDC group which has the harbor admin privileges\"\n    )\n    oidc_group_filter: Optional[str] = Field(\n        default=None,\n        description=\"The OIDC group filter which filters out the group name doesn't match the regular expression\",\n    )\n    oidc_scope: Optional[str] = Field(\n        default=None, description=\"The scope of the OIDC provider\"\n    )\n    oidc_user_claim: Optional[str] = Field(\n        default=None, description=\"The attribute claims the username\"\n    )\n    oidc_verify_cert: Optional[bool] = Field(\n        default=None, description=\"Verify the OIDC provider's certificate'\"\n    )\n    oidc_auto_onboard: Optional[bool] = Field(\n        default=None, description=\"Auto onboard the OIDC user\"\n    )\n    oidc_extra_redirect_parms: Optional[str] = Field(\n        default=None,\n        description=\"Extra parameters to add when redirect request to OIDC provider\",\n    )\n    robot_token_duration: Optional[int] = Field(\n        default=None, description=\"The robot account token duration in days\"\n    )\n    robot_name_prefix: Optional[str] = Field(\n        default=None, description=\"The rebot account name prefix\"\n    )\n    notification_enable: Optional[bool] = Field(\n        default=None, description=\"Enable notification\"\n    )\n    quota_per_project_enable: Optional[bool] = Field(\n        default=None, description=\"Enable quota per project\"\n    )\n    storage_per_project: Optional[int] = Field(\n        default=None, description=\"The storage quota per project\"\n    )\n    audit_log_forward_endpoint: Optional[str] = Field(\n        default=None, description=\"The audit log forward endpoint\"\n    )\n    skip_audit_log_database: Optional[bool] = Field(\n        default=None, description=\"Skip audit log database\"\n    )\n    session_timeout: Optional[int] = Field(\n        default=None, description=\"The session timeout for harbor, in minutes.\"\n    )\n    scanner_skip_update_pulltime: Optional[bool] = Field(\n        default=None, description=\"Whether or not to skip update pull time for scanner\"\n    )\n    banner_message: Optional[str] = Field(\n        default=None,\n        description=\"The banner message for the UI.It is the stringified result of the banner message object\",\n    )\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.Configurations.auth_mode", "title": "<code>auth_mode = Field(default=None, description='The auth mode of current system, such as \"db_auth\", \"ldap_auth\", \"oidc_auth\"')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Configurations.primary_auth_mode", "title": "<code>primary_auth_mode = Field(default=None, description='The flag to indicate whether the current auth mode should consider as a primary one.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Configurations.ldap_base_dn", "title": "<code>ldap_base_dn = Field(default=None, description='The Base DN for LDAP binding.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Configurations.ldap_filter", "title": "<code>ldap_filter = Field(default=None, description='The filter for LDAP search')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Configurations.ldap_group_base_dn", "title": "<code>ldap_group_base_dn = Field(default=None, description='The base DN to search LDAP group.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Configurations.ldap_group_admin_dn", "title": "<code>ldap_group_admin_dn = Field(default=None, description='Specify the ldap group which have the same privilege with Harbor admin')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Configurations.ldap_group_attribute_name", "title": "<code>ldap_group_attribute_name = Field(default=None, description=\"The attribute which is used as identity of the LDAP group, default is cn.'\")</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Configurations.ldap_group_search_filter", "title": "<code>ldap_group_search_filter = Field(default=None, description='The filter to search the ldap group')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Configurations.ldap_group_search_scope", "title": "<code>ldap_group_search_scope = Field(default=None, description=\"The scope to search ldap group. ''0-LDAP_SCOPE_BASE, 1-LDAP_SCOPE_ONELEVEL, 2-LDAP_SCOPE_SUBTREE''\")</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Configurations.ldap_group_attach_parallel", "title": "<code>ldap_group_attach_parallel = Field(default=None, description='Attach LDAP user group information in parallel, the parallel worker count is 5')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Configurations.ldap_scope", "title": "<code>ldap_scope = Field(default=None, description=\"The scope to search ldap users,'0-LDAP_SCOPE_BASE, 1-LDAP_SCOPE_ONELEVEL, 2-LDAP_SCOPE_SUBTREE'\")</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Configurations.ldap_search_dn", "title": "<code>ldap_search_dn = Field(default=None, description='The DN of the user to do the search.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Configurations.ldap_search_password", "title": "<code>ldap_search_password = Field(default=None, description='The password of the ldap search dn')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Configurations.ldap_timeout", "title": "<code>ldap_timeout = Field(default=None, description='Timeout in seconds for connection to LDAP server')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Configurations.ldap_uid", "title": "<code>ldap_uid = Field(default=None, description='The attribute which is used as identity for the LDAP binding, such as \"CN\" or \"SAMAccountname\"')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Configurations.ldap_url", "title": "<code>ldap_url = Field(default=None, description='The URL of LDAP server')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Configurations.ldap_verify_cert", "title": "<code>ldap_verify_cert = Field(default=None, description='Whether verify your OIDC server certificate, disable it if your OIDC server is hosted via self-hosted certificate.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Configurations.ldap_group_membership_attribute", "title": "<code>ldap_group_membership_attribute = Field(default=None, description='The user attribute to identify the group membership')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Configurations.project_creation_restriction", "title": "<code>project_creation_restriction = Field(default=None, description=\"Indicate who can create projects, it could be ''adminonly'' or ''everyone''.\")</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Configurations.read_only", "title": "<code>read_only = Field(default=None, description='The flag to indicate whether Harbor is in readonly mode.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Configurations.self_registration", "title": "<code>self_registration = Field(default=None, description=\"Whether the Harbor instance supports self-registration.  If it''s set to false, admin need to add user to the instance.\")</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Configurations.token_expiration", "title": "<code>token_expiration = Field(default=None, description='The expiration time of the token for internal Registry, in minutes.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Configurations.uaa_client_id", "title": "<code>uaa_client_id = Field(default=None, description='The client id of UAA')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Configurations.uaa_client_secret", "title": "<code>uaa_client_secret = Field(default=None, description='The client secret of the UAA')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Configurations.uaa_endpoint", "title": "<code>uaa_endpoint = Field(default=None, description='The endpoint of the UAA')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Configurations.uaa_verify_cert", "title": "<code>uaa_verify_cert = Field(default=None, description='Verify the certificate in UAA server')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Configurations.http_authproxy_endpoint", "title": "<code>http_authproxy_endpoint = Field(default=None, description='The endpoint of the HTTP auth')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Configurations.http_authproxy_tokenreview_endpoint", "title": "<code>http_authproxy_tokenreview_endpoint = Field(default=None, description='The token review endpoint')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Configurations.http_authproxy_admin_groups", "title": "<code>http_authproxy_admin_groups = Field(default=None, description='The group which has the harbor admin privileges')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Configurations.http_authproxy_admin_usernames", "title": "<code>http_authproxy_admin_usernames = Field(default=None, description='The username which has the harbor admin privileges')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Configurations.http_authproxy_verify_cert", "title": "<code>http_authproxy_verify_cert = Field(default=None, description=\"Verify the HTTP auth provider's certificate\")</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Configurations.http_authproxy_skip_search", "title": "<code>http_authproxy_skip_search = Field(default=None, description='Search user before onboard')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Configurations.http_authproxy_server_certificate", "title": "<code>http_authproxy_server_certificate = Field(default=None, description='The certificate of the HTTP auth provider')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Configurations.oidc_name", "title": "<code>oidc_name = Field(default=None, description='The OIDC provider name')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Configurations.oidc_endpoint", "title": "<code>oidc_endpoint = Field(default=None, description='The endpoint of the OIDC provider')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Configurations.oidc_client_id", "title": "<code>oidc_client_id = Field(default=None, description='The client ID of the OIDC provider')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Configurations.oidc_client_secret", "title": "<code>oidc_client_secret = Field(default=None, description='The OIDC provider secret')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Configurations.oidc_groups_claim", "title": "<code>oidc_groups_claim = Field(default=None, description='The attribute claims the group name')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Configurations.oidc_admin_group", "title": "<code>oidc_admin_group = Field(default=None, description='The OIDC group which has the harbor admin privileges')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Configurations.oidc_group_filter", "title": "<code>oidc_group_filter = Field(default=None, description=\"The OIDC group filter which filters out the group name doesn't match the regular expression\")</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Configurations.oidc_scope", "title": "<code>oidc_scope = Field(default=None, description='The scope of the OIDC provider')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Configurations.oidc_user_claim", "title": "<code>oidc_user_claim = Field(default=None, description='The attribute claims the username')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Configurations.oidc_verify_cert", "title": "<code>oidc_verify_cert = Field(default=None, description=\"Verify the OIDC provider's certificate'\")</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Configurations.oidc_auto_onboard", "title": "<code>oidc_auto_onboard = Field(default=None, description='Auto onboard the OIDC user')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Configurations.oidc_extra_redirect_parms", "title": "<code>oidc_extra_redirect_parms = Field(default=None, description='Extra parameters to add when redirect request to OIDC provider')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Configurations.robot_token_duration", "title": "<code>robot_token_duration = Field(default=None, description='The robot account token duration in days')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Configurations.robot_name_prefix", "title": "<code>robot_name_prefix = Field(default=None, description='The rebot account name prefix')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Configurations.notification_enable", "title": "<code>notification_enable = Field(default=None, description='Enable notification')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Configurations.quota_per_project_enable", "title": "<code>quota_per_project_enable = Field(default=None, description='Enable quota per project')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Configurations.storage_per_project", "title": "<code>storage_per_project = Field(default=None, description='The storage quota per project')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Configurations.audit_log_forward_endpoint", "title": "<code>audit_log_forward_endpoint = Field(default=None, description='The audit log forward endpoint')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Configurations.skip_audit_log_database", "title": "<code>skip_audit_log_database = Field(default=None, description='Skip audit log database')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Configurations.session_timeout", "title": "<code>session_timeout = Field(default=None, description='The session timeout for harbor, in minutes.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Configurations.scanner_skip_update_pulltime", "title": "<code>scanner_skip_update_pulltime = Field(default=None, description='Whether or not to skip update pull time for scanner')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Configurations.banner_message", "title": "<code>banner_message = Field(default=None, description='The banner message for the UI.It is the stringified result of the banner message object')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.StringConfigItem", "title": "<code>StringConfigItem</code>", "text": "<p>               Bases: <code>BaseModel</code></p> Source code in <code>harborapi/models/models.py</code> <pre><code>class StringConfigItem(BaseModel):\n    value: Optional[str] = Field(\n        default=None, description=\"The string value of current config item\"\n    )\n    editable: Optional[bool] = Field(\n        default=None, description=\"The configure item can be updated or not\"\n    )\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.StringConfigItem.value", "title": "<code>value = Field(default=None, description='The string value of current config item')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.StringConfigItem.editable", "title": "<code>editable = Field(default=None, description='The configure item can be updated or not')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.BoolConfigItem", "title": "<code>BoolConfigItem</code>", "text": "<p>               Bases: <code>BaseModel</code></p> Source code in <code>harborapi/models/models.py</code> <pre><code>class BoolConfigItem(BaseModel):\n    value: Optional[bool] = Field(\n        default=None, description=\"The boolean value of current config item\"\n    )\n    editable: Optional[bool] = Field(\n        default=None, description=\"The configure item can be updated or not\"\n    )\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.BoolConfigItem.value", "title": "<code>value = Field(default=None, description='The boolean value of current config item')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.BoolConfigItem.editable", "title": "<code>editable = Field(default=None, description='The configure item can be updated or not')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.IntegerConfigItem", "title": "<code>IntegerConfigItem</code>", "text": "<p>               Bases: <code>BaseModel</code></p> Source code in <code>harborapi/models/models.py</code> <pre><code>class IntegerConfigItem(BaseModel):\n    value: Optional[int] = Field(\n        default=None, description=\"The integer value of current config item\"\n    )\n    editable: Optional[bool] = Field(\n        default=None, description=\"The configure item can be updated or not\"\n    )\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.IntegerConfigItem.value", "title": "<code>value = Field(default=None, description='The integer value of current config item')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.IntegerConfigItem.editable", "title": "<code>editable = Field(default=None, description='The configure item can be updated or not')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ProjectMemberEntity", "title": "<code>ProjectMemberEntity</code>", "text": "<p>               Bases: <code>BaseModel</code></p> Source code in <code>harborapi/models/models.py</code> <pre><code>class ProjectMemberEntity(BaseModel):\n    id: Optional[int] = Field(default=None, description=\"the project member id\")\n    project_id: Optional[int] = Field(default=None, description=\"the project id\")\n    entity_name: Optional[str] = Field(\n        default=None, description=\"the name of the group member.\"\n    )\n    role_name: Optional[str] = Field(default=None, description=\"the name of the role\")\n    role_id: Optional[int] = Field(default=None, description=\"the role id\")\n    entity_id: Optional[int] = Field(\n        default=None,\n        description=\"the id of entity, if the member is a user, it is user_id in user table. if the member is a user group, it is the user group's ID in user_group table.\",\n    )\n    entity_type: Optional[str] = Field(\n        default=None,\n        description=\"the entity's type, u for user entity, g for group entity.\",\n    )\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.ProjectMemberEntity.id", "title": "<code>id = Field(default=None, description='the project member id')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ProjectMemberEntity.project_id", "title": "<code>project_id = Field(default=None, description='the project id')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ProjectMemberEntity.entity_name", "title": "<code>entity_name = Field(default=None, description='the name of the group member.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ProjectMemberEntity.role_name", "title": "<code>role_name = Field(default=None, description='the name of the role')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ProjectMemberEntity.role_id", "title": "<code>role_id = Field(default=None, description='the role id')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ProjectMemberEntity.entity_id", "title": "<code>entity_id = Field(default=None, description=\"the id of entity, if the member is a user, it is user_id in user table. if the member is a user group, it is the user group's ID in user_group table.\")</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ProjectMemberEntity.entity_type", "title": "<code>entity_type = Field(default=None, description=\"the entity's type, u for user entity, g for group entity.\")</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RoleRequest", "title": "<code>RoleRequest</code>", "text": "<p>               Bases: <code>BaseModel</code></p> Source code in <code>harborapi/models/models.py</code> <pre><code>class RoleRequest(BaseModel):\n    role_id: Optional[int] = Field(\n        default=None,\n        description=\"The role id 1 for projectAdmin, 2 for developer, 3 for guest, 4 for maintainer\",\n    )\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.RoleRequest.role_id", "title": "<code>role_id = Field(default=None, description='The role id 1 for projectAdmin, 2 for developer, 3 for guest, 4 for maintainer')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.UserEntity", "title": "<code>UserEntity</code>", "text": "<p>               Bases: <code>BaseModel</code></p> Source code in <code>harborapi/models/models.py</code> <pre><code>class UserEntity(BaseModel):\n    user_id: Optional[int] = Field(default=None, description=\"The ID of the user.\")\n    username: Optional[str] = Field(default=None, description=\"The name of the user.\")\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.UserEntity.user_id", "title": "<code>user_id = Field(default=None, description='The ID of the user.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.UserEntity.username", "title": "<code>username = Field(default=None, description='The name of the user.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.UserProfile", "title": "<code>UserProfile</code>", "text": "<p>               Bases: <code>BaseModel</code></p> Source code in <code>harborapi/models/models.py</code> <pre><code>class UserProfile(BaseModel):\n    email: Optional[str] = None\n    realname: Optional[str] = None\n    comment: Optional[str] = None\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.UserProfile.email", "title": "<code>email = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.UserProfile.realname", "title": "<code>realname = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.UserProfile.comment", "title": "<code>comment = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.UserCreationReq", "title": "<code>UserCreationReq</code>", "text": "<p>               Bases: <code>BaseModel</code></p> Source code in <code>harborapi/models/models.py</code> <pre><code>class UserCreationReq(BaseModel):\n    email: Optional[str] = Field(default=None, max_length=255)\n    realname: Optional[str] = None\n    comment: Optional[str] = None\n    password: Optional[str] = None\n    username: Optional[str] = Field(default=None, max_length=255)\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.UserCreationReq.email", "title": "<code>email = Field(default=None, max_length=255)</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.UserCreationReq.realname", "title": "<code>realname = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.UserCreationReq.comment", "title": "<code>comment = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.UserCreationReq.password", "title": "<code>password = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.UserCreationReq.username", "title": "<code>username = Field(default=None, max_length=255)</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.OIDCUserInfo", "title": "<code>OIDCUserInfo</code>", "text": "<p>               Bases: <code>BaseModel</code></p> Source code in <code>harborapi/models/models.py</code> <pre><code>class OIDCUserInfo(BaseModel):\n    id: Optional[int] = Field(\n        default=None, description=\"the ID of the OIDC info record\"\n    )\n    user_id: Optional[int] = Field(default=None, description=\"the ID of the user\")\n    subiss: Optional[str] = Field(\n        default=None, description=\"the concatenation of sub and issuer in the ID token\"\n    )\n    secret: Optional[str] = Field(\n        default=None,\n        description=\"the secret of the OIDC user that can be used for CLI to push/pull artifacts\",\n    )\n    creation_time: Optional[datetime] = Field(\n        default=None, description=\"The creation time of the OIDC user info record.\"\n    )\n    update_time: Optional[datetime] = Field(\n        default=None, description=\"The update time of the OIDC user info record.\"\n    )\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.OIDCUserInfo.id", "title": "<code>id = Field(default=None, description='the ID of the OIDC info record')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.OIDCUserInfo.user_id", "title": "<code>user_id = Field(default=None, description='the ID of the user')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.OIDCUserInfo.subiss", "title": "<code>subiss = Field(default=None, description='the concatenation of sub and issuer in the ID token')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.OIDCUserInfo.secret", "title": "<code>secret = Field(default=None, description='the secret of the OIDC user that can be used for CLI to push/pull artifacts')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.OIDCUserInfo.creation_time", "title": "<code>creation_time = Field(default=None, description='The creation time of the OIDC user info record.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.OIDCUserInfo.update_time", "title": "<code>update_time = Field(default=None, description='The update time of the OIDC user info record.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.UserResp", "title": "<code>UserResp</code>", "text": "<p>               Bases: <code>BaseModel</code></p> Source code in <code>harborapi/models/models.py</code> <pre><code>class UserResp(BaseModel):\n    email: Optional[str] = None\n    realname: Optional[str] = None\n    comment: Optional[str] = None\n    user_id: Optional[int] = None\n    username: Optional[str] = None\n    sysadmin_flag: Optional[bool] = None\n    admin_role_in_auth: Optional[bool] = Field(\n        default=None,\n        description=\"indicate the admin privilege is grant by authenticator (LDAP), is always false unless it is the current login user\",\n    )\n    oidc_user_meta: Optional[OIDCUserInfo] = None\n    creation_time: Optional[datetime] = Field(\n        default=None, description=\"The creation time of the user.\"\n    )\n    update_time: Optional[datetime] = Field(\n        default=None, description=\"The update time of the user.\"\n    )\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.UserResp.email", "title": "<code>email = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.UserResp.realname", "title": "<code>realname = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.UserResp.comment", "title": "<code>comment = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.UserResp.user_id", "title": "<code>user_id = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.UserResp.username", "title": "<code>username = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.UserResp.sysadmin_flag", "title": "<code>sysadmin_flag = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.UserResp.admin_role_in_auth", "title": "<code>admin_role_in_auth = Field(default=None, description='indicate the admin privilege is grant by authenticator (LDAP), is always false unless it is the current login user')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.UserResp.oidc_user_meta", "title": "<code>oidc_user_meta = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.UserResp.creation_time", "title": "<code>creation_time = Field(default=None, description='The creation time of the user.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.UserResp.update_time", "title": "<code>update_time = Field(default=None, description='The update time of the user.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.UserSysAdminFlag", "title": "<code>UserSysAdminFlag</code>", "text": "<p>               Bases: <code>BaseModel</code></p> Source code in <code>harborapi/models/models.py</code> <pre><code>class UserSysAdminFlag(BaseModel):\n    sysadmin_flag: Optional[bool] = Field(\n        default=None, description=\"true-admin, false-not admin.\"\n    )\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.UserSysAdminFlag.sysadmin_flag", "title": "<code>sysadmin_flag = Field(default=None, description='true-admin, false-not admin.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.UserSearch", "title": "<code>UserSearch</code>", "text": "<p>               Bases: <code>BaseModel</code></p> Source code in <code>harborapi/models/models.py</code> <pre><code>class UserSearch(BaseModel):\n    user_id: Optional[int] = Field(default=None, description=\"The ID of the user.\")\n    username: Optional[str] = None\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.UserSearch.user_id", "title": "<code>user_id = Field(default=None, description='The ID of the user.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.UserSearch.username", "title": "<code>username = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.PasswordReq", "title": "<code>PasswordReq</code>", "text": "<p>               Bases: <code>BaseModel</code></p> Source code in <code>harborapi/models/models.py</code> <pre><code>class PasswordReq(BaseModel):\n    old_password: Optional[str] = Field(\n        default=None, description=\"The user's existing password.\"\n    )\n    new_password: Optional[str] = Field(\n        default=None, description=\"New password for marking as to be updated.\"\n    )\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.PasswordReq.old_password", "title": "<code>old_password = Field(default=None, description=\"The user's existing password.\")</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.PasswordReq.new_password", "title": "<code>new_password = Field(default=None, description='New password for marking as to be updated.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.UserSearchRespItem", "title": "<code>UserSearchRespItem</code>", "text": "<p>               Bases: <code>BaseModel</code></p> Source code in <code>harborapi/models/models.py</code> <pre><code>class UserSearchRespItem(BaseModel):\n    user_id: Optional[int] = Field(default=None, description=\"The ID of the user.\")\n    username: Optional[str] = None\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.UserSearchRespItem.user_id", "title": "<code>user_id = Field(default=None, description='The ID of the user.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.UserSearchRespItem.username", "title": "<code>username = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Permission", "title": "<code>Permission</code>", "text": "<p>               Bases: <code>BaseModel</code></p> Source code in <code>harborapi/models/models.py</code> <pre><code>class Permission(BaseModel):\n    resource: Optional[str] = Field(default=None, description=\"The permission resoruce\")\n    action: Optional[str] = Field(default=None, description=\"The permission action\")\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.Permission.resource", "title": "<code>resource = Field(default=None, description='The permission resoruce')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Permission.action", "title": "<code>action = Field(default=None, description='The permission action')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Permissions", "title": "<code>Permissions</code>", "text": "<p>               Bases: <code>BaseModel</code></p> Source code in <code>harborapi/models/models.py</code> <pre><code>class Permissions(BaseModel):\n    system: Optional[List[Permission]] = Field(\n        default=None, description=\"The system level permissions\"\n    )\n    project: Optional[List[Permission]] = Field(\n        default=None, description=\"The project level permissions\"\n    )\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.Permissions.system", "title": "<code>system = Field(default=None, description='The system level permissions')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Permissions.project", "title": "<code>project = Field(default=None, description='The project level permissions')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.OIDCCliSecretReq", "title": "<code>OIDCCliSecretReq</code>", "text": "<p>               Bases: <code>BaseModel</code></p> Source code in <code>harborapi/models/models.py</code> <pre><code>class OIDCCliSecretReq(BaseModel):\n    secret: Optional[str] = Field(default=None, description=\"The new secret\")\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.OIDCCliSecretReq.secret", "title": "<code>secret = Field(default=None, description='The new secret')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ComponentHealthStatus", "title": "<code>ComponentHealthStatus</code>", "text": "<p>               Bases: <code>BaseModel</code></p> <p>Health status of a component.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class ComponentHealthStatus(BaseModel):\n    \"\"\"Health status of a component.\"\"\"\n\n    name: Optional[str] = Field(default=None, description=\"The component name\")\n    status: Optional[str] = Field(\n        default=None,\n        description='The health status of component. Is either \"healthy\" or \"unhealthy\".',\n    )\n    error: Optional[str] = Field(\n        default=None,\n        description='(optional) The error message when the status is \"unhealthy\"',\n    )\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.ComponentHealthStatus.name", "title": "<code>name = Field(default=None, description='The component name')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ComponentHealthStatus.status", "title": "<code>status = Field(default=None, description='The health status of component. Is either \"healthy\" or \"unhealthy\".')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ComponentHealthStatus.error", "title": "<code>error = Field(default=None, description='(optional) The error message when the status is \"unhealthy\"')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Statistic", "title": "<code>Statistic</code>", "text": "<p>               Bases: <code>BaseModel</code></p> Source code in <code>harborapi/models/models.py</code> <pre><code>class Statistic(BaseModel):\n    private_project_count: Optional[int] = Field(\n        default=None, description=\"The count of the private projects\"\n    )\n    private_repo_count: Optional[int] = Field(\n        default=None, description=\"The count of the private repositories\"\n    )\n    public_project_count: Optional[int] = Field(\n        default=None, description=\"The count of the public projects\"\n    )\n    public_repo_count: Optional[int] = Field(\n        default=None, description=\"The count of the public repositories\"\n    )\n    total_project_count: Optional[int] = Field(\n        default=None,\n        description=\"The count of the total projects, only be seen by the system admin\",\n    )\n    total_repo_count: Optional[int] = Field(\n        default=None,\n        description=\"The count of the total repositories, only be seen by the system admin\",\n    )\n    total_storage_consumption: Optional[int] = Field(\n        default=None,\n        description=\"The total storage consumption of blobs, only be seen by the system admin\",\n    )\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.Statistic.private_project_count", "title": "<code>private_project_count = Field(default=None, description='The count of the private projects')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Statistic.private_repo_count", "title": "<code>private_repo_count = Field(default=None, description='The count of the private repositories')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Statistic.public_project_count", "title": "<code>public_project_count = Field(default=None, description='The count of the public projects')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Statistic.public_repo_count", "title": "<code>public_repo_count = Field(default=None, description='The count of the public repositories')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Statistic.total_project_count", "title": "<code>total_project_count = Field(default=None, description='The count of the total projects, only be seen by the system admin')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Statistic.total_repo_count", "title": "<code>total_repo_count = Field(default=None, description='The count of the total repositories, only be seen by the system admin')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Statistic.total_storage_consumption", "title": "<code>total_storage_consumption = Field(default=None, description='The total storage consumption of blobs, only be seen by the system admin')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Accessory", "title": "<code>Accessory</code>", "text": "<p>               Bases: <code>BaseModel</code></p> <p>Accessory of an artifact.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class Accessory(BaseModel):\n    \"\"\"Accessory of an artifact.\"\"\"\n\n    id: Optional[int] = Field(default=None, description=\"The ID of the accessory\")\n    artifact_id: Optional[int] = Field(\n        default=None, description=\"The artifact id of the accessory\"\n    )\n    subject_artifact_id: Optional[int] = Field(\n        default=None,\n        description=\"Going to be deprecated, use repo and digest for insteand. The subject artifact id of the accessory.\",\n    )\n    subject_artifact_digest: Optional[str] = Field(\n        default=None, description=\"The subject artifact digest of the accessory\"\n    )\n    subject_artifact_repo: Optional[str] = Field(\n        default=None,\n        description=\"The subject artifact repository name of the accessory\",\n    )\n    size: Optional[int] = Field(\n        default=None, description=\"The artifact size of the accessory\"\n    )\n    digest: Optional[str] = Field(\n        default=None, description=\"The artifact digest of the accessory\"\n    )\n    type: Optional[str] = Field(\n        default=None, description=\"The artifact size of the accessory\"\n    )\n    icon: Optional[str] = Field(default=None, description=\"The icon of the accessory\")\n    creation_time: Optional[datetime] = Field(\n        default=None, description=\"The creation time of the accessory\"\n    )\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.Accessory.id", "title": "<code>id = Field(default=None, description='The ID of the accessory')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Accessory.artifact_id", "title": "<code>artifact_id = Field(default=None, description='The artifact id of the accessory')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Accessory.subject_artifact_id", "title": "<code>subject_artifact_id = Field(default=None, description='Going to be deprecated, use repo and digest for insteand. The subject artifact id of the accessory.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Accessory.subject_artifact_digest", "title": "<code>subject_artifact_digest = Field(default=None, description='The subject artifact digest of the accessory')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Accessory.subject_artifact_repo", "title": "<code>subject_artifact_repo = Field(default=None, description='The subject artifact repository name of the accessory')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Accessory.size", "title": "<code>size = Field(default=None, description='The artifact size of the accessory')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Accessory.digest", "title": "<code>digest = Field(default=None, description='The artifact digest of the accessory')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Accessory.type", "title": "<code>type = Field(default=None, description='The artifact size of the accessory')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Accessory.icon", "title": "<code>icon = Field(default=None, description='The icon of the accessory')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Accessory.creation_time", "title": "<code>creation_time = Field(default=None, description='The creation time of the accessory')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ScanDataExportRequest", "title": "<code>ScanDataExportRequest</code>", "text": "<p>               Bases: <code>BaseModel</code></p> <p>Criteria for selecting scan data to export.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class ScanDataExportRequest(BaseModel):\n    \"\"\"Criteria for selecting scan data to export.\"\"\"\n\n    job_name: Optional[str] = Field(\n        default=None, description=\"Name of the scan data export job\"\n    )\n    projects: Optional[List[int]] = Field(\n        default=None,\n        description=\"A list of one or more projects for which to export the scan data, currently only one project is supported due to performance concerns, but define as array for extension in the future.\",\n    )\n    labels: Optional[List[int]] = Field(\n        default=None,\n        description=\"A list of one or more labels for which to export the scan data, defaults to all if empty\",\n    )\n    repositories: Optional[str] = Field(\n        default=None,\n        description=\"A list of repositories for which to export the scan data, defaults to all if empty\",\n    )\n    cve_ids: Optional[str] = Field(\n        default=None,\n        alias=\"cveIds\",\n        description=\"CVE-IDs for which to export data. Multiple CVE-IDs can be specified by separating using ',' and enclosed between '{}'. Defaults to all if empty\",\n    )\n    tags: Optional[str] = Field(\n        default=None,\n        description=\"A list of tags enclosed within '{}'. Defaults to all if empty\",\n    )\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.ScanDataExportRequest.job_name", "title": "<code>job_name = Field(default=None, description='Name of the scan data export job')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ScanDataExportRequest.projects", "title": "<code>projects = Field(default=None, description='A list of one or more projects for which to export the scan data, currently only one project is supported due to performance concerns, but define as array for extension in the future.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ScanDataExportRequest.labels", "title": "<code>labels = Field(default=None, description='A list of one or more labels for which to export the scan data, defaults to all if empty')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ScanDataExportRequest.repositories", "title": "<code>repositories = Field(default=None, description='A list of repositories for which to export the scan data, defaults to all if empty')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ScanDataExportRequest.cve_ids", "title": "<code>cve_ids = Field(default=None, alias='cveIds', description=\"CVE-IDs for which to export data. Multiple CVE-IDs can be specified by separating using ',' and enclosed between '{}'. Defaults to all if empty\")</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ScanDataExportRequest.tags", "title": "<code>tags = Field(default=None, description=\"A list of tags enclosed within '{}'. Defaults to all if empty\")</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ScanDataExportJob", "title": "<code>ScanDataExportJob</code>", "text": "<p>               Bases: <code>BaseModel</code></p> <p>Metadata for a scan data export job.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class ScanDataExportJob(BaseModel):\n    \"\"\"Metadata for a scan data export job.\"\"\"\n\n    id: Optional[int] = Field(\n        default=None, description=\"The id of the scan data export job\"\n    )\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.ScanDataExportJob.id", "title": "<code>id = Field(default=None, description='The id of the scan data export job')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ScanDataExportExecution", "title": "<code>ScanDataExportExecution</code>", "text": "<p>               Bases: <code>BaseModel</code></p> <p>Execution of a scan data export job.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class ScanDataExportExecution(BaseModel):\n    \"\"\"Execution of a scan data export job.\"\"\"\n\n    id: Optional[int] = Field(default=None, description=\"The ID of the execution\")\n    user_id: Optional[int] = Field(\n        default=None, description=\"The ID if the user triggering the export job\"\n    )\n    status: Optional[str] = Field(\n        default=None, description=\"The status of the execution\"\n    )\n    trigger: Optional[str] = Field(default=None, description=\"The trigger mode\")\n    start_time: Optional[datetime] = Field(default=None, description=\"The start time\")\n    end_time: Optional[datetime] = Field(default=None, description=\"The end time\")\n    status_text: Optional[str] = Field(default=None, description=\"The status text\")\n    user_name: Optional[str] = Field(\n        default=None, description=\"The name of the user triggering the job\"\n    )\n    file_present: Optional[bool] = Field(\n        default=None,\n        description=\"Indicates whether the export artifact is present in registry\",\n    )\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.ScanDataExportExecution.id", "title": "<code>id = Field(default=None, description='The ID of the execution')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ScanDataExportExecution.user_id", "title": "<code>user_id = Field(default=None, description='The ID if the user triggering the export job')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ScanDataExportExecution.status", "title": "<code>status = Field(default=None, description='The status of the execution')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ScanDataExportExecution.trigger", "title": "<code>trigger = Field(default=None, description='The trigger mode')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ScanDataExportExecution.start_time", "title": "<code>start_time = Field(default=None, description='The start time')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ScanDataExportExecution.end_time", "title": "<code>end_time = Field(default=None, description='The end time')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ScanDataExportExecution.status_text", "title": "<code>status_text = Field(default=None, description='The status text')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ScanDataExportExecution.user_name", "title": "<code>user_name = Field(default=None, description='The name of the user triggering the job')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ScanDataExportExecution.file_present", "title": "<code>file_present = Field(default=None, description='Indicates whether the export artifact is present in registry')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ScanDataExportExecutionList", "title": "<code>ScanDataExportExecutionList</code>", "text": "<p>               Bases: <code>BaseModel</code></p> <p>List of executed scan data export jobs.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class ScanDataExportExecutionList(BaseModel):\n    \"\"\"List of executed scan data export jobs.\"\"\"\n\n    items: Optional[List[ScanDataExportExecution]] = Field(\n        default=None, description=\"The list of scan data export executions\"\n    )\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.ScanDataExportExecutionList.items", "title": "<code>items = Field(default=None, description='The list of scan data export executions')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.WorkerPool", "title": "<code>WorkerPool</code>", "text": "<p>               Bases: <code>BaseModel</code></p> <p>Worker pool for job service.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class WorkerPool(BaseModel):\n    \"\"\"Worker pool for job service.\"\"\"\n\n    pid: Optional[int] = Field(default=None, description=\"the process id of jobservice\")\n    worker_pool_id: Optional[str] = Field(\n        default=None, description=\"the id of the worker pool\"\n    )\n    start_at: Optional[datetime] = Field(\n        default=None, description=\"The start time of the work pool\"\n    )\n    heartbeat_at: Optional[datetime] = Field(\n        default=None, description=\"The heartbeat time of the work pool\"\n    )\n    concurrency: Optional[int] = Field(\n        default=None, description=\"The concurrency of the work pool\"\n    )\n    host: Optional[str] = Field(default=None, description=\"The host of the work pool\")\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.WorkerPool.pid", "title": "<code>pid = Field(default=None, description='the process id of jobservice')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.WorkerPool.worker_pool_id", "title": "<code>worker_pool_id = Field(default=None, description='the id of the worker pool')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.WorkerPool.start_at", "title": "<code>start_at = Field(default=None, description='The start time of the work pool')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.WorkerPool.heartbeat_at", "title": "<code>heartbeat_at = Field(default=None, description='The heartbeat time of the work pool')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.WorkerPool.concurrency", "title": "<code>concurrency = Field(default=None, description='The concurrency of the work pool')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.WorkerPool.host", "title": "<code>host = Field(default=None, description='The host of the work pool')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Worker", "title": "<code>Worker</code>", "text": "<p>               Bases: <code>BaseModel</code></p> <p>Worker in a pool.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class Worker(BaseModel):\n    \"\"\"Worker in a pool.\"\"\"\n\n    id: Optional[str] = Field(default=None, description=\"the id of the worker\")\n    pool_id: Optional[str] = Field(\n        default=None, description=\"the id of the worker pool\"\n    )\n    job_name: Optional[str] = Field(\n        default=None, description=\"the name of the running job in the worker\"\n    )\n    job_id: Optional[str] = Field(\n        default=None, description=\"the id of the running job in the worker\"\n    )\n    start_at: Optional[datetime] = Field(\n        default=None, description=\"The start time of the worker\"\n    )\n    check_in: Optional[str] = Field(\n        default=None, description=\"the checkin of the running job in the worker\"\n    )\n    checkin_at: Optional[datetime] = Field(\n        default=None, description=\"The checkin time of the worker\"\n    )\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.Worker.id", "title": "<code>id = Field(default=None, description='the id of the worker')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Worker.pool_id", "title": "<code>pool_id = Field(default=None, description='the id of the worker pool')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Worker.job_name", "title": "<code>job_name = Field(default=None, description='the name of the running job in the worker')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Worker.job_id", "title": "<code>job_id = Field(default=None, description='the id of the running job in the worker')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Worker.start_at", "title": "<code>start_at = Field(default=None, description='The start time of the worker')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Worker.check_in", "title": "<code>check_in = Field(default=None, description='the checkin of the running job in the worker')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Worker.checkin_at", "title": "<code>checkin_at = Field(default=None, description='The checkin time of the worker')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Action", "title": "<code>Action</code>", "text": "<p>               Bases: <code>Enum</code></p> <p>Action to perform. Should be 'stop', 'pause', or 'resume'.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class Action(Enum):\n    \"\"\"Action to perform. Should be 'stop', 'pause', or 'resume'.\"\"\"\n\n    stop = \"stop\"\n    pause = \"pause\"\n    resume = \"resume\"\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.Action.stop", "title": "<code>stop = 'stop'</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Action.pause", "title": "<code>pause = 'pause'</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Action.resume", "title": "<code>resume = 'resume'</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ActionRequest", "title": "<code>ActionRequest</code>", "text": "<p>               Bases: <code>BaseModel</code></p> <p>Request to perform an action.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class ActionRequest(BaseModel):\n    \"\"\"Request to perform an action.\"\"\"\n\n    action: Optional[Action] = Field(\n        default=None,\n        description=\"The action of the request, should be stop, pause or resume\",\n    )\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.ActionRequest.action", "title": "<code>action = Field(default=None, description='The action of the request, should be stop, pause or resume')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.JobQueue", "title": "<code>JobQueue</code>", "text": "<p>               Bases: <code>BaseModel</code></p> <p>Information about a job queue.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class JobQueue(BaseModel):\n    \"\"\"Information about a job queue.\"\"\"\n\n    job_type: Optional[str] = Field(\n        default=None, description=\"The type of the job queue\"\n    )\n    count: Optional[int] = Field(\n        default=None, description=\"The count of jobs in the job queue\"\n    )\n    latency: Optional[int] = Field(\n        default=None, description=\"The latency the job queue (seconds)\"\n    )\n    paused: Optional[bool] = Field(\n        default=None, description=\"The paused status of the job queue\"\n    )\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.JobQueue.job_type", "title": "<code>job_type = Field(default=None, description='The type of the job queue')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.JobQueue.count", "title": "<code>count = Field(default=None, description='The count of jobs in the job queue')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.JobQueue.latency", "title": "<code>latency = Field(default=None, description='The latency the job queue (seconds)')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.JobQueue.paused", "title": "<code>paused = Field(default=None, description='The paused status of the job queue')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ScheduleTask", "title": "<code>ScheduleTask</code>", "text": "<p>               Bases: <code>BaseModel</code></p> <p>Information about a scheduled task.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class ScheduleTask(BaseModel):\n    \"\"\"Information about a scheduled task.\"\"\"\n\n    id: Optional[int] = Field(default=None, description=\"the id of the Schedule task\")\n    vendor_type: Optional[str] = Field(\n        default=None, description=\"the vendor type of the current schedule task\"\n    )\n    vendor_id: Optional[int] = Field(\n        default=None, description=\"the vendor id of the current task\"\n    )\n    cron: Optional[str] = Field(\n        default=None, description=\"the cron of the current schedule task\"\n    )\n    update_time: Optional[datetime] = Field(\n        default=None, description=\"the update time of the schedule task\"\n    )\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.ScheduleTask.id", "title": "<code>id = Field(default=None, description='the id of the Schedule task')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ScheduleTask.vendor_type", "title": "<code>vendor_type = Field(default=None, description='the vendor type of the current schedule task')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ScheduleTask.vendor_id", "title": "<code>vendor_id = Field(default=None, description='the vendor id of the current task')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ScheduleTask.cron", "title": "<code>cron = Field(default=None, description='the cron of the current schedule task')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ScheduleTask.update_time", "title": "<code>update_time = Field(default=None, description='the update time of the schedule task')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.SchedulerStatus", "title": "<code>SchedulerStatus</code>", "text": "<p>               Bases: <code>BaseModel</code></p> <p>Status of the scheduler.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class SchedulerStatus(BaseModel):\n    \"\"\"Status of the scheduler.\"\"\"\n\n    paused: Optional[bool] = Field(\n        default=None, description=\"if the scheduler is paused\"\n    )\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.SchedulerStatus.paused", "title": "<code>paused = Field(default=None, description='if the scheduler is paused')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.DangerousCVE", "title": "<code>DangerousCVE</code>", "text": "<p>               Bases: <code>BaseModel</code></p> <p>A CVE marked as dangerous.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class DangerousCVE(BaseModel):\n    \"\"\"A CVE marked as dangerous.\"\"\"\n\n    cve_id: Optional[str] = Field(default=None, description=\"the cve id\")\n    severity: Optional[str] = Field(default=None, description=\"the severity of the CVE\")\n    cvss_score_v3: Optional[float] = Field(\n        default=None, description=\"the cvss score v3\"\n    )\n    desc: Optional[str] = Field(default=None, description=\"the description of the CVE\")\n    package: Optional[str] = Field(default=None, description=\"the package of the CVE\")\n    version: Optional[str] = Field(\n        default=None, description=\"the version of the package\"\n    )\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.DangerousCVE.cve_id", "title": "<code>cve_id = Field(default=None, description='the cve id')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.DangerousCVE.severity", "title": "<code>severity = Field(default=None, description='the severity of the CVE')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.DangerousCVE.cvss_score_v3", "title": "<code>cvss_score_v3 = Field(default=None, description='the cvss score v3')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.DangerousCVE.desc", "title": "<code>desc = Field(default=None, description='the description of the CVE')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.DangerousCVE.package", "title": "<code>package = Field(default=None, description='the package of the CVE')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.DangerousCVE.version", "title": "<code>version = Field(default=None, description='the version of the package')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.DangerousArtifact", "title": "<code>DangerousArtifact</code>", "text": "<p>               Bases: <code>BaseModel</code></p> <p>An artifact marked as dangerous.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class DangerousArtifact(BaseModel):\n    \"\"\"An artifact marked as dangerous.\"\"\"\n\n    project_id: Optional[int] = Field(\n        default=None, description=\"the project id of the artifact\"\n    )\n    repository_name: Optional[str] = Field(\n        default=None, description=\"the repository name of the artifact\"\n    )\n    digest: Optional[str] = Field(\n        default=None, description=\"the digest of the artifact\"\n    )\n    critical_cnt: Optional[int] = Field(\n        default=None, description=\"the count of critical vulnerabilities\"\n    )\n    high_cnt: Optional[int] = Field(\n        default=None, description=\"the count of high vulnerabilities\"\n    )\n    medium_cnt: Optional[int] = Field(\n        default=None, description=\"the count of medium vulnerabilities\"\n    )\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.DangerousArtifact.project_id", "title": "<code>project_id = Field(default=None, description='the project id of the artifact')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.DangerousArtifact.repository_name", "title": "<code>repository_name = Field(default=None, description='the repository name of the artifact')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.DangerousArtifact.digest", "title": "<code>digest = Field(default=None, description='the digest of the artifact')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.DangerousArtifact.critical_cnt", "title": "<code>critical_cnt = Field(default=None, description='the count of critical vulnerabilities')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.DangerousArtifact.high_cnt", "title": "<code>high_cnt = Field(default=None, description='the count of high vulnerabilities')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.DangerousArtifact.medium_cnt", "title": "<code>medium_cnt = Field(default=None, description='the count of medium vulnerabilities')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.VulnerabilityItem", "title": "<code>VulnerabilityItem</code>", "text": "<p>               Bases: <code>BaseModel</code></p> <p>Vulnerability found by a scan.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class VulnerabilityItem(BaseModel):\n    \"\"\"Vulnerability found by a scan.\"\"\"\n\n    project_id: Optional[int] = Field(\n        default=None, description=\"the project ID of the artifact\"\n    )\n    repository_name: Optional[str] = Field(\n        default=None, description=\"the repository name of the artifact\"\n    )\n    digest: Optional[str] = Field(\n        default=None, description=\"the digest of the artifact\"\n    )\n    tags: Optional[List[str]] = Field(\n        default=None, description=\"the tags of the artifact\"\n    )\n    cve_id: Optional[str] = Field(\n        default=None, description=\"the CVE id of the vulnerability.\"\n    )\n    severity: Optional[str] = Field(\n        default=None, description=\"the severity of the vulnerability\"\n    )\n    cvss_v3_score: Optional[float] = Field(\n        default=None, description=\"the nvd cvss v3 score of the vulnerability\"\n    )\n    package: Optional[str] = Field(\n        default=None, description=\"the package of the vulnerability\"\n    )\n    version: Optional[str] = Field(\n        default=None, description=\"the version of the package\"\n    )\n    fixed_version: Optional[str] = Field(\n        default=None, description=\"the fixed version of the package\"\n    )\n    desc: Optional[str] = Field(\n        default=None, description=\"The description of the vulnerability\"\n    )\n    links: Optional[List[str]] = Field(\n        default=None, description=\"Links of the vulnerability\"\n    )\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.VulnerabilityItem.project_id", "title": "<code>project_id = Field(default=None, description='the project ID of the artifact')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.VulnerabilityItem.repository_name", "title": "<code>repository_name = Field(default=None, description='the repository name of the artifact')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.VulnerabilityItem.digest", "title": "<code>digest = Field(default=None, description='the digest of the artifact')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.VulnerabilityItem.tags", "title": "<code>tags = Field(default=None, description='the tags of the artifact')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.VulnerabilityItem.cve_id", "title": "<code>cve_id = Field(default=None, description='the CVE id of the vulnerability.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.VulnerabilityItem.severity", "title": "<code>severity = Field(default=None, description='the severity of the vulnerability')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.VulnerabilityItem.cvss_v3_score", "title": "<code>cvss_v3_score = Field(default=None, description='the nvd cvss v3 score of the vulnerability')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.VulnerabilityItem.package", "title": "<code>package = Field(default=None, description='the package of the vulnerability')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.VulnerabilityItem.version", "title": "<code>version = Field(default=None, description='the version of the package')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.VulnerabilityItem.fixed_version", "title": "<code>fixed_version = Field(default=None, description='the fixed version of the package')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.VulnerabilityItem.desc", "title": "<code>desc = Field(default=None, description='The description of the vulnerability')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.VulnerabilityItem.links", "title": "<code>links = Field(default=None, description='Links of the vulnerability')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ScanType1", "title": "<code>ScanType1</code>", "text": "<p>               Bases: <code>Enum</code></p> <p>The scan type for the scan request. Two options are currently supported, vulnerability and sbom</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class ScanType1(Enum):\n    \"\"\"\n    The scan type for the scan request. Two options are currently supported, vulnerability and sbom\n    \"\"\"\n\n    vulnerability = \"vulnerability\"\n    sbom = \"sbom\"\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.ScanType1.vulnerability", "title": "<code>vulnerability = 'vulnerability'</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ScanType1.sbom", "title": "<code>sbom = 'sbom'</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ScanType", "title": "<code>ScanType</code>", "text": "<p>               Bases: <code>BaseModel</code></p> Source code in <code>harborapi/models/models.py</code> <pre><code>class ScanType(BaseModel):\n    scan_type: Optional[ScanType1] = Field(\n        default=None,\n        description=\"The scan type for the scan request. Two options are currently supported, vulnerability and sbom\",\n    )\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.ScanType.scan_type", "title": "<code>scan_type = Field(default=None, description='The scan type for the scan request. Two options are currently supported, vulnerability and sbom')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Errors", "title": "<code>Errors</code>", "text": "<p>               Bases: <code>BaseModel</code></p> <p>Errors that occurred while handling a request.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class Errors(BaseModel):\n    \"\"\"Errors that occurred while handling a request.\"\"\"\n\n    errors: Optional[List[Error]] = None\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.Errors.errors", "title": "<code>errors = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.AdditionLinks", "title": "<code>AdditionLinks</code>", "text": "<p>               Bases: <code>RootModel[Optional[Dict[str, AdditionLink]]]</code></p> Source code in <code>harborapi/models/models.py</code> <pre><code>class AdditionLinks(RootModel[Optional[Dict[str, AdditionLink]]]):\n    root: Optional[Dict[str, AdditionLink]] = None\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.AdditionLinks.root", "title": "<code>root = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Reference", "title": "<code>Reference</code>", "text": "<p>               Bases: <code>BaseModel</code></p> Source code in <code>harborapi/models/models.py</code> <pre><code>class Reference(BaseModel):\n    parent_id: Optional[int] = Field(\n        default=None, description=\"The parent ID of the reference\"\n    )\n    child_id: Optional[int] = Field(\n        default=None, description=\"The child ID of the reference\"\n    )\n    child_digest: Optional[str] = Field(\n        default=None, description=\"The digest of the child artifact\"\n    )\n    platform: Optional[Platform] = None\n    annotations: Optional[Annotations] = None\n    urls: Optional[List[str]] = Field(default=None, description=\"The download URLs\")\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.Reference.parent_id", "title": "<code>parent_id = Field(default=None, description='The parent ID of the reference')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Reference.child_id", "title": "<code>child_id = Field(default=None, description='The child ID of the reference')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Reference.child_digest", "title": "<code>child_digest = Field(default=None, description='The digest of the child artifact')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Reference.platform", "title": "<code>platform = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Reference.annotations", "title": "<code>annotations = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Reference.urls", "title": "<code>urls = Field(default=None, description='The download URLs')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.NativeReportSummary", "title": "<code>NativeReportSummary</code>", "text": "<p>               Bases: <code>BaseModel</code></p> <p>Summary of a native scan report.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class NativeReportSummary(BaseModel):\n    \"\"\"Summary of a native scan report.\"\"\"\n\n    report_id: Optional[str] = Field(\n        default=None,\n        description=\"id of the native scan report\",\n        examples=[\"5f62c830-f996-11e9-957f-0242c0a89008\"],\n    )\n    scan_status: Optional[str] = Field(\n        default=None,\n        description=\"The status of the report generating process\",\n        examples=[\"Success\"],\n    )\n    severity: Optional[str] = Field(\n        default=None, description=\"The overall severity\", examples=[\"High\"]\n    )\n    duration: Optional[int] = Field(\n        default=None,\n        description=\"The seconds spent for generating the report\",\n        examples=[300],\n    )\n    summary: Optional[VulnerabilitySummary] = None\n    start_time: Optional[datetime] = Field(\n        default=None,\n        description=\"The start time of the scan process that generating report\",\n        examples=[\"2006-01-02T14:04:05Z\"],\n    )\n    end_time: Optional[datetime] = Field(\n        default=None,\n        description=\"The end time of the scan process that generating report\",\n        examples=[\"2006-01-02T15:04:05Z\"],\n    )\n    complete_percent: Optional[int] = Field(\n        default=None,\n        description=\"The complete percent of the scanning which value is between 0 and 100\",\n        examples=[100],\n    )\n    scanner: Optional[Scanner] = None\n\n    @property\n    def severity_enum(self) -&gt; Optional[Severity]:\n        \"\"\"The severity of the vulnerability\n\n        Returns\n        -------\n        Optional[Severity]\n            The severity of the vulnerability\n        \"\"\"\n        if self.severity:\n            return Severity(self.severity)\n        return None\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.NativeReportSummary.report_id", "title": "<code>report_id = Field(default=None, description='id of the native scan report', examples=['5f62c830-f996-11e9-957f-0242c0a89008'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.NativeReportSummary.scan_status", "title": "<code>scan_status = Field(default=None, description='The status of the report generating process', examples=['Success'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.NativeReportSummary.severity", "title": "<code>severity = Field(default=None, description='The overall severity', examples=['High'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.NativeReportSummary.duration", "title": "<code>duration = Field(default=None, description='The seconds spent for generating the report', examples=[300])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.NativeReportSummary.summary", "title": "<code>summary = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.NativeReportSummary.start_time", "title": "<code>start_time = Field(default=None, description='The start time of the scan process that generating report', examples=['2006-01-02T14:04:05Z'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.NativeReportSummary.end_time", "title": "<code>end_time = Field(default=None, description='The end time of the scan process that generating report', examples=['2006-01-02T15:04:05Z'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.NativeReportSummary.complete_percent", "title": "<code>complete_percent = Field(default=None, description='The complete percent of the scanning which value is between 0 and 100', examples=[100])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.NativeReportSummary.scanner", "title": "<code>scanner = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.NativeReportSummary.severity_enum", "title": "<code>severity_enum</code>  <code>property</code>", "text": "<p>The severity of the vulnerability</p> <p>Returns:</p> Type Description <code>Optional[Severity]</code> <p>The severity of the vulnerability</p>"}, {"location": "reference/models/models/#harborapi.models.models.ProjectSummaryQuota", "title": "<code>ProjectSummaryQuota</code>", "text": "<p>               Bases: <code>BaseModel</code></p> Source code in <code>harborapi/models/models.py</code> <pre><code>class ProjectSummaryQuota(BaseModel):\n    hard: Optional[ResourceList] = None\n    used: Optional[ResourceList] = None\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.ProjectSummaryQuota.hard", "title": "<code>hard = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ProjectSummaryQuota.used", "title": "<code>used = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.CVEAllowlist", "title": "<code>CVEAllowlist</code>", "text": "<p>               Bases: <code>BaseModel</code></p> <p>CVE allowlist for a system or project.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class CVEAllowlist(BaseModel):\n    \"\"\"CVE allowlist for a system or project.\"\"\"\n\n    id: Optional[int] = Field(default=None, description=\"ID of the allowlist\")\n    project_id: Optional[int] = Field(\n        default=None,\n        description=\"ID of the project which the allowlist belongs to.  For system level allowlist this attribute is zero.\",\n    )\n    expires_at: Optional[int] = Field(\n        default=None,\n        description=\"the time for expiration of the allowlist, in the form of seconds since epoch.  This is an optional attribute, if it's not set the CVE allowlist does not expire.\",\n    )\n    items: Optional[List[CVEAllowlistItem]] = None\n    creation_time: Optional[datetime] = Field(\n        default=None, description=\"The creation time of the allowlist.\"\n    )\n    update_time: Optional[datetime] = Field(\n        default=None, description=\"The update time of the allowlist.\"\n    )\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.CVEAllowlist.id", "title": "<code>id = Field(default=None, description='ID of the allowlist')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.CVEAllowlist.project_id", "title": "<code>project_id = Field(default=None, description='ID of the project which the allowlist belongs to.  For system level allowlist this attribute is zero.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.CVEAllowlist.expires_at", "title": "<code>expires_at = Field(default=None, description=\"the time for expiration of the allowlist, in the form of seconds since epoch.  This is an optional attribute, if it's not set the CVE allowlist does not expire.\")</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.CVEAllowlist.items", "title": "<code>items = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.CVEAllowlist.creation_time", "title": "<code>creation_time = Field(default=None, description='The creation time of the allowlist.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.CVEAllowlist.update_time", "title": "<code>update_time = Field(default=None, description='The update time of the allowlist.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ReplicationTrigger", "title": "<code>ReplicationTrigger</code>", "text": "<p>               Bases: <code>BaseModel</code></p> Source code in <code>harborapi/models/models.py</code> <pre><code>class ReplicationTrigger(BaseModel):\n    type: Optional[str] = Field(\n        default=None,\n        description=\"The replication policy trigger type. The valid values are manual, event_based and scheduled.\",\n    )\n    trigger_settings: Optional[ReplicationTriggerSettings] = None\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.ReplicationTrigger.type", "title": "<code>type = Field(default=None, description='The replication policy trigger type. The valid values are manual, event_based and scheduled.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ReplicationTrigger.trigger_settings", "title": "<code>trigger_settings = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RegistryInfo", "title": "<code>RegistryInfo</code>", "text": "<p>               Bases: <code>BaseModel</code></p> <p>Registry information, including base info and capabilities.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class RegistryInfo(BaseModel):\n    \"\"\"Registry information, including base info and capabilities.\"\"\"\n\n    type: Optional[str] = Field(default=None, description=\"The registry type\")\n    description: Optional[str] = Field(default=None, description=\"The description\")\n    supported_resource_filters: Optional[List[FilterStyle]] = Field(\n        default=None, description=\"The filters that the registry supports\"\n    )\n    supported_triggers: Optional[List[str]] = Field(\n        default=None, description=\"The triggers that the registry supports\"\n    )\n    supported_copy_by_chunk: Optional[bool] = Field(\n        default=None, description=\"The registry whether support copy by chunk.\"\n    )\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.RegistryInfo.type", "title": "<code>type = Field(default=None, description='The registry type')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RegistryInfo.description", "title": "<code>description = Field(default=None, description='The description')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RegistryInfo.supported_resource_filters", "title": "<code>supported_resource_filters = Field(default=None, description='The filters that the registry supports')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RegistryInfo.supported_triggers", "title": "<code>supported_triggers = Field(default=None, description='The triggers that the registry supports')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RegistryInfo.supported_copy_by_chunk", "title": "<code>supported_copy_by_chunk = Field(default=None, description='The registry whether support copy by chunk.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RegistryProviderEndpointPattern", "title": "<code>RegistryProviderEndpointPattern</code>", "text": "<p>               Bases: <code>BaseModel</code></p> <p>Pattern for a registry provider endpoint.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class RegistryProviderEndpointPattern(BaseModel):\n    \"\"\"Pattern for a registry provider endpoint.\"\"\"\n\n    endpoint_type: Optional[str] = Field(default=None, description=\"The endpoint type\")\n    endpoints: Optional[List[RegistryEndpoint]] = Field(\n        default=None, description=\"The endpoint list\"\n    )\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.RegistryProviderEndpointPattern.endpoint_type", "title": "<code>endpoint_type = Field(default=None, description='The endpoint type')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RegistryProviderEndpointPattern.endpoints", "title": "<code>endpoints = Field(default=None, description='The endpoint list')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RobotPermission", "title": "<code>RobotPermission</code>", "text": "<p>               Bases: <code>BaseModel</code></p> Source code in <code>harborapi/models/models.py</code> <pre><code>class RobotPermission(BaseModel):\n    kind: Optional[str] = Field(default=None, description=\"The kind of the permission\")\n    namespace: Optional[str] = Field(\n        default=None, description=\"The namespace of the permission\"\n    )\n    access: Optional[List[Access]] = None\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.RobotPermission.kind", "title": "<code>kind = Field(default=None, description='The kind of the permission')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RobotPermission.namespace", "title": "<code>namespace = Field(default=None, description='The namespace of the permission')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RobotPermission.access", "title": "<code>access = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.GeneralInfo", "title": "<code>GeneralInfo</code>", "text": "<p>               Bases: <code>BaseModel</code></p> Source code in <code>harborapi/models/models.py</code> <pre><code>class GeneralInfo(BaseModel):\n    banner_message: Optional[str] = Field(\n        default=None,\n        description=\"The banner message for the UI. It is the stringified result of the banner message object.\",\n        examples=[\n            '{\"closable\":true,\"message\":\"your banner message content\",\"type\":\"warning\",\"fromDate\":\"06/19/2023\",\"toDate\":\"06/21/2023\"}'\n        ],\n    )\n    current_time: Optional[datetime] = Field(\n        default=None, description=\"The current time of the server.\"\n    )\n    registry_url: Optional[str] = Field(\n        default=None,\n        description=\"The url of registry against which the docker command should be issued.\",\n    )\n    external_url: Optional[str] = Field(\n        default=None, description=\"The external URL of Harbor, with protocol.\"\n    )\n    auth_mode: Optional[str] = Field(\n        default=None, description=\"The auth mode of current Harbor instance.\"\n    )\n    primary_auth_mode: Optional[bool] = Field(\n        default=None,\n        description=\"The flag to indicate whether the current auth mode should consider as a primary one.\",\n    )\n    project_creation_restriction: Optional[str] = Field(\n        default=None,\n        description=\"Indicate who can create projects, it could be 'adminonly' or 'everyone'.\",\n    )\n    self_registration: Optional[bool] = Field(\n        default=None,\n        description=\"Indicate whether the Harbor instance enable user to register himself.\",\n    )\n    has_ca_root: Optional[bool] = Field(\n        default=None,\n        description=\"Indicate whether there is a ca root cert file ready for download in the file system.\",\n    )\n    harbor_version: Optional[str] = Field(\n        default=None, description=\"The build version of Harbor.\"\n    )\n    registry_storage_provider_name: Optional[str] = Field(\n        default=None, description=\"The storage provider's name of Harbor registry\"\n    )\n    read_only: Optional[bool] = Field(\n        default=None,\n        description=\"The flag to indicate whether Harbor is in readonly mode.\",\n    )\n    notification_enable: Optional[bool] = Field(\n        default=None,\n        description=\"The flag to indicate whether notification mechanism is enabled on Harbor instance.\",\n    )\n    authproxy_settings: Optional[AuthproxySetting] = None\n    oidc_provider_name: Optional[str] = Field(\n        default=None,\n        description=\"The OIDC provider name, empty if current auth is not OIDC_auth or OIDC provider is not configured.\",\n    )\n    with_chartmuseum: Optional[bool] = Field(\n        default=None,\n        description=\"DEPRECATED: Harbor instance is deployed with nested chartmuseum.\",\n    )\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.GeneralInfo.banner_message", "title": "<code>banner_message = Field(default=None, description='The banner message for the UI. It is the stringified result of the banner message object.', examples=['{\"closable\":true,\"message\":\"your banner message content\",\"type\":\"warning\",\"fromDate\":\"06/19/2023\",\"toDate\":\"06/21/2023\"}'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.GeneralInfo.current_time", "title": "<code>current_time = Field(default=None, description='The current time of the server.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.GeneralInfo.registry_url", "title": "<code>registry_url = Field(default=None, description='The url of registry against which the docker command should be issued.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.GeneralInfo.external_url", "title": "<code>external_url = Field(default=None, description='The external URL of Harbor, with protocol.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.GeneralInfo.auth_mode", "title": "<code>auth_mode = Field(default=None, description='The auth mode of current Harbor instance.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.GeneralInfo.primary_auth_mode", "title": "<code>primary_auth_mode = Field(default=None, description='The flag to indicate whether the current auth mode should consider as a primary one.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.GeneralInfo.project_creation_restriction", "title": "<code>project_creation_restriction = Field(default=None, description=\"Indicate who can create projects, it could be 'adminonly' or 'everyone'.\")</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.GeneralInfo.self_registration", "title": "<code>self_registration = Field(default=None, description='Indicate whether the Harbor instance enable user to register himself.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.GeneralInfo.has_ca_root", "title": "<code>has_ca_root = Field(default=None, description='Indicate whether there is a ca root cert file ready for download in the file system.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.GeneralInfo.harbor_version", "title": "<code>harbor_version = Field(default=None, description='The build version of Harbor.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.GeneralInfo.registry_storage_provider_name", "title": "<code>registry_storage_provider_name = Field(default=None, description=\"The storage provider's name of Harbor registry\")</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.GeneralInfo.read_only", "title": "<code>read_only = Field(default=None, description='The flag to indicate whether Harbor is in readonly mode.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.GeneralInfo.notification_enable", "title": "<code>notification_enable = Field(default=None, description='The flag to indicate whether notification mechanism is enabled on Harbor instance.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.GeneralInfo.authproxy_settings", "title": "<code>authproxy_settings = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.GeneralInfo.oidc_provider_name", "title": "<code>oidc_provider_name = Field(default=None, description='The OIDC provider name, empty if current auth is not OIDC_auth or OIDC provider is not configured.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.GeneralInfo.with_chartmuseum", "title": "<code>with_chartmuseum = Field(default=None, description='DEPRECATED: Harbor instance is deployed with nested chartmuseum.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.GCHistory", "title": "<code>GCHistory</code>", "text": "<p>               Bases: <code>BaseModel</code></p> Source code in <code>harborapi/models/models.py</code> <pre><code>class GCHistory(BaseModel):\n    id: Optional[int] = Field(default=None, description=\"the id of gc job.\")\n    job_name: Optional[str] = Field(default=None, description=\"the job name of gc job.\")\n    job_kind: Optional[str] = Field(default=None, description=\"the job kind of gc job.\")\n    job_parameters: Optional[str] = Field(\n        default=None, description=\"the job parameters of gc job.\"\n    )\n    schedule: Optional[ScheduleObj] = None\n    job_status: Optional[str] = Field(default=None, description=\"the status of gc job.\")\n    deleted: Optional[bool] = Field(default=None, description=\"if gc job was deleted.\")\n    creation_time: Optional[datetime] = Field(\n        default=None, description=\"the creation time of gc job.\"\n    )\n    update_time: Optional[datetime] = Field(\n        default=None, description=\"the update time of gc job.\"\n    )\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.GCHistory.id", "title": "<code>id = Field(default=None, description='the id of gc job.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.GCHistory.job_name", "title": "<code>job_name = Field(default=None, description='the job name of gc job.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.GCHistory.job_kind", "title": "<code>job_kind = Field(default=None, description='the job kind of gc job.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.GCHistory.job_parameters", "title": "<code>job_parameters = Field(default=None, description='the job parameters of gc job.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.GCHistory.schedule", "title": "<code>schedule = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.GCHistory.job_status", "title": "<code>job_status = Field(default=None, description='the status of gc job.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.GCHistory.deleted", "title": "<code>deleted = Field(default=None, description='if gc job was deleted.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.GCHistory.creation_time", "title": "<code>creation_time = Field(default=None, description='the creation time of gc job.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.GCHistory.update_time", "title": "<code>update_time = Field(default=None, description='the update time of gc job.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ExecHistory", "title": "<code>ExecHistory</code>", "text": "<p>               Bases: <code>BaseModel</code></p> Source code in <code>harborapi/models/models.py</code> <pre><code>class ExecHistory(BaseModel):\n    id: Optional[int] = Field(default=None, description=\"the id of purge job.\")\n    job_name: Optional[str] = Field(\n        default=None, description=\"the job name of purge job.\"\n    )\n    job_kind: Optional[str] = Field(\n        default=None, description=\"the job kind of purge job.\"\n    )\n    job_parameters: Optional[str] = Field(\n        default=None, description=\"the job parameters of purge job.\"\n    )\n    schedule: Optional[ScheduleObj] = None\n    job_status: Optional[str] = Field(\n        default=None, description=\"the status of purge job.\"\n    )\n    deleted: Optional[bool] = Field(\n        default=None, description=\"if purge job was deleted.\"\n    )\n    creation_time: Optional[datetime] = Field(\n        default=None, description=\"the creation time of purge job.\"\n    )\n    update_time: Optional[datetime] = Field(\n        default=None, description=\"the update time of purge job.\"\n    )\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.ExecHistory.id", "title": "<code>id = Field(default=None, description='the id of purge job.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ExecHistory.job_name", "title": "<code>job_name = Field(default=None, description='the job name of purge job.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ExecHistory.job_kind", "title": "<code>job_kind = Field(default=None, description='the job kind of purge job.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ExecHistory.job_parameters", "title": "<code>job_parameters = Field(default=None, description='the job parameters of purge job.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ExecHistory.schedule", "title": "<code>schedule = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ExecHistory.job_status", "title": "<code>job_status = Field(default=None, description='the status of purge job.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ExecHistory.deleted", "title": "<code>deleted = Field(default=None, description='if purge job was deleted.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ExecHistory.creation_time", "title": "<code>creation_time = Field(default=None, description='the creation time of purge job.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ExecHistory.update_time", "title": "<code>update_time = Field(default=None, description='the update time of purge job.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Schedule", "title": "<code>Schedule</code>", "text": "<p>               Bases: <code>BaseModel</code></p> Source code in <code>harborapi/models/models.py</code> <pre><code>class Schedule(BaseModel):\n    id: Optional[int] = Field(default=None, description=\"The id of the schedule.\")\n    status: Optional[str] = Field(\n        default=None, description=\"The status of the schedule.\"\n    )\n    creation_time: Optional[datetime] = Field(\n        default=None, description=\"the creation time of the schedule.\"\n    )\n    update_time: Optional[datetime] = Field(\n        default=None, description=\"the update time of the schedule.\"\n    )\n    schedule: Optional[ScheduleObj] = None\n    parameters: Optional[Dict[str, Any]] = Field(\n        default=None, description=\"The parameters of schedule job\"\n    )\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.Schedule.id", "title": "<code>id = Field(default=None, description='The id of the schedule.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Schedule.status", "title": "<code>status = Field(default=None, description='The status of the schedule.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Schedule.creation_time", "title": "<code>creation_time = Field(default=None, description='the creation time of the schedule.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Schedule.update_time", "title": "<code>update_time = Field(default=None, description='the update time of the schedule.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Schedule.schedule", "title": "<code>schedule = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Schedule.parameters", "title": "<code>parameters = Field(default=None, description='The parameters of schedule job')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RetentionRuleMetadata", "title": "<code>RetentionRuleMetadata</code>", "text": "<p>               Bases: <code>BaseModel</code></p> <p>Metadata for a tag retention rule.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class RetentionRuleMetadata(BaseModel):\n    \"\"\"Metadata for a tag retention rule.\"\"\"\n\n    rule_template: Optional[str] = Field(default=None, description=\"rule id\")\n    display_text: Optional[str] = Field(default=None, description=\"rule display text\")\n    action: Optional[str] = Field(default=None, description=\"rule action\")\n    params: Optional[List[RetentionRuleParamMetadata]] = Field(\n        default=None, description=\"rule params\"\n    )\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.RetentionRuleMetadata.rule_template", "title": "<code>rule_template = Field(default=None, description='rule id')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RetentionRuleMetadata.display_text", "title": "<code>display_text = Field(default=None, description='rule display text')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RetentionRuleMetadata.action", "title": "<code>action = Field(default=None, description='rule action')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RetentionRuleMetadata.params", "title": "<code>params = Field(default=None, description='rule params')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RetentionRule", "title": "<code>RetentionRule</code>", "text": "<p>               Bases: <code>BaseModel</code></p> Source code in <code>harborapi/models/models.py</code> <pre><code>class RetentionRule(BaseModel):\n    id: Optional[int] = None\n    priority: Optional[int] = None\n    disabled: Optional[bool] = None\n    action: Optional[str] = None\n    template: Optional[str] = None\n    params: Optional[Dict[str, Any]] = None\n    tag_selectors: Optional[List[RetentionSelector]] = None\n    scope_selectors: Optional[Dict[str, List[RetentionSelector]]] = None\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.RetentionRule.id", "title": "<code>id = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RetentionRule.priority", "title": "<code>priority = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RetentionRule.disabled", "title": "<code>disabled = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RetentionRule.action", "title": "<code>action = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RetentionRule.template", "title": "<code>template = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RetentionRule.params", "title": "<code>params = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RetentionRule.tag_selectors", "title": "<code>tag_selectors = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RetentionRule.scope_selectors", "title": "<code>scope_selectors = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ImmutableRule", "title": "<code>ImmutableRule</code>", "text": "<p>               Bases: <code>BaseModel</code></p> Source code in <code>harborapi/models/models.py</code> <pre><code>class ImmutableRule(BaseModel):\n    id: Optional[int] = None\n    priority: Optional[int] = None\n    disabled: Optional[bool] = None\n    action: Optional[str] = None\n    template: Optional[str] = None\n    params: Optional[Dict[str, Any]] = None\n    tag_selectors: Optional[List[ImmutableSelector]] = None\n    scope_selectors: Optional[Dict[str, List[ImmutableSelector]]] = None\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.ImmutableRule.id", "title": "<code>id = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ImmutableRule.priority", "title": "<code>priority = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ImmutableRule.disabled", "title": "<code>disabled = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ImmutableRule.action", "title": "<code>action = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ImmutableRule.template", "title": "<code>template = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ImmutableRule.params", "title": "<code>params = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ImmutableRule.tag_selectors", "title": "<code>tag_selectors = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ImmutableRule.scope_selectors", "title": "<code>scope_selectors = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.SupportedWebhookEventTypes", "title": "<code>SupportedWebhookEventTypes</code>", "text": "<p>               Bases: <code>BaseModel</code></p> <p>Supported event and notification types for webhooks.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class SupportedWebhookEventTypes(BaseModel):\n    \"\"\"Supported event and notification types for webhooks.\"\"\"\n\n    event_type: Optional[List[EventType]] = None\n    notify_type: Optional[List[NotifyType]] = None\n    payload_formats: Optional[List[PayloadFormat]] = None\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.SupportedWebhookEventTypes.event_type", "title": "<code>event_type = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.SupportedWebhookEventTypes.notify_type", "title": "<code>notify_type = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.SupportedWebhookEventTypes.payload_formats", "title": "<code>payload_formats = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.InternalConfigurationsResponse", "title": "<code>InternalConfigurationsResponse</code>", "text": "<p>               Bases: <code>RootModel[Optional[Dict[str, InternalConfigurationValue]]]</code></p> Source code in <code>harborapi/models/models.py</code> <pre><code>class InternalConfigurationsResponse(\n    RootModel[Optional[Dict[str, InternalConfigurationValue]]]\n):\n    root: Optional[Dict[str, InternalConfigurationValue]] = None\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.InternalConfigurationsResponse.root", "title": "<code>root = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ConfigurationsResponse", "title": "<code>ConfigurationsResponse</code>", "text": "<p>               Bases: <code>BaseModel</code></p> Source code in <code>harborapi/models/models.py</code> <pre><code>class ConfigurationsResponse(BaseModel):\n    auth_mode: Optional[StringConfigItem] = None\n    primary_auth_mode: Optional[BoolConfigItem] = None\n    ldap_base_dn: Optional[StringConfigItem] = None\n    ldap_filter: Optional[StringConfigItem] = None\n    ldap_group_base_dn: Optional[StringConfigItem] = None\n    ldap_group_admin_dn: Optional[StringConfigItem] = None\n    ldap_group_attribute_name: Optional[StringConfigItem] = None\n    ldap_group_search_filter: Optional[StringConfigItem] = None\n    ldap_group_search_scope: Optional[IntegerConfigItem] = None\n    ldap_group_attach_parallel: Optional[BoolConfigItem] = None\n    ldap_scope: Optional[IntegerConfigItem] = None\n    ldap_search_dn: Optional[StringConfigItem] = None\n    ldap_timeout: Optional[IntegerConfigItem] = None\n    ldap_uid: Optional[StringConfigItem] = None\n    ldap_url: Optional[StringConfigItem] = None\n    ldap_verify_cert: Optional[BoolConfigItem] = None\n    ldap_group_membership_attribute: Optional[StringConfigItem] = None\n    project_creation_restriction: Optional[StringConfigItem] = None\n    read_only: Optional[BoolConfigItem] = None\n    self_registration: Optional[BoolConfigItem] = None\n    token_expiration: Optional[IntegerConfigItem] = None\n    uaa_client_id: Optional[StringConfigItem] = None\n    uaa_client_secret: Optional[StringConfigItem] = None\n    uaa_endpoint: Optional[StringConfigItem] = None\n    uaa_verify_cert: Optional[BoolConfigItem] = None\n    http_authproxy_endpoint: Optional[StringConfigItem] = None\n    http_authproxy_tokenreview_endpoint: Optional[StringConfigItem] = None\n    http_authproxy_admin_groups: Optional[StringConfigItem] = None\n    http_authproxy_admin_usernames: Optional[StringConfigItem] = None\n    http_authproxy_verify_cert: Optional[BoolConfigItem] = None\n    http_authproxy_skip_search: Optional[BoolConfigItem] = None\n    http_authproxy_server_certificate: Optional[StringConfigItem] = None\n    oidc_name: Optional[StringConfigItem] = None\n    oidc_endpoint: Optional[StringConfigItem] = None\n    oidc_client_id: Optional[StringConfigItem] = None\n    oidc_groups_claim: Optional[StringConfigItem] = None\n    oidc_admin_group: Optional[StringConfigItem] = None\n    oidc_group_filter: Optional[StringConfigItem] = None\n    oidc_scope: Optional[StringConfigItem] = None\n    oidc_user_claim: Optional[StringConfigItem] = None\n    oidc_verify_cert: Optional[BoolConfigItem] = None\n    oidc_auto_onboard: Optional[BoolConfigItem] = None\n    oidc_extra_redirect_parms: Optional[StringConfigItem] = None\n    robot_token_duration: Optional[IntegerConfigItem] = None\n    robot_name_prefix: Optional[StringConfigItem] = None\n    notification_enable: Optional[BoolConfigItem] = None\n    quota_per_project_enable: Optional[BoolConfigItem] = None\n    storage_per_project: Optional[IntegerConfigItem] = None\n    audit_log_forward_endpoint: Optional[StringConfigItem] = None\n    skip_audit_log_database: Optional[BoolConfigItem] = None\n    scanner_skip_update_pulltime: Optional[BoolConfigItem] = None\n    scan_all_policy: Optional[ScanAllPolicy] = None\n    session_timeout: Optional[IntegerConfigItem] = None\n    banner_message: Optional[StringConfigItem] = None\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.ConfigurationsResponse.auth_mode", "title": "<code>auth_mode = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ConfigurationsResponse.primary_auth_mode", "title": "<code>primary_auth_mode = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ConfigurationsResponse.ldap_base_dn", "title": "<code>ldap_base_dn = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ConfigurationsResponse.ldap_filter", "title": "<code>ldap_filter = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ConfigurationsResponse.ldap_group_base_dn", "title": "<code>ldap_group_base_dn = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ConfigurationsResponse.ldap_group_admin_dn", "title": "<code>ldap_group_admin_dn = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ConfigurationsResponse.ldap_group_attribute_name", "title": "<code>ldap_group_attribute_name = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ConfigurationsResponse.ldap_group_search_filter", "title": "<code>ldap_group_search_filter = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ConfigurationsResponse.ldap_group_search_scope", "title": "<code>ldap_group_search_scope = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ConfigurationsResponse.ldap_group_attach_parallel", "title": "<code>ldap_group_attach_parallel = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ConfigurationsResponse.ldap_scope", "title": "<code>ldap_scope = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ConfigurationsResponse.ldap_search_dn", "title": "<code>ldap_search_dn = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ConfigurationsResponse.ldap_timeout", "title": "<code>ldap_timeout = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ConfigurationsResponse.ldap_uid", "title": "<code>ldap_uid = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ConfigurationsResponse.ldap_url", "title": "<code>ldap_url = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ConfigurationsResponse.ldap_verify_cert", "title": "<code>ldap_verify_cert = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ConfigurationsResponse.ldap_group_membership_attribute", "title": "<code>ldap_group_membership_attribute = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ConfigurationsResponse.project_creation_restriction", "title": "<code>project_creation_restriction = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ConfigurationsResponse.read_only", "title": "<code>read_only = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ConfigurationsResponse.self_registration", "title": "<code>self_registration = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ConfigurationsResponse.token_expiration", "title": "<code>token_expiration = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ConfigurationsResponse.uaa_client_id", "title": "<code>uaa_client_id = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ConfigurationsResponse.uaa_client_secret", "title": "<code>uaa_client_secret = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ConfigurationsResponse.uaa_endpoint", "title": "<code>uaa_endpoint = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ConfigurationsResponse.uaa_verify_cert", "title": "<code>uaa_verify_cert = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ConfigurationsResponse.http_authproxy_endpoint", "title": "<code>http_authproxy_endpoint = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ConfigurationsResponse.http_authproxy_tokenreview_endpoint", "title": "<code>http_authproxy_tokenreview_endpoint = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ConfigurationsResponse.http_authproxy_admin_groups", "title": "<code>http_authproxy_admin_groups = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ConfigurationsResponse.http_authproxy_admin_usernames", "title": "<code>http_authproxy_admin_usernames = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ConfigurationsResponse.http_authproxy_verify_cert", "title": "<code>http_authproxy_verify_cert = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ConfigurationsResponse.http_authproxy_skip_search", "title": "<code>http_authproxy_skip_search = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ConfigurationsResponse.http_authproxy_server_certificate", "title": "<code>http_authproxy_server_certificate = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ConfigurationsResponse.oidc_name", "title": "<code>oidc_name = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ConfigurationsResponse.oidc_endpoint", "title": "<code>oidc_endpoint = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ConfigurationsResponse.oidc_client_id", "title": "<code>oidc_client_id = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ConfigurationsResponse.oidc_groups_claim", "title": "<code>oidc_groups_claim = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ConfigurationsResponse.oidc_admin_group", "title": "<code>oidc_admin_group = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ConfigurationsResponse.oidc_group_filter", "title": "<code>oidc_group_filter = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ConfigurationsResponse.oidc_scope", "title": "<code>oidc_scope = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ConfigurationsResponse.oidc_user_claim", "title": "<code>oidc_user_claim = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ConfigurationsResponse.oidc_verify_cert", "title": "<code>oidc_verify_cert = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ConfigurationsResponse.oidc_auto_onboard", "title": "<code>oidc_auto_onboard = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ConfigurationsResponse.oidc_extra_redirect_parms", "title": "<code>oidc_extra_redirect_parms = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ConfigurationsResponse.robot_token_duration", "title": "<code>robot_token_duration = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ConfigurationsResponse.robot_name_prefix", "title": "<code>robot_name_prefix = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ConfigurationsResponse.notification_enable", "title": "<code>notification_enable = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ConfigurationsResponse.quota_per_project_enable", "title": "<code>quota_per_project_enable = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ConfigurationsResponse.storage_per_project", "title": "<code>storage_per_project = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ConfigurationsResponse.audit_log_forward_endpoint", "title": "<code>audit_log_forward_endpoint = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ConfigurationsResponse.skip_audit_log_database", "title": "<code>skip_audit_log_database = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ConfigurationsResponse.scanner_skip_update_pulltime", "title": "<code>scanner_skip_update_pulltime = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ConfigurationsResponse.scan_all_policy", "title": "<code>scan_all_policy = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ConfigurationsResponse.session_timeout", "title": "<code>session_timeout = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ConfigurationsResponse.banner_message", "title": "<code>banner_message = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ProjectMember", "title": "<code>ProjectMember</code>", "text": "<p>               Bases: <code>BaseModel</code></p> Source code in <code>harborapi/models/models.py</code> <pre><code>class ProjectMember(BaseModel):\n    role_id: Optional[int] = Field(\n        default=None,\n        description=\"The role id 1 for projectAdmin, 2 for developer, 3 for guest, 4 for maintainer\",\n    )\n    member_user: Optional[UserEntity] = None\n    member_group: Optional[UserGroup] = None\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.ProjectMember.role_id", "title": "<code>role_id = Field(default=None, description='The role id 1 for projectAdmin, 2 for developer, 3 for guest, 4 for maintainer')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ProjectMember.member_user", "title": "<code>member_user = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ProjectMember.member_group", "title": "<code>member_group = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.OverallHealthStatus", "title": "<code>OverallHealthStatus</code>", "text": "<p>               Bases: <code>BaseModel</code></p> <p>Overall health status of the system.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class OverallHealthStatus(BaseModel):\n    \"\"\"Overall health status of the system.\"\"\"\n\n    status: Optional[str] = Field(\n        default=None,\n        description='The overall health status. It is \"healthy\" only when all the components\\' status are \"healthy\"',\n    )\n    components: Optional[List[ComponentHealthStatus]] = None\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.OverallHealthStatus.status", "title": "<code>status = Field(default=None, description='The overall health status. It is \"healthy\" only when all the components\\' status are \"healthy\"')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.OverallHealthStatus.components", "title": "<code>components = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.SecuritySummary", "title": "<code>SecuritySummary</code>", "text": "<p>               Bases: <code>BaseModel</code></p> <p>Artifact security summary.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class SecuritySummary(BaseModel):\n    \"\"\"Artifact security summary.\"\"\"\n\n    critical_cnt: Optional[int] = Field(\n        default=None, description=\"the count of critical vulnerabilities\"\n    )\n    high_cnt: Optional[int] = Field(\n        default=None, description=\"the count of high vulnerabilities\"\n    )\n    medium_cnt: Optional[int] = Field(\n        default=None, description=\"the count of medium vulnerabilities\"\n    )\n    low_cnt: Optional[int] = Field(\n        default=None, description=\"the count of low vulnerabilities\"\n    )\n    none_cnt: Optional[int] = Field(\n        default=None, description=\"the count of none vulnerabilities\"\n    )\n    unknown_cnt: Optional[int] = Field(\n        default=None, description=\"the count of unknown vulnerabilities\"\n    )\n    total_vuls: Optional[int] = Field(\n        default=None, description=\"the count of total vulnerabilities\"\n    )\n    scanned_cnt: Optional[int] = Field(\n        default=None, description=\"the count of scanned artifacts\"\n    )\n    total_artifact: Optional[int] = Field(\n        default=None, description=\"the total count of artifacts\"\n    )\n    fixable_cnt: Optional[int] = Field(\n        default=None, description=\"the count of fixable vulnerabilities\"\n    )\n    dangerous_cves: Optional[List[DangerousCVE]] = Field(\n        default=None, description=\"the list of dangerous CVEs\"\n    )\n    dangerous_artifacts: Optional[List[DangerousArtifact]] = Field(\n        default=None, description=\"the list of dangerous artifacts\"\n    )\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.SecuritySummary.critical_cnt", "title": "<code>critical_cnt = Field(default=None, description='the count of critical vulnerabilities')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.SecuritySummary.high_cnt", "title": "<code>high_cnt = Field(default=None, description='the count of high vulnerabilities')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.SecuritySummary.medium_cnt", "title": "<code>medium_cnt = Field(default=None, description='the count of medium vulnerabilities')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.SecuritySummary.low_cnt", "title": "<code>low_cnt = Field(default=None, description='the count of low vulnerabilities')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.SecuritySummary.none_cnt", "title": "<code>none_cnt = Field(default=None, description='the count of none vulnerabilities')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.SecuritySummary.unknown_cnt", "title": "<code>unknown_cnt = Field(default=None, description='the count of unknown vulnerabilities')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.SecuritySummary.total_vuls", "title": "<code>total_vuls = Field(default=None, description='the count of total vulnerabilities')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.SecuritySummary.scanned_cnt", "title": "<code>scanned_cnt = Field(default=None, description='the count of scanned artifacts')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.SecuritySummary.total_artifact", "title": "<code>total_artifact = Field(default=None, description='the total count of artifacts')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.SecuritySummary.fixable_cnt", "title": "<code>fixable_cnt = Field(default=None, description='the count of fixable vulnerabilities')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.SecuritySummary.dangerous_cves", "title": "<code>dangerous_cves = Field(default=None, description='the list of dangerous CVEs')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.SecuritySummary.dangerous_artifacts", "title": "<code>dangerous_artifacts = Field(default=None, description='the list of dangerous artifacts')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ScanOverview", "title": "<code>ScanOverview</code>", "text": "<p>               Bases: <code>RootModel[Optional[Dict[str, NativeReportSummary]]]</code></p> <p>Overview of scan results.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class ScanOverview(RootModel[Optional[Dict[str, NativeReportSummary]]]):\n    \"\"\"Overview of scan results.\"\"\"\n\n    root: Optional[Dict[str, NativeReportSummary]] = None\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.ScanOverview.root", "title": "<code>root = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ProjectReq", "title": "<code>ProjectReq</code>", "text": "<p>               Bases: <code>BaseModel</code></p> Source code in <code>harborapi/models/models.py</code> <pre><code>class ProjectReq(BaseModel):\n    project_name: Optional[str] = Field(\n        default=None, description=\"The name of the project.\", max_length=255\n    )\n    public: Optional[bool] = Field(\n        default=None,\n        description=\"deprecated, reserved for project creation in replication\",\n    )\n    metadata: Optional[ProjectMetadata] = None\n    cve_allowlist: Optional[CVEAllowlist] = None\n    storage_limit: Optional[int] = Field(\n        default=None, description=\"The storage quota of the project.\"\n    )\n    registry_id: Optional[int] = Field(\n        default=None,\n        description=\"The ID of referenced registry when creating the proxy cache project\",\n    )\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.ProjectReq.project_name", "title": "<code>project_name = Field(default=None, description='The name of the project.', max_length=255)</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ProjectReq.public", "title": "<code>public = Field(default=None, description='deprecated, reserved for project creation in replication')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ProjectReq.metadata", "title": "<code>metadata = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ProjectReq.cve_allowlist", "title": "<code>cve_allowlist = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ProjectReq.storage_limit", "title": "<code>storage_limit = Field(default=None, description='The storage quota of the project.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ProjectReq.registry_id", "title": "<code>registry_id = Field(default=None, description='The ID of referenced registry when creating the proxy cache project')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Project", "title": "<code>Project</code>", "text": "<p>               Bases: <code>BaseModel</code></p> Source code in <code>harborapi/models/models.py</code> <pre><code>class Project(BaseModel):\n    project_id: Optional[int] = Field(default=None, description=\"Project ID\")\n    owner_id: Optional[int] = Field(\n        default=None,\n        description=\"The owner ID of the project always means the creator of the project.\",\n    )\n    name: Optional[str] = Field(default=None, description=\"The name of the project.\")\n    registry_id: Optional[int] = Field(\n        default=None,\n        description=\"The ID of referenced registry when the project is a proxy cache project.\",\n    )\n    creation_time: Optional[datetime] = Field(\n        default=None, description=\"The creation time of the project.\"\n    )\n    update_time: Optional[datetime] = Field(\n        default=None, description=\"The update time of the project.\"\n    )\n    deleted: Optional[bool] = Field(\n        default=None, description=\"A deletion mark of the project.\"\n    )\n    owner_name: Optional[str] = Field(\n        default=None, description=\"The owner name of the project.\"\n    )\n    togglable: Optional[bool] = Field(\n        default=None,\n        description=\"Correspond to the UI about whether the project's publicity is  updatable (for UI)\",\n    )\n    current_user_role_id: Optional[int] = Field(\n        default=None,\n        description=\"The role ID with highest permission of the current user who triggered the API (for UI).  This attribute is deprecated and will be removed in future versions.\",\n    )\n    current_user_role_ids: Optional[List[int]] = Field(\n        default=None,\n        description=\"The list of role ID of the current user who triggered the API (for UI)\",\n    )\n    repo_count: Optional[int] = Field(\n        default=None, description=\"The number of the repositories under this project.\"\n    )\n    metadata: Optional[ProjectMetadata] = None\n    cve_allowlist: Optional[CVEAllowlist] = None\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.Project.project_id", "title": "<code>project_id = Field(default=None, description='Project ID')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Project.owner_id", "title": "<code>owner_id = Field(default=None, description='The owner ID of the project always means the creator of the project.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Project.name", "title": "<code>name = Field(default=None, description='The name of the project.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Project.registry_id", "title": "<code>registry_id = Field(default=None, description='The ID of referenced registry when the project is a proxy cache project.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Project.creation_time", "title": "<code>creation_time = Field(default=None, description='The creation time of the project.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Project.update_time", "title": "<code>update_time = Field(default=None, description='The update time of the project.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Project.deleted", "title": "<code>deleted = Field(default=None, description='A deletion mark of the project.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Project.owner_name", "title": "<code>owner_name = Field(default=None, description='The owner name of the project.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Project.togglable", "title": "<code>togglable = Field(default=None, description=\"Correspond to the UI about whether the project's publicity is  updatable (for UI)\")</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Project.current_user_role_id", "title": "<code>current_user_role_id = Field(default=None, description='The role ID with highest permission of the current user who triggered the API (for UI).  This attribute is deprecated and will be removed in future versions.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Project.current_user_role_ids", "title": "<code>current_user_role_ids = Field(default=None, description='The list of role ID of the current user who triggered the API (for UI)')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Project.repo_count", "title": "<code>repo_count = Field(default=None, description='The number of the repositories under this project.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Project.metadata", "title": "<code>metadata = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Project.cve_allowlist", "title": "<code>cve_allowlist = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ProjectSummary", "title": "<code>ProjectSummary</code>", "text": "<p>               Bases: <code>BaseModel</code></p> Source code in <code>harborapi/models/models.py</code> <pre><code>class ProjectSummary(BaseModel):\n    repo_count: Optional[int] = Field(\n        default=None, description=\"The number of the repositories under this project.\"\n    )\n    project_admin_count: Optional[int] = Field(\n        default=None, description=\"The total number of project admin members.\"\n    )\n    maintainer_count: Optional[int] = Field(\n        default=None, description=\"The total number of maintainer members.\"\n    )\n    developer_count: Optional[int] = Field(\n        default=None, description=\"The total number of developer members.\"\n    )\n    guest_count: Optional[int] = Field(\n        default=None, description=\"The total number of guest members.\"\n    )\n    limited_guest_count: Optional[int] = Field(\n        default=None, description=\"The total number of limited guest members.\"\n    )\n    quota: Optional[ProjectSummaryQuota] = None\n    registry: Optional[Registry] = None\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.ProjectSummary.repo_count", "title": "<code>repo_count = Field(default=None, description='The number of the repositories under this project.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ProjectSummary.project_admin_count", "title": "<code>project_admin_count = Field(default=None, description='The total number of project admin members.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ProjectSummary.maintainer_count", "title": "<code>maintainer_count = Field(default=None, description='The total number of maintainer members.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ProjectSummary.developer_count", "title": "<code>developer_count = Field(default=None, description='The total number of developer members.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ProjectSummary.guest_count", "title": "<code>guest_count = Field(default=None, description='The total number of guest members.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ProjectSummary.limited_guest_count", "title": "<code>limited_guest_count = Field(default=None, description='The total number of limited guest members.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ProjectSummary.quota", "title": "<code>quota = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ProjectSummary.registry", "title": "<code>registry = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ReplicationPolicy", "title": "<code>ReplicationPolicy</code>", "text": "<p>               Bases: <code>BaseModel</code></p> Source code in <code>harborapi/models/models.py</code> <pre><code>class ReplicationPolicy(BaseModel):\n    id: Optional[int] = Field(default=None, description=\"The policy ID.\")\n    name: Optional[str] = Field(default=None, description=\"The policy name.\")\n    description: Optional[str] = Field(\n        default=None, description=\"The description of the policy.\"\n    )\n    src_registry: Optional[Registry] = None\n    dest_registry: Optional[Registry] = None\n    dest_namespace: Optional[str] = Field(\n        default=None, description=\"The destination namespace.\"\n    )\n    dest_namespace_replace_count: Optional[int] = Field(\n        default=None,\n        description=\"Specify how many path components will be replaced by the provided destination namespace.\\nThe default value is -1 in which case the legacy mode will be applied.\",\n    )\n    trigger: Optional[ReplicationTrigger] = None\n    filters: Optional[List[ReplicationFilter]] = Field(\n        default=None, description=\"The replication policy filter array.\"\n    )\n    replicate_deletion: Optional[bool] = Field(\n        default=None, description=\"Whether to replicate the deletion operation.\"\n    )\n    deletion: Optional[bool] = Field(\n        default=None,\n        description='Deprecated, use \"replicate_deletion\" instead. Whether to replicate the deletion operation.',\n    )\n    override: Optional[bool] = Field(\n        default=None,\n        description=\"Whether to override the resources on the destination registry.\",\n    )\n    enabled: Optional[bool] = Field(\n        default=None, description=\"Whether the policy is enabled or not.\"\n    )\n    creation_time: Optional[datetime] = Field(\n        default=None, description=\"The create time of the policy.\"\n    )\n    update_time: Optional[datetime] = Field(\n        default=None, description=\"The update time of the policy.\"\n    )\n    speed: Optional[int] = Field(default=None, description=\"speed limit for each task\")\n    copy_by_chunk: Optional[bool] = Field(\n        default=None, description=\"Whether to enable copy by chunk.\"\n    )\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.ReplicationPolicy.id", "title": "<code>id = Field(default=None, description='The policy ID.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ReplicationPolicy.name", "title": "<code>name = Field(default=None, description='The policy name.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ReplicationPolicy.description", "title": "<code>description = Field(default=None, description='The description of the policy.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ReplicationPolicy.src_registry", "title": "<code>src_registry = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ReplicationPolicy.dest_registry", "title": "<code>dest_registry = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ReplicationPolicy.dest_namespace", "title": "<code>dest_namespace = Field(default=None, description='The destination namespace.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ReplicationPolicy.dest_namespace_replace_count", "title": "<code>dest_namespace_replace_count = Field(default=None, description='Specify how many path components will be replaced by the provided destination namespace.\\nThe default value is -1 in which case the legacy mode will be applied.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ReplicationPolicy.trigger", "title": "<code>trigger = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ReplicationPolicy.filters", "title": "<code>filters = Field(default=None, description='The replication policy filter array.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ReplicationPolicy.replicate_deletion", "title": "<code>replicate_deletion = Field(default=None, description='Whether to replicate the deletion operation.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ReplicationPolicy.deletion", "title": "<code>deletion = Field(default=None, description='Deprecated, use \"replicate_deletion\" instead. Whether to replicate the deletion operation.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ReplicationPolicy.override", "title": "<code>override = Field(default=None, description='Whether to override the resources on the destination registry.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ReplicationPolicy.enabled", "title": "<code>enabled = Field(default=None, description='Whether the policy is enabled or not.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ReplicationPolicy.creation_time", "title": "<code>creation_time = Field(default=None, description='The create time of the policy.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ReplicationPolicy.update_time", "title": "<code>update_time = Field(default=None, description='The update time of the policy.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ReplicationPolicy.speed", "title": "<code>speed = Field(default=None, description='speed limit for each task')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.ReplicationPolicy.copy_by_chunk", "title": "<code>copy_by_chunk = Field(default=None, description='Whether to enable copy by chunk.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RegistryProviderInfo", "title": "<code>RegistryProviderInfo</code>", "text": "<p>               Bases: <code>BaseModel</code></p> <p>Registry provider information, including base info and capabilities.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class RegistryProviderInfo(BaseModel):\n    \"\"\"Registry provider information, including base info and capabilities.\"\"\"\n\n    endpoint_pattern: Optional[RegistryProviderEndpointPattern] = None\n    credential_pattern: Optional[RegistryProviderCredentialPattern] = None\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.RegistryProviderInfo.endpoint_pattern", "title": "<code>endpoint_pattern = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RegistryProviderInfo.credential_pattern", "title": "<code>credential_pattern = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Robot", "title": "<code>Robot</code>", "text": "<p>               Bases: <code>BaseModel</code></p> Source code in <code>harborapi/models/models.py</code> <pre><code>class Robot(BaseModel):\n    id: Optional[int] = Field(default=None, description=\"The ID of the robot\")\n    name: Optional[str] = Field(default=None, description=\"The name of the robot\")\n    description: Optional[str] = Field(\n        default=None, description=\"The description of the robot\"\n    )\n    secret: Optional[str] = Field(default=None, description=\"The secret of the robot\")\n    level: Optional[str] = Field(\n        default=None, description=\"The level of the robot, project or system\"\n    )\n    duration: Optional[int] = Field(\n        default=None,\n        description=\"The duration of the robot in days, duration must be either -1(Never) or a positive integer\",\n    )\n    editable: Optional[bool] = Field(\n        default=None, description=\"The editable status of the robot\"\n    )\n    disable: Optional[bool] = Field(\n        default=None, description=\"The disable status of the robot\"\n    )\n    expires_at: Optional[int] = Field(\n        default=None, description=\"The expiration date of the robot\"\n    )\n    permissions: Optional[List[RobotPermission]] = None\n    creator_type: Optional[str] = Field(\n        default=None,\n        description=\"The type of the robot creator, like local(harbor_user) or robot.\",\n    )\n    creator_ref: Optional[int] = Field(\n        default=None,\n        description=\"The reference of the robot creator, like the id of harbor user.\",\n    )\n    creation_time: Optional[datetime] = Field(\n        default=None, description=\"The creation time of the robot.\"\n    )\n    update_time: Optional[datetime] = Field(\n        default=None, description=\"The update time of the robot.\"\n    )\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.Robot.id", "title": "<code>id = Field(default=None, description='The ID of the robot')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Robot.name", "title": "<code>name = Field(default=None, description='The name of the robot')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Robot.description", "title": "<code>description = Field(default=None, description='The description of the robot')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Robot.secret", "title": "<code>secret = Field(default=None, description='The secret of the robot')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Robot.level", "title": "<code>level = Field(default=None, description='The level of the robot, project or system')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Robot.duration", "title": "<code>duration = Field(default=None, description='The duration of the robot in days, duration must be either -1(Never) or a positive integer')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Robot.editable", "title": "<code>editable = Field(default=None, description='The editable status of the robot')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Robot.disable", "title": "<code>disable = Field(default=None, description='The disable status of the robot')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Robot.expires_at", "title": "<code>expires_at = Field(default=None, description='The expiration date of the robot')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Robot.permissions", "title": "<code>permissions = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Robot.creator_type", "title": "<code>creator_type = Field(default=None, description='The type of the robot creator, like local(harbor_user) or robot.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Robot.creator_ref", "title": "<code>creator_ref = Field(default=None, description='The reference of the robot creator, like the id of harbor user.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Robot.creation_time", "title": "<code>creation_time = Field(default=None, description='The creation time of the robot.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Robot.update_time", "title": "<code>update_time = Field(default=None, description='The update time of the robot.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RobotCreate", "title": "<code>RobotCreate</code>", "text": "<p>               Bases: <code>BaseModel</code></p> <p>Request for robot account creation.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class RobotCreate(BaseModel):\n    \"\"\"Request for robot account creation.\"\"\"\n\n    name: Optional[str] = Field(default=None, description=\"The name of the robot\")\n    description: Optional[str] = Field(\n        default=None, description=\"The description of the robot\"\n    )\n    secret: Optional[str] = Field(default=None, description=\"The secret of the robot\")\n    level: Optional[str] = Field(\n        default=None, description=\"The level of the robot, project or system\"\n    )\n    disable: Optional[bool] = Field(\n        default=None, description=\"The disable status of the robot\"\n    )\n    duration: Optional[int] = Field(\n        default=None,\n        description=\"The duration of the robot in days, duration must be either -1(Never) or a positive integer\",\n    )\n    permissions: Optional[List[RobotPermission]] = None\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.RobotCreate.name", "title": "<code>name = Field(default=None, description='The name of the robot')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RobotCreate.description", "title": "<code>description = Field(default=None, description='The description of the robot')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RobotCreate.secret", "title": "<code>secret = Field(default=None, description='The secret of the robot')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RobotCreate.level", "title": "<code>level = Field(default=None, description='The level of the robot, project or system')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RobotCreate.disable", "title": "<code>disable = Field(default=None, description='The disable status of the robot')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RobotCreate.duration", "title": "<code>duration = Field(default=None, description='The duration of the robot in days, duration must be either -1(Never) or a positive integer')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RobotCreate.permissions", "title": "<code>permissions = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RetentionMetadata", "title": "<code>RetentionMetadata</code>", "text": "<p>               Bases: <code>BaseModel</code></p> <p>Metadata for a tag retention rule.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class RetentionMetadata(BaseModel):\n    \"\"\"Metadata for a tag retention rule.\"\"\"\n\n    templates: Optional[List[RetentionRuleMetadata]] = Field(\n        default=None, description=\"templates\"\n    )\n    scope_selectors: Optional[List[RetentionSelectorMetadata]] = Field(\n        default=None, description=\"supported scope selectors\"\n    )\n    tag_selectors: Optional[List[RetentionSelectorMetadata]] = Field(\n        default=None, description=\"supported tag selectors\"\n    )\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.RetentionMetadata.templates", "title": "<code>templates = Field(default=None, description='templates')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RetentionMetadata.scope_selectors", "title": "<code>scope_selectors = Field(default=None, description='supported scope selectors')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RetentionMetadata.tag_selectors", "title": "<code>tag_selectors = Field(default=None, description='supported tag selectors')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RetentionPolicy", "title": "<code>RetentionPolicy</code>", "text": "<p>               Bases: <code>BaseModel</code></p> <p>Retention policy.</p> Source code in <code>harborapi/models/models.py</code> <pre><code>class RetentionPolicy(BaseModel):\n    \"\"\"Retention policy.\"\"\"\n\n    id: Optional[int] = None\n    algorithm: Optional[str] = None\n    rules: Optional[List[RetentionRule]] = None\n    trigger: Optional[RetentionRuleTrigger] = None\n    scope: Optional[RetentionPolicyScope] = None\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.RetentionPolicy.id", "title": "<code>id = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RetentionPolicy.algorithm", "title": "<code>algorithm = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RetentionPolicy.rules", "title": "<code>rules = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RetentionPolicy.trigger", "title": "<code>trigger = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.RetentionPolicy.scope", "title": "<code>scope = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Search", "title": "<code>Search</code>", "text": "<p>               Bases: <code>BaseModel</code></p> Source code in <code>harborapi/models/models.py</code> <pre><code>class Search(BaseModel):\n    project: Optional[List[Project]] = Field(\n        default=None,\n        description=\"Search results of the projects that matched the filter keywords.\",\n    )\n    repository: Optional[List[SearchRepository]] = Field(\n        default=None,\n        description=\"Search results of the repositories that matched the filter keywords.\",\n    )\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.Search.project", "title": "<code>project = Field(default=None, description='Search results of the projects that matched the filter keywords.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Search.repository", "title": "<code>repository = Field(default=None, description='Search results of the repositories that matched the filter keywords.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Artifact", "title": "<code>Artifact</code>", "text": "<p>               Bases: <code>BaseModel</code></p> Source code in <code>harborapi/models/models.py</code> <pre><code>class Artifact(BaseModel):\n    id: Optional[int] = Field(default=None, description=\"The ID of the artifact\")\n    type: Optional[str] = Field(\n        default=None, description=\"The type of the artifact, e.g. image, chart, etc\"\n    )\n    media_type: Optional[str] = Field(\n        default=None, description=\"The media type of the artifact\"\n    )\n    manifest_media_type: Optional[str] = Field(\n        default=None, description=\"The manifest media type of the artifact\"\n    )\n    artifact_type: Optional[str] = Field(\n        default=None, description=\"The artifact_type in the manifest of the artifact\"\n    )\n    project_id: Optional[int] = Field(\n        default=None, description=\"The ID of the project that the artifact belongs to\"\n    )\n    repository_id: Optional[int] = Field(\n        default=None,\n        description=\"The ID of the repository that the artifact belongs to\",\n    )\n    repository_name: Optional[str] = Field(\n        default=None,\n        description=\"The name of the repository that the artifact belongs to\",\n    )\n    digest: Optional[str] = Field(\n        default=None, description=\"The digest of the artifact\"\n    )\n    size: Optional[int] = Field(default=None, description=\"The size of the artifact\")\n    icon: Optional[str] = Field(default=None, description=\"The digest of the icon\")\n    push_time: Optional[datetime] = Field(\n        default=None, description=\"The push time of the artifact\"\n    )\n    pull_time: Optional[datetime] = Field(\n        default=None, description=\"The latest pull time of the artifact\"\n    )\n    extra_attrs: Optional[ExtraAttrs] = None\n    annotations: Optional[Annotations] = None\n    references: Optional[List[Reference]] = None\n    tags: Optional[List[Tag]] = None\n    addition_links: Optional[AdditionLinks] = None\n    labels: Optional[List[Label]] = None\n    scan_overview: Optional[ScanOverview] = None\n    sbom_overview: Optional[SBOMOverview] = None\n    accessories: Optional[List[Accessory]] = None\n\n    @property\n    def scan(self) -&gt; Optional[NativeReportSummary]:\n        \"\"\"\n        Returns the first scan overview found for the Artifact,\n        or None if there are none.\n\n        Artifacts are typically scanned in a single format, represented\n        by its MIME type. Thus, most Artifacts will have only one\n        scan overview. This property provides a quick access to it.\n        \"\"\"\n        if self.scan_overview and self.scan_overview.root:\n            return self.scan_overview.root[next(iter(self.scan_overview))]\n        return None\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.Artifact.id", "title": "<code>id = Field(default=None, description='The ID of the artifact')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Artifact.type", "title": "<code>type = Field(default=None, description='The type of the artifact, e.g. image, chart, etc')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Artifact.media_type", "title": "<code>media_type = Field(default=None, description='The media type of the artifact')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Artifact.manifest_media_type", "title": "<code>manifest_media_type = Field(default=None, description='The manifest media type of the artifact')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Artifact.artifact_type", "title": "<code>artifact_type = Field(default=None, description='The artifact_type in the manifest of the artifact')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Artifact.project_id", "title": "<code>project_id = Field(default=None, description='The ID of the project that the artifact belongs to')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Artifact.repository_id", "title": "<code>repository_id = Field(default=None, description='The ID of the repository that the artifact belongs to')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Artifact.repository_name", "title": "<code>repository_name = Field(default=None, description='The name of the repository that the artifact belongs to')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Artifact.digest", "title": "<code>digest = Field(default=None, description='The digest of the artifact')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Artifact.size", "title": "<code>size = Field(default=None, description='The size of the artifact')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Artifact.icon", "title": "<code>icon = Field(default=None, description='The digest of the icon')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Artifact.push_time", "title": "<code>push_time = Field(default=None, description='The push time of the artifact')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Artifact.pull_time", "title": "<code>pull_time = Field(default=None, description='The latest pull time of the artifact')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Artifact.extra_attrs", "title": "<code>extra_attrs = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Artifact.annotations", "title": "<code>annotations = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Artifact.references", "title": "<code>references = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Artifact.tags", "title": "<code>tags = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Artifact.addition_links", "title": "<code>addition_links = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Artifact.labels", "title": "<code>labels = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Artifact.scan_overview", "title": "<code>scan_overview = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Artifact.sbom_overview", "title": "<code>sbom_overview = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Artifact.accessories", "title": "<code>accessories = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/models/#harborapi.models.models.Artifact.scan", "title": "<code>scan</code>  <code>property</code>", "text": "<p>Returns the first scan overview found for the Artifact, or None if there are none.</p> <p>Artifacts are typically scanned in a single format, represented by its MIME type. Thus, most Artifacts will have only one scan overview. This property provides a quick access to it.</p>"}, {"location": "reference/models/models/#harborapi.models.models.RegistryProviders", "title": "<code>RegistryProviders</code>", "text": "<p>               Bases: <code>RootModel[Dict[str, RegistryProviderInfo]]</code></p> Source code in <code>harborapi/models/models.py</code> <pre><code>class RegistryProviders(RootModel[Dict[str, RegistryProviderInfo]]):\n    root: Dict[str, RegistryProviderInfo] = Field(\n        default={},\n        description=\"The registry providers. Each key is the name of the registry provider.\",\n    )\n</code></pre>"}, {"location": "reference/models/models/#harborapi.models.models.RegistryProviders.root", "title": "<code>root = Field(default={}, description='The registry providers. Each key is the name of the registry provider.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/oidc/", "title": "harborapi.models.oidc", "text": "<p>Module that defines OIDC models. These are not generated from the Swagger 2.0 schema, but are instead defined manually. This is because the Swagger 2.0 schema does not define the OIDC models.</p>"}, {"location": "reference/models/oidc/#harborapi.models.oidc.OIDCTestReq", "title": "<code>OIDCTestReq</code>", "text": "Source code in <code>harborapi/models/oidc.py</code> <pre><code>class OIDCTestReq(BaseModel):\n    url: str\n    verify_cert: bool\n</code></pre>"}, {"location": "reference/models/oidc/#harborapi.models.oidc.OIDCTestReq.url", "title": "<code>url</code>  <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/oidc/#harborapi.models.oidc.OIDCTestReq.verify_cert", "title": "<code>verify_cert</code>  <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/scanner/", "title": "harborapi.models.scanner", "text": ""}, {"location": "reference/models/scanner/#harborapi.models.scanner.DEFAULT_VENDORS", "title": "<code>DEFAULT_VENDORS = ('nvd', 'redhat')</code>  <code>module-attribute</code>", "text": ""}, {"location": "reference/models/scanner/#harborapi.models.scanner.SEVERITY_PRIORITY", "title": "<code>SEVERITY_PRIORITY = {Severity.none: 0, Severity.unknown: 1, Severity.negligible: 2, Severity.low: 3, Severity.medium: 4, Severity.high: 5, Severity.critical: 6}</code>  <code>module-attribute</code>", "text": ""}, {"location": "reference/models/scanner/#harborapi.models.scanner.Scanner", "title": "<code>Scanner</code>", "text": "<p>               Bases: <code>BaseModel</code></p> <p>Basic scanner properties such as name, vendor, and version.</p> Source code in <code>harborapi/models/scanner.py</code> <pre><code>class Scanner(BaseModel):\n    \"\"\"\n    Basic scanner properties such as name, vendor, and version.\n\n    \"\"\"\n\n    name: Optional[str] = Field(\n        default=None, description=\"The name of the scanner.\", examples=[\"Trivy\"]\n    )\n    vendor: Optional[str] = Field(\n        default=None,\n        description=\"The name of the scanner's provider.\",\n        examples=[\"Aqua Security\"],\n    )\n    version: Optional[str] = Field(\n        default=None, description=\"The version of the scanner.\", examples=[\"0.4.0\"]\n    )\n\n    @property\n    def semver(self) -&gt; SemVer:\n        return get_semver(self.version)\n</code></pre>"}, {"location": "reference/models/scanner/#harborapi.models.scanner.Scanner.name", "title": "<code>name = Field(default=None, description='The name of the scanner.', examples=['Trivy'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/scanner/#harborapi.models.scanner.Scanner.vendor", "title": "<code>vendor = Field(default=None, description=\"The name of the scanner's provider.\", examples=['Aqua Security'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/scanner/#harborapi.models.scanner.Scanner.version", "title": "<code>version = Field(default=None, description='The version of the scanner.', examples=['0.4.0'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/scanner/#harborapi.models.scanner.Scanner.semver", "title": "<code>semver</code>  <code>property</code>", "text": ""}, {"location": "reference/models/scanner/#harborapi.models.scanner.ScannerProperties", "title": "<code>ScannerProperties</code>", "text": "<p>               Bases: <code>RootModel[Optional[Dict[str, str]]]</code></p> <p>A set of custom properties that can further describe capabilities of a given scanner.</p> Source code in <code>harborapi/models/scanner.py</code> <pre><code>class ScannerProperties(RootModel[Optional[Dict[str, str]]]):\n    \"\"\"\n    A set of custom properties that can further describe capabilities of a given scanner.\n\n    \"\"\"\n\n    root: Optional[Dict[str, str]] = None\n</code></pre>"}, {"location": "reference/models/scanner/#harborapi.models.scanner.ScannerProperties.root", "title": "<code>root = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/scanner/#harborapi.models.scanner.ScannerCapability", "title": "<code>ScannerCapability</code>", "text": "<p>               Bases: <code>BaseModel</code></p> <p>Capability consists of the set of recognized artifact MIME types and the set of scanner report MIME types. For example, a scanner capable of analyzing Docker images and producing a vulnerabilities report recognizable by Harbor web console might be represented with the following capability: - consumes MIME types:   - <code>application/vnd.oci.image.manifest.v1+json</code>   - <code>application/vnd.docker.distribution.manifest.v2+json</code> - produces MIME types:   - <code>application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0</code></p> Source code in <code>harborapi/models/scanner.py</code> <pre><code>class ScannerCapability(BaseModel):\n    \"\"\"\n    Capability consists of the set of recognized artifact MIME types and the set of scanner report MIME types.\n    For example, a scanner capable of analyzing Docker images and producing a vulnerabilities report recognizable\n    by Harbor web console might be represented with the following capability:\n    - consumes MIME types:\n      - `application/vnd.oci.image.manifest.v1+json`\n      - `application/vnd.docker.distribution.manifest.v2+json`\n    - produces MIME types:\n      - `application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0`\n\n    \"\"\"\n\n    consumes_mime_types: List[str] = Field(\n        ...,\n        description='The set of MIME types of the artifacts supported by the scanner to produce the reports specified in the \"produces_mime_types\". A given\\nmime type should only be present in one capability item.\\n',\n        examples=[\n            [\n                \"application/vnd.oci.image.manifest.v1+json\",\n                \"application/vnd.docker.distribution.manifest.v2+json\",\n            ]\n        ],\n    )\n    produces_mime_types: List[str] = Field(\n        ...,\n        description=\"The set of MIME types of reports generated by the scanner for the consumes_mime_types of the same capability record.\\n\",\n        examples=[\n            [\"application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0\"]\n        ],\n    )\n</code></pre>"}, {"location": "reference/models/scanner/#harborapi.models.scanner.ScannerCapability.consumes_mime_types", "title": "<code>consumes_mime_types = Field(..., description='The set of MIME types of the artifacts supported by the scanner to produce the reports specified in the \"produces_mime_types\". A given\\nmime type should only be present in one capability item.\\n', examples=[['application/vnd.oci.image.manifest.v1+json', 'application/vnd.docker.distribution.manifest.v2+json']])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/scanner/#harborapi.models.scanner.ScannerCapability.produces_mime_types", "title": "<code>produces_mime_types = Field(..., description='The set of MIME types of reports generated by the scanner for the consumes_mime_types of the same capability record.\\n', examples=[['application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0']])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/scanner/#harborapi.models.scanner.ScanRequestId", "title": "<code>ScanRequestId</code>", "text": "<p>               Bases: <code>RootModel[str]</code></p> Source code in <code>harborapi/models/scanner.py</code> <pre><code>class ScanRequestId(RootModel[str]):\n    root: str = Field(\n        ...,\n        description=\"A unique identifier returned by the [/scan](#/operation/AcceptScanRequest] operations. The format of the\\nidentifier is not imposed but it should be unique enough to prevent collisons when polling for scan reports.\\n\",\n        examples=[\"3fa85f64-5717-4562-b3fc-2c963f66afa6\"],\n    )\n</code></pre>"}, {"location": "reference/models/scanner/#harborapi.models.scanner.ScanRequestId.root", "title": "<code>root = Field(..., description='A unique identifier returned by the [/scan](#/operation/AcceptScanRequest] operations. The format of the\\nidentifier is not imposed but it should be unique enough to prevent collisons when polling for scan reports.\\n', examples=['3fa85f64-5717-4562-b3fc-2c963f66afa6'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/scanner/#harborapi.models.scanner.Registry", "title": "<code>Registry</code>", "text": "<p>               Bases: <code>BaseModel</code></p> Source code in <code>harborapi/models/scanner.py</code> <pre><code>class Registry(BaseModel):\n    url: Optional[str] = Field(\n        default=None,\n        description=\"A base URL or the Docker Registry v2 API.\",\n        examples=[\"https://core.harbor.domain\"],\n    )\n    authorization: Optional[str] = Field(\n        default=None,\n        description=\"An optional value of the HTTP Authorization header sent with each request to the Docker Registry v2 API.\\nIt's used to exchange Base64 encoded robot account credentials to a short lived JWT access token which\\nallows the underlying scanner to pull the artifact from the Docker Registry.\\n\",\n        examples=[\"Basic BASE64_ENCODED_CREDENTIALS\"],\n    )\n</code></pre>"}, {"location": "reference/models/scanner/#harborapi.models.scanner.Registry.url", "title": "<code>url = Field(default=None, description='A base URL or the Docker Registry v2 API.', examples=['https://core.harbor.domain'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/scanner/#harborapi.models.scanner.Registry.authorization", "title": "<code>authorization = Field(default=None, description=\"An optional value of the HTTP Authorization header sent with each request to the Docker Registry v2 API.\\nIt's used to exchange Base64 encoded robot account credentials to a short lived JWT access token which\\nallows the underlying scanner to pull the artifact from the Docker Registry.\\n\", examples=['Basic BASE64_ENCODED_CREDENTIALS'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/scanner/#harborapi.models.scanner.Artifact", "title": "<code>Artifact</code>", "text": "<p>               Bases: <code>BaseModel</code></p> Source code in <code>harborapi/models/scanner.py</code> <pre><code>class Artifact(BaseModel):\n    repository: Optional[str] = Field(\n        default=None,\n        description=\"The name of the Docker Registry repository containing the artifact.\",\n        examples=[\"library/mongo\"],\n    )\n    digest: Optional[str] = Field(\n        default=None,\n        description=\"The artifact's digest, consisting of an algorithm and hex portion.\",\n        examples=[\n            \"sha256:6c3c624b58dbbcd3c0dd82b4c53f04194d1247c6eebdaab7c610cf7d66709b3b\"\n        ],\n    )\n    tag: Optional[str] = Field(\n        default=None, description=\"The artifact's tag\", examples=[\"3.14-xenial\"]\n    )\n    mime_type: Optional[str] = Field(\n        default=None,\n        description=\"The MIME type of the artifact.\",\n        examples=[\"application/vnd.docker.distribution.manifest.v2+json\"],\n    )\n</code></pre>"}, {"location": "reference/models/scanner/#harborapi.models.scanner.Artifact.repository", "title": "<code>repository = Field(default=None, description='The name of the Docker Registry repository containing the artifact.', examples=['library/mongo'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/scanner/#harborapi.models.scanner.Artifact.digest", "title": "<code>digest = Field(default=None, description=\"The artifact's digest, consisting of an algorithm and hex portion.\", examples=['sha256:6c3c624b58dbbcd3c0dd82b4c53f04194d1247c6eebdaab7c610cf7d66709b3b'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/scanner/#harborapi.models.scanner.Artifact.tag", "title": "<code>tag = Field(default=None, description=\"The artifact's tag\", examples=['3.14-xenial'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/scanner/#harborapi.models.scanner.Artifact.mime_type", "title": "<code>mime_type = Field(default=None, description='The MIME type of the artifact.', examples=['application/vnd.docker.distribution.manifest.v2+json'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/scanner/#harborapi.models.scanner.Severity", "title": "<code>Severity</code>", "text": "<p>               Bases: <code>Enum</code></p> <p>A standard scale for measuring the severity of a vulnerability.</p> <ul> <li><code>Unknown</code> - either a security problem that has not been assigned to a priority yet or a priority that the   scanner did not recognize.</li> <li><code>Negligible</code> - technically a security problem, but is only theoretical in nature, requires a very special   situation, has almost no install base, or does no real damage.</li> <li><code>Low</code> - a security problem, but is hard to exploit due to environment, requires a user-assisted attack,   a small install base, or does very little damage.</li> <li><code>Medium</code> - a real security problem, and is exploitable for many people. Includes network daemon denial of   service attacks, cross-site scripting, and gaining user privileges.</li> <li><code>High</code> - a real problem, exploitable for many people in a default installation. Includes serious remote denial   of service, local root privilege escalations, or data loss.</li> <li><code>Critical</code> - a world-burning problem, exploitable for nearly all people in a default installation. Includes   remote root privilege escalations, or massive data loss.</li> </ul> Source code in <code>harborapi/models/scanner.py</code> <pre><code>class Severity(Enum):\n    \"\"\"\n    A standard scale for measuring the severity of a vulnerability.\n\n    * `Unknown` - either a security problem that has not been assigned to a priority yet or a priority that the\n      scanner did not recognize.\n    * `Negligible` - technically a security problem, but is only theoretical in nature, requires a very special\n      situation, has almost no install base, or does no real damage.\n    * `Low` - a security problem, but is hard to exploit due to environment, requires a user-assisted attack,\n      a small install base, or does very little damage.\n    * `Medium` - a real security problem, and is exploitable for many people. Includes network daemon denial of\n      service attacks, cross-site scripting, and gaining user privileges.\n    * `High` - a real problem, exploitable for many people in a default installation. Includes serious remote denial\n      of service, local root privilege escalations, or data loss.\n    * `Critical` - a world-burning problem, exploitable for nearly all people in a default installation. Includes\n      remote root privilege escalations, or massive data loss.\n\n    \"\"\"\n\n    unknown = \"Unknown\"\n    negligible = \"Negligible\"\n    low = \"Low\"\n    medium = \"Medium\"\n    high = \"High\"\n    critical = \"Critical\"\n    none = \"None\"\n\n    def __gt__(self, other: Severity) -&gt; bool:\n        return SEVERITY_PRIORITY[self] &gt; SEVERITY_PRIORITY[other]\n\n    def __ge__(self, other: Severity) -&gt; bool:\n        return SEVERITY_PRIORITY[self] &gt;= SEVERITY_PRIORITY[other]\n\n    def __lt__(self, other: Severity) -&gt; bool:\n        return SEVERITY_PRIORITY[self] &lt; SEVERITY_PRIORITY[other]\n\n    def __le__(self, other: Severity) -&gt; bool:\n        return SEVERITY_PRIORITY[self] &lt;= SEVERITY_PRIORITY[other]\n</code></pre>"}, {"location": "reference/models/scanner/#harborapi.models.scanner.Severity.unknown", "title": "<code>unknown = 'Unknown'</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/scanner/#harborapi.models.scanner.Severity.negligible", "title": "<code>negligible = 'Negligible'</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/scanner/#harborapi.models.scanner.Severity.low", "title": "<code>low = 'Low'</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/scanner/#harborapi.models.scanner.Severity.medium", "title": "<code>medium = 'Medium'</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/scanner/#harborapi.models.scanner.Severity.high", "title": "<code>high = 'High'</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/scanner/#harborapi.models.scanner.Severity.critical", "title": "<code>critical = 'Critical'</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/scanner/#harborapi.models.scanner.Severity.none", "title": "<code>none = 'None'</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/scanner/#harborapi.models.scanner.Severity.__gt__", "title": "<code>__gt__(other)</code>", "text": "Source code in <code>harborapi/models/scanner.py</code> <pre><code>def __gt__(self, other: Severity) -&gt; bool:\n    return SEVERITY_PRIORITY[self] &gt; SEVERITY_PRIORITY[other]\n</code></pre>"}, {"location": "reference/models/scanner/#harborapi.models.scanner.Severity.__ge__", "title": "<code>__ge__(other)</code>", "text": "Source code in <code>harborapi/models/scanner.py</code> <pre><code>def __ge__(self, other: Severity) -&gt; bool:\n    return SEVERITY_PRIORITY[self] &gt;= SEVERITY_PRIORITY[other]\n</code></pre>"}, {"location": "reference/models/scanner/#harborapi.models.scanner.Severity.__lt__", "title": "<code>__lt__(other)</code>", "text": "Source code in <code>harborapi/models/scanner.py</code> <pre><code>def __lt__(self, other: Severity) -&gt; bool:\n    return SEVERITY_PRIORITY[self] &lt; SEVERITY_PRIORITY[other]\n</code></pre>"}, {"location": "reference/models/scanner/#harborapi.models.scanner.Severity.__le__", "title": "<code>__le__(other)</code>", "text": "Source code in <code>harborapi/models/scanner.py</code> <pre><code>def __le__(self, other: Severity) -&gt; bool:\n    return SEVERITY_PRIORITY[self] &lt;= SEVERITY_PRIORITY[other]\n</code></pre>"}, {"location": "reference/models/scanner/#harborapi.models.scanner.Error", "title": "<code>Error</code>", "text": "<p>               Bases: <code>BaseModel</code></p> Source code in <code>harborapi/models/scanner.py</code> <pre><code>class Error(BaseModel):\n    message: Optional[str] = Field(default=None, examples=[\"Some unexpected error\"])\n</code></pre>"}, {"location": "reference/models/scanner/#harborapi.models.scanner.Error.message", "title": "<code>message = Field(default=None, examples=['Some unexpected error'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/scanner/#harborapi.models.scanner.CVSSDetails", "title": "<code>CVSSDetails</code>", "text": "<p>               Bases: <code>BaseModel</code></p> Source code in <code>harborapi/models/scanner.py</code> <pre><code>class CVSSDetails(BaseModel):\n    score_v3: Optional[float] = Field(\n        default=None,\n        description=\"The CVSS 3.0 score for the vulnerability.\\n\",\n        examples=[3.2],\n    )\n    score_v2: Optional[float] = Field(\n        default=None, description=\"The CVSS 2.0 score for the vulnerability.\\n\"\n    )\n    vector_v3: Optional[str] = Field(\n        default=None,\n        description=\"The CVSS 3.0 vector for the vulnerability. \\n\",\n        examples=[\"CVSS:3.0/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N\"],\n    )\n    vector_v2: Optional[str] = Field(\n        default=None,\n        description=\"The CVSS 2.0 vector for the vulnerability. The string is of the form AV:L/AC:M/Au:N/C:P/I:N/A:N\\n\",\n        examples=[\"AV:N/AC:L/Au:N/C:N/I:N/A:P\"],\n    )\n</code></pre>"}, {"location": "reference/models/scanner/#harborapi.models.scanner.CVSSDetails.score_v3", "title": "<code>score_v3 = Field(default=None, description='The CVSS 3.0 score for the vulnerability.\\n', examples=[3.2])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/scanner/#harborapi.models.scanner.CVSSDetails.score_v2", "title": "<code>score_v2 = Field(default=None, description='The CVSS 2.0 score for the vulnerability.\\n')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/scanner/#harborapi.models.scanner.CVSSDetails.vector_v3", "title": "<code>vector_v3 = Field(default=None, description='The CVSS 3.0 vector for the vulnerability. \\n', examples=['CVSS:3.0/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/scanner/#harborapi.models.scanner.CVSSDetails.vector_v2", "title": "<code>vector_v2 = Field(default=None, description='The CVSS 2.0 vector for the vulnerability. The string is of the form AV:L/AC:M/Au:N/C:P/I:N/A:N\\n', examples=['AV:N/AC:L/Au:N/C:N/I:N/A:P'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/scanner/#harborapi.models.scanner.ScannerAdapterMetadata", "title": "<code>ScannerAdapterMetadata</code>", "text": "<p>               Bases: <code>BaseModel</code></p> <p>Represents metadata of a Scanner Adapter which allows Harbor to lookup a scanner capable of scanning a given Artifact stored in its registry and making sure that it can interpret a returned result.</p> Source code in <code>harborapi/models/scanner.py</code> <pre><code>class ScannerAdapterMetadata(BaseModel):\n    \"\"\"\n    Represents metadata of a Scanner Adapter which allows Harbor to lookup a scanner capable\n    of scanning a given Artifact stored in its registry and making sure that it\n    can interpret a returned result.\n\n    \"\"\"\n\n    scanner: Scanner\n    capabilities: List[ScannerCapability]\n    properties: Optional[ScannerProperties] = None\n</code></pre>"}, {"location": "reference/models/scanner/#harborapi.models.scanner.ScannerAdapterMetadata.scanner", "title": "<code>scanner</code>  <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/scanner/#harborapi.models.scanner.ScannerAdapterMetadata.capabilities", "title": "<code>capabilities</code>  <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/scanner/#harborapi.models.scanner.ScannerAdapterMetadata.properties", "title": "<code>properties = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/scanner/#harborapi.models.scanner.ScanRequest", "title": "<code>ScanRequest</code>", "text": "<p>               Bases: <code>BaseModel</code></p> Source code in <code>harborapi/models/scanner.py</code> <pre><code>class ScanRequest(BaseModel):\n    registry: Registry\n    artifact: Artifact\n</code></pre>"}, {"location": "reference/models/scanner/#harborapi.models.scanner.ScanRequest.registry", "title": "<code>registry</code>  <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/scanner/#harborapi.models.scanner.ScanRequest.artifact", "title": "<code>artifact</code>  <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/scanner/#harborapi.models.scanner.ScanResponse", "title": "<code>ScanResponse</code>", "text": "<p>               Bases: <code>BaseModel</code></p> Source code in <code>harborapi/models/scanner.py</code> <pre><code>class ScanResponse(BaseModel):\n    id: ScanRequestId\n</code></pre>"}, {"location": "reference/models/scanner/#harborapi.models.scanner.ScanResponse.id", "title": "<code>id</code>  <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/scanner/#harborapi.models.scanner.VulnerabilityItem", "title": "<code>VulnerabilityItem</code>", "text": "<p>               Bases: <code>BaseModel</code></p> Source code in <code>harborapi/models/scanner.py</code> <pre><code>class VulnerabilityItem(BaseModel):\n    id: Optional[str] = Field(\n        default=None,\n        description=\"The unique identifier of the vulnerability.\",\n        examples=[\"CVE-2017-8283\"],\n    )\n    package: Optional[str] = Field(\n        default=None,\n        description=\"An operating system package containing the vulnerability.\\n\",\n        examples=[\"dpkg\"],\n    )\n    version: Optional[str] = Field(\n        default=None,\n        description=\"The version of the package containing the vulnerability.\\n\",\n        examples=[\"1.17.27\"],\n    )\n    fix_version: Optional[str] = Field(\n        default=None,\n        description=\"The version of the package containing the fix if available.\\n\",\n        examples=[\"1.18.0\"],\n    )\n    severity: Severity = Field(\n        Severity.unknown, description=\"The severity of the vulnerability.\"\n    )\n    description: Optional[str] = Field(\n        default=None,\n        description=\"The detailed description of the vulnerability.\\n\",\n        examples=[\n            \"dpkg-source in dpkg 1.3.0 through 1.18.23 is able to use a non-GNU patch program\\nand does not offer a protection mechanism for blank-indented diff hunks, which\\nallows remote attackers to conduct directory traversal attacks via a crafted\\nDebian source package, as demonstrated by using of dpkg-source on NetBSD.\\n\"\n        ],\n    )\n    links: Optional[List[str]] = Field(\n        None,\n        description=\"The list of links to the upstream databases with the full description of the vulnerability.\\n\",\n    )\n    preferred_cvss: Optional[CVSSDetails] = None\n    cwe_ids: Optional[List[str]] = Field(\n        default=None,\n        description=\"The Common Weakness Enumeration Identifiers associated with this vulnerability.\\n\",\n        examples=[[\"CWE-476\"]],\n    )\n    vendor_attributes: Optional[Dict[str, Any]] = None\n\n    @field_validator(\"severity\", mode=\"before\")\n    @classmethod\n    def _severity_none_is_default(\n        cls, v: Optional[Severity], info: ValidationInfo\n    ) -&gt; Severity:\n        if not info.field_name:\n            raise ValueError(\"Validator is not attached to a field.\")\n        return v or cls.model_fields[info.field_name].default\n\n    @property\n    def semver(self) -&gt; SemVer:\n        return get_semver(self.version)\n\n    @property\n    def fixable(self) -&gt; bool:\n        return bool(self.fix_version)\n\n    def get_cvss_score(\n        self,\n        scanner: Union[Optional[Scanner], str] = \"Trivy\",\n        version: int = 3,\n        vendor_priority: Optional[Iterable[str]] = None,\n        default: float = 0.0,\n    ) -&gt; float:\n        \"\"\"The default scanner Trivy, as of version 0.29.1, does not use the\n        preferred_cvss field.\n\n        In order to not tightly couple this method with a specific scanner,\n        we use the scanner name to determine how to retrieve the CVSS score.\n\n        Forward compatibility is in place in the event that Trivy starts\n        conforming to the spec.\n        \"\"\"\n        if vendor_priority is None:\n            vendor_priority = DEFAULT_VENDORS\n        if self.preferred_cvss is not None:\n            if version == 3 and self.preferred_cvss.score_v3 is not None:\n                return self.preferred_cvss.score_v3\n            elif version == 2 and self.preferred_cvss.score_v2 is not None:\n                return self.preferred_cvss.score_v2\n        if not scanner:\n            return default\n        if isinstance(scanner, str):\n            scanner_name = scanner\n        elif isinstance(scanner, Scanner):\n            scanner_name = scanner.name or \"\"\n        if scanner_name.lower() == \"trivy\":\n            return self._get_trivy_cvss_score(\n                version=version, vendor_priority=vendor_priority, default=default\n            )\n        return default\n\n    def _get_trivy_cvss_score(\n        self, version: int, vendor_priority: Iterable[str], default: float = 0.0\n    ) -&gt; float:\n        if self.vendor_attributes is None:\n            return default\n        cvss_data = self.vendor_attributes.get(\"CVSS\", {})\n        if not cvss_data:\n            return default\n        for prio in vendor_priority:\n            vendor_cvss = cvss_data.get(prio, {})\n            if not vendor_cvss:\n                continue\n            elif not isinstance(vendor_cvss, dict):\n                logger.warning(\"Received malformed vendor CVSS data: %s\", vendor_cvss)\n                continue\n            score = vendor_cvss.get(f\"V{version}Score\", default)\n            if isinstance(score, (int, float)):\n                return float(score)\n            else:\n                logger.error(\n                    \"Received non-float value for vendor CVSS V%dScore: %s\",\n                    version,\n                    score,\n                )\n        return default\n\n    def get_severity(\n        self,\n        scanner: Union[Optional[Scanner], str] = \"Trivy\",\n        vendor_priority: Optional[Iterable[str]] = None,\n    ) -&gt; Severity:\n        \"\"\"Returns the CVSS V3 severity of the vulnerability based on a specific vendor.\n        If no vendor is specified, the default vendor priority is used (NVD over RedHat).\n\n        With Trivy 0.29.1, the `severity` field is based on the Red Hat vulnerability rating.\n        This attempts to return the severity based on a user-provided vendor priority.\n\n        TODO: improve documentation for the what and why of this method\n        \"\"\"\n        cvss_score = self.get_cvss_score(\n            scanner=scanner, vendor_priority=vendor_priority\n        )\n        if cvss_score &gt;= 9.0:\n            return Severity.critical\n        elif cvss_score &gt;= 7.0:\n            return Severity.high\n        elif cvss_score &gt;= 4.0:\n            return Severity.medium\n        elif cvss_score &gt;= 0.1:\n            return Severity.low\n        else:\n            return Severity.negligible\n\n    def get_severity_highest(\n        self,\n        scanner: Union[Optional[Scanner], str] = \"Trivy\",\n        vendors: Optional[Iterable[str]] = None,\n    ) -&gt; Severity:\n        \"\"\"Attempts to find the highest severity of the vulnerability based on a specific vendor.\"\"\"\n        if vendors is None:\n            vendors = DEFAULT_VENDORS\n        severities = [\n            self.get_severity(scanner=scanner, vendor_priority=[v]) for v in vendors\n        ]\n        if self.severity is not None:\n            severities.append(self.severity)\n        return most_severe(severities)\n</code></pre>"}, {"location": "reference/models/scanner/#harborapi.models.scanner.VulnerabilityItem.id", "title": "<code>id = Field(default=None, description='The unique identifier of the vulnerability.', examples=['CVE-2017-8283'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/scanner/#harborapi.models.scanner.VulnerabilityItem.package", "title": "<code>package = Field(default=None, description='An operating system package containing the vulnerability.\\n', examples=['dpkg'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/scanner/#harborapi.models.scanner.VulnerabilityItem.version", "title": "<code>version = Field(default=None, description='The version of the package containing the vulnerability.\\n', examples=['1.17.27'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/scanner/#harborapi.models.scanner.VulnerabilityItem.fix_version", "title": "<code>fix_version = Field(default=None, description='The version of the package containing the fix if available.\\n', examples=['1.18.0'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/scanner/#harborapi.models.scanner.VulnerabilityItem.severity", "title": "<code>severity = Field(Severity.unknown, description='The severity of the vulnerability.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/scanner/#harborapi.models.scanner.VulnerabilityItem.description", "title": "<code>description = Field(default=None, description='The detailed description of the vulnerability.\\n', examples=['dpkg-source in dpkg 1.3.0 through 1.18.23 is able to use a non-GNU patch program\\nand does not offer a protection mechanism for blank-indented diff hunks, which\\nallows remote attackers to conduct directory traversal attacks via a crafted\\nDebian source package, as demonstrated by using of dpkg-source on NetBSD.\\n'])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/scanner/#harborapi.models.scanner.VulnerabilityItem.links", "title": "<code>links = Field(None, description='The list of links to the upstream databases with the full description of the vulnerability.\\n')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/scanner/#harborapi.models.scanner.VulnerabilityItem.preferred_cvss", "title": "<code>preferred_cvss = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/scanner/#harborapi.models.scanner.VulnerabilityItem.cwe_ids", "title": "<code>cwe_ids = Field(default=None, description='The Common Weakness Enumeration Identifiers associated with this vulnerability.\\n', examples=[['CWE-476']])</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/scanner/#harborapi.models.scanner.VulnerabilityItem.vendor_attributes", "title": "<code>vendor_attributes = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/scanner/#harborapi.models.scanner.VulnerabilityItem.semver", "title": "<code>semver</code>  <code>property</code>", "text": ""}, {"location": "reference/models/scanner/#harborapi.models.scanner.VulnerabilityItem.fixable", "title": "<code>fixable</code>  <code>property</code>", "text": ""}, {"location": "reference/models/scanner/#harborapi.models.scanner.VulnerabilityItem.get_cvss_score", "title": "<code>get_cvss_score(scanner='Trivy', version=3, vendor_priority=None, default=0.0)</code>", "text": "<p>The default scanner Trivy, as of version 0.29.1, does not use the preferred_cvss field.</p> <p>In order to not tightly couple this method with a specific scanner, we use the scanner name to determine how to retrieve the CVSS score.</p> <p>Forward compatibility is in place in the event that Trivy starts conforming to the spec.</p> Source code in <code>harborapi/models/scanner.py</code> <pre><code>def get_cvss_score(\n    self,\n    scanner: Union[Optional[Scanner], str] = \"Trivy\",\n    version: int = 3,\n    vendor_priority: Optional[Iterable[str]] = None,\n    default: float = 0.0,\n) -&gt; float:\n    \"\"\"The default scanner Trivy, as of version 0.29.1, does not use the\n    preferred_cvss field.\n\n    In order to not tightly couple this method with a specific scanner,\n    we use the scanner name to determine how to retrieve the CVSS score.\n\n    Forward compatibility is in place in the event that Trivy starts\n    conforming to the spec.\n    \"\"\"\n    if vendor_priority is None:\n        vendor_priority = DEFAULT_VENDORS\n    if self.preferred_cvss is not None:\n        if version == 3 and self.preferred_cvss.score_v3 is not None:\n            return self.preferred_cvss.score_v3\n        elif version == 2 and self.preferred_cvss.score_v2 is not None:\n            return self.preferred_cvss.score_v2\n    if not scanner:\n        return default\n    if isinstance(scanner, str):\n        scanner_name = scanner\n    elif isinstance(scanner, Scanner):\n        scanner_name = scanner.name or \"\"\n    if scanner_name.lower() == \"trivy\":\n        return self._get_trivy_cvss_score(\n            version=version, vendor_priority=vendor_priority, default=default\n        )\n    return default\n</code></pre>"}, {"location": "reference/models/scanner/#harborapi.models.scanner.VulnerabilityItem.get_severity", "title": "<code>get_severity(scanner='Trivy', vendor_priority=None)</code>", "text": "<p>Returns the CVSS V3 severity of the vulnerability based on a specific vendor. If no vendor is specified, the default vendor priority is used (NVD over RedHat).</p> <p>With Trivy 0.29.1, the <code>severity</code> field is based on the Red Hat vulnerability rating. This attempts to return the severity based on a user-provided vendor priority.</p> <p>TODO: improve documentation for the what and why of this method</p> Source code in <code>harborapi/models/scanner.py</code> <pre><code>def get_severity(\n    self,\n    scanner: Union[Optional[Scanner], str] = \"Trivy\",\n    vendor_priority: Optional[Iterable[str]] = None,\n) -&gt; Severity:\n    \"\"\"Returns the CVSS V3 severity of the vulnerability based on a specific vendor.\n    If no vendor is specified, the default vendor priority is used (NVD over RedHat).\n\n    With Trivy 0.29.1, the `severity` field is based on the Red Hat vulnerability rating.\n    This attempts to return the severity based on a user-provided vendor priority.\n\n    TODO: improve documentation for the what and why of this method\n    \"\"\"\n    cvss_score = self.get_cvss_score(\n        scanner=scanner, vendor_priority=vendor_priority\n    )\n    if cvss_score &gt;= 9.0:\n        return Severity.critical\n    elif cvss_score &gt;= 7.0:\n        return Severity.high\n    elif cvss_score &gt;= 4.0:\n        return Severity.medium\n    elif cvss_score &gt;= 0.1:\n        return Severity.low\n    else:\n        return Severity.negligible\n</code></pre>"}, {"location": "reference/models/scanner/#harborapi.models.scanner.VulnerabilityItem.get_severity_highest", "title": "<code>get_severity_highest(scanner='Trivy', vendors=None)</code>", "text": "<p>Attempts to find the highest severity of the vulnerability based on a specific vendor.</p> Source code in <code>harborapi/models/scanner.py</code> <pre><code>def get_severity_highest(\n    self,\n    scanner: Union[Optional[Scanner], str] = \"Trivy\",\n    vendors: Optional[Iterable[str]] = None,\n) -&gt; Severity:\n    \"\"\"Attempts to find the highest severity of the vulnerability based on a specific vendor.\"\"\"\n    if vendors is None:\n        vendors = DEFAULT_VENDORS\n    severities = [\n        self.get_severity(scanner=scanner, vendor_priority=[v]) for v in vendors\n    ]\n    if self.severity is not None:\n        severities.append(self.severity)\n    return most_severe(severities)\n</code></pre>"}, {"location": "reference/models/scanner/#harborapi.models.scanner.ErrorResponse", "title": "<code>ErrorResponse</code>", "text": "<p>               Bases: <code>BaseModel</code></p> Source code in <code>harborapi/models/scanner.py</code> <pre><code>class ErrorResponse(BaseModel):\n    error: Optional[Error] = None\n</code></pre>"}, {"location": "reference/models/scanner/#harborapi.models.scanner.ErrorResponse.error", "title": "<code>error = None</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/scanner/#harborapi.models.scanner.HarborVulnerabilityReport", "title": "<code>HarborVulnerabilityReport</code>", "text": "<p>               Bases: <code>BaseModel</code></p> Source code in <code>harborapi/models/scanner.py</code> <pre><code>class HarborVulnerabilityReport(BaseModel):\n    generated_at: Optional[AwareDatetime] = Field(\n        None, description=\"The time the vulnerability report was generated.\"\n    )\n    artifact: Optional[Artifact] = Field(\n        default=None, description=\"The scanned artifact.\"\n    )\n    scanner: Optional[Scanner] = Field(\n        default=None, description=\"The scanner used to generate the report.\"\n    )\n    severity: Optional[Severity] = Field(\n        default=Severity.unknown,\n        description=\"The overall severity of the vulnerabilities.\",\n    )\n    vulnerabilities: List[VulnerabilityItem] = Field(\n        default_factory=list, description=\"The list of vulnerabilities found.\"\n    )\n    model_config = ConfigDict(ignored_types=(cached_property,))\n\n    @field_validator(\"severity\", mode=\"before\")\n    @classmethod\n    def _severity_none_is_default(\n        cls, v: Optional[Severity], info: ValidationInfo\n    ) -&gt; Severity:\n        if not info.field_name:\n            raise ValueError(\"Validator is not attached to a field.\")\n        return v or cls.model_fields[info.field_name].default\n\n    def __repr__(self) -&gt; str:\n        return f\"HarborVulnerabilityReport(generated_at={self.generated_at}, artifact={self.artifact}, scanner={self.scanner}, severity={self.severity}, vulnerabilities=list(len={len(self.vulnerabilities)}))\"\n\n    @property\n    def fixable(self) -&gt; List[VulnerabilityItem]:\n        return [v for v in self.vulnerabilities if v.fixable]\n\n    @property\n    def unfixable(self) -&gt; List[VulnerabilityItem]:\n        return [v for v in self.vulnerabilities if not v.fixable]\n\n    @property\n    def critical(self) -&gt; List[VulnerabilityItem]:\n        return self.vulnerabilities_by_severity(Severity.critical)\n\n    @property\n    def high(self) -&gt; List[VulnerabilityItem]:\n        return self.vulnerabilities_by_severity(Severity.high)\n\n    @property\n    def medium(self) -&gt; List[VulnerabilityItem]:\n        return self.vulnerabilities_by_severity(Severity.medium)\n\n    @property\n    def low(self) -&gt; List[VulnerabilityItem]:\n        return self.vulnerabilities_by_severity(Severity.low)\n\n    @property\n    def distribution(self) -&gt; Counter[Severity]:\n        dist: typing.Counter[Severity] = Counter()\n        for vulnerability in self.vulnerabilities:\n            if vulnerability.severity:\n                dist[vulnerability.severity] += 1\n        return dist\n\n    def vulnerabilities_by_severity(\n        self, severity: Severity\n    ) -&gt; List[VulnerabilityItem]:\n        return [v for v in self.vulnerabilities if v.severity == severity]\n\n    def sort(self, descending: bool = True, use_cvss: bool = False) -&gt; None:\n        \"\"\"Sorts the vulnerabilities by severity in place.\n\n        A wrapper around `vulnerabilities.sort` that sorts by severity,\n        then optionally by CVSS score to break ties.\n\n        Parameters\n        ----------\n        descending : bool, optional\n            Whether to sort in descending order, by default True\n            Equivalent to `reverse=True` in `sorted()`.\n        use_cvss : bool, optional\n            Whether to use CVSS score to determine sorting order\n            when items have identical severity, by default False\n            This is somewhat experimental and may be removed in the future.\n        \"\"\"\n\n        def cmp(v1: VulnerabilityItem, v2: VulnerabilityItem) -&gt; int:\n            if v1.severity &gt; v2.severity:\n                return 1\n            elif v1.severity &lt; v2.severity:\n                return -1\n            if not use_cvss:\n                return 0\n            diff = v1.get_cvss_score(self.scanner) - v2.get_cvss_score(self.scanner)\n            if diff &gt; 0:\n                return 1\n            elif diff &lt; 0:\n                return -1\n            return 0\n\n        self.vulnerabilities.sort(key=functools.cmp_to_key(cmp), reverse=descending)\n\n    @cached_property\n    def cvss_scores(self) -&gt; List[float]:\n        \"\"\"Returns a list of CVSS scores for each vulnerability.\n        Vulnerabilities with a score of `None` are omitted.\n\n        Returns\n        ----\n        List[Optional[float]]\n            A list of CVSS scores for each vulnerability.\n        \"\"\"\n        return list(\n            filter(None, [v.get_cvss_score(self.scanner) for v in self.vulnerabilities])\n        )\n\n    def top_vulns(self, n: int = 5, fixable: bool = False) -&gt; List[VulnerabilityItem]:\n        \"\"\"Returns the n most severe vulnerabilities.\n\n\n        Parameters\n        ----------\n        n : int\n            The maximum number of vulnerabilities to return.\n        fixable : bool\n            If `True`, only vulnerabilities with a fix version are returned.\n\n        Returns\n        -------\n        List[VulnerabilityItem]\n            The n most severe vulnerabilities.\n\n        \"\"\"\n        vulns: Iterable[VulnerabilityItem] = []\n        if fixable:\n            vulns = self.fixable\n        else:\n            vulns = self.vulnerabilities\n        vulns = filter(lambda v: v.get_cvss_score(self.scanner) is not None, vulns)\n        return sorted(\n            vulns, key=lambda v: v.get_cvss_score(self.scanner), reverse=True\n        )[:n]\n\n    def has_cve(self, cve_id: str, case_sensitive: bool = False) -&gt; bool:\n        \"\"\"Whether or not the report contains a vulnerability with the given CVE ID.\n\n        Parameters\n        ----------\n        cve_id : str\n            The CVE ID to search for.\n\n        Returns\n        -------\n        bool\n            Report contains the a vulnerability with the given CVE ID.\n        \"\"\"\n        return self.vuln_with_cve(cve_id, case_sensitive) is not None\n\n    def has_description(self, description: str, case_sensitive: bool = False) -&gt; bool:\n        \"\"\"Whether or not the report contains a vulnerability whose description contains the given string.\n\n        Parameters\n        ----------\n        description : str\n            The string to search for in the descriptions.\n        case_sensitive : bool\n            Case sensitive search, by default False\n\n        Returns\n        -------\n        bool\n            The report contains a vulnerability whose description contains the given string.\n        \"\"\"\n        for _ in self.vulns_with_description(description, case_sensitive):\n            return True\n        return False\n\n    def has_package(self, package: str, case_sensitive: bool = False) -&gt; bool:\n        \"\"\"Whether or not the report contains a vulnerability affecting the given package.\n\n        Parameters\n        ----------\n        package : str\n            Name of the package to search for.\n        case_sensitive : bool\n            Case sensitive search, by default False\n\n        Returns\n        -------\n        bool\n            The given package is affected by a vulnerability in the report.\n        \"\"\"\n        for _ in self.vulns_with_package(package, case_sensitive):\n            return True\n        return False\n\n    def vuln_with_cve(\n        self, cve: str, case_sensitive: bool = False\n    ) -&gt; Optional[VulnerabilityItem]:\n        \"\"\"Returns a vulnerability with the specified CVE ID if it exists in the report.\n\n        Parameters\n        ----------\n        cve : str\n            The CVE ID of the vulnerability to return.\n        case_sensitive : bool\n            Case sensitive search, by default False\n\n        Returns\n        -------\n        Optional[VulnerabilityItem]\n            A vulnerability with the specified CVE ID if it exists, otherwise `None`.\n        \"\"\"\n        for vuln in self.vulnerabilities:\n            if vuln.id is None:\n                continue\n            vuln_id = vuln.id\n            if not case_sensitive:\n                vuln_id = vuln.id.lower()\n                cve = cve.lower()\n            if vuln_id == cve:\n                return vuln\n        return None\n\n    def vulns_with_package(\n        self, package: str, case_sensitive: bool = False\n    ) -&gt; Iterable[VulnerabilityItem]:\n        \"\"\"Generator that yields all vulnerabilities that affect the given package.\n\n        Parameters\n        ----------\n        package : str\n            The package name to search for.\n        case_sensitive : bool\n            Case sensitive search, by default False\n\n        Yields\n        ------\n        VulnerabilityItem\n            Vulnerability that affects the given package.\n        \"\"\"\n        for vuln in self.vulnerabilities:\n            if vuln.package is None:\n                continue\n            vuln_package = vuln.package\n            if not case_sensitive:\n                vuln_package = vuln.package.lower()\n                package = package.lower()\n            if vuln_package == package:\n                yield vuln\n\n    def vulns_with_description(\n        self, description: str, case_sensitive: bool = False\n    ) -&gt; Iterable[VulnerabilityItem]:\n        \"\"\"Generator that yields all vulnerabilities whose description contains the given string.\n\n        Parameters\n        ----------\n        description : str\n            The string to search for in vulnerability descriptions.\n        case_sensitive : bool\n            Case sensitive search, by default False\n\n        Yields\n        ------\n        VulnerabilityItem\n            Vulnerability whose description contains the given string.\n        \"\"\"\n        for vuln in self.vulnerabilities:\n            if vuln.description is None:\n                continue\n            vuln_description = vuln.description\n            if not case_sensitive:\n                description = description.lower()\n                vuln_description = vuln_description.lower()\n            if description in vuln_description:\n                yield vuln\n</code></pre>"}, {"location": "reference/models/scanner/#harborapi.models.scanner.HarborVulnerabilityReport.generated_at", "title": "<code>generated_at = Field(None, description='The time the vulnerability report was generated.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/scanner/#harborapi.models.scanner.HarborVulnerabilityReport.artifact", "title": "<code>artifact = Field(default=None, description='The scanned artifact.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/scanner/#harborapi.models.scanner.HarborVulnerabilityReport.scanner", "title": "<code>scanner = Field(default=None, description='The scanner used to generate the report.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/scanner/#harborapi.models.scanner.HarborVulnerabilityReport.severity", "title": "<code>severity = Field(default=Severity.unknown, description='The overall severity of the vulnerabilities.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/scanner/#harborapi.models.scanner.HarborVulnerabilityReport.vulnerabilities", "title": "<code>vulnerabilities = Field(default_factory=list, description='The list of vulnerabilities found.')</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/scanner/#harborapi.models.scanner.HarborVulnerabilityReport.model_config", "title": "<code>model_config = ConfigDict(ignored_types=(cached_property,))</code>  <code>class-attribute</code> <code>instance-attribute</code>", "text": ""}, {"location": "reference/models/scanner/#harborapi.models.scanner.HarborVulnerabilityReport.fixable", "title": "<code>fixable</code>  <code>property</code>", "text": ""}, {"location": "reference/models/scanner/#harborapi.models.scanner.HarborVulnerabilityReport.unfixable", "title": "<code>unfixable</code>  <code>property</code>", "text": ""}, {"location": "reference/models/scanner/#harborapi.models.scanner.HarborVulnerabilityReport.critical", "title": "<code>critical</code>  <code>property</code>", "text": ""}, {"location": "reference/models/scanner/#harborapi.models.scanner.HarborVulnerabilityReport.high", "title": "<code>high</code>  <code>property</code>", "text": ""}, {"location": "reference/models/scanner/#harborapi.models.scanner.HarborVulnerabilityReport.medium", "title": "<code>medium</code>  <code>property</code>", "text": ""}, {"location": "reference/models/scanner/#harborapi.models.scanner.HarborVulnerabilityReport.low", "title": "<code>low</code>  <code>property</code>", "text": ""}, {"location": "reference/models/scanner/#harborapi.models.scanner.HarborVulnerabilityReport.distribution", "title": "<code>distribution</code>  <code>property</code>", "text": ""}, {"location": "reference/models/scanner/#harborapi.models.scanner.HarborVulnerabilityReport.cvss_scores", "title": "<code>cvss_scores</code>  <code>cached</code> <code>property</code>", "text": "<p>Returns a list of CVSS scores for each vulnerability. Vulnerabilities with a score of <code>None</code> are omitted.</p> <p>Returns:</p> Type Description <code>List[Optional[float]]</code> <p>A list of CVSS scores for each vulnerability.</p>"}, {"location": "reference/models/scanner/#harborapi.models.scanner.HarborVulnerabilityReport.__repr__", "title": "<code>__repr__()</code>", "text": "Source code in <code>harborapi/models/scanner.py</code> <pre><code>def __repr__(self) -&gt; str:\n    return f\"HarborVulnerabilityReport(generated_at={self.generated_at}, artifact={self.artifact}, scanner={self.scanner}, severity={self.severity}, vulnerabilities=list(len={len(self.vulnerabilities)}))\"\n</code></pre>"}, {"location": "reference/models/scanner/#harborapi.models.scanner.HarborVulnerabilityReport.vulnerabilities_by_severity", "title": "<code>vulnerabilities_by_severity(severity)</code>", "text": "Source code in <code>harborapi/models/scanner.py</code> <pre><code>def vulnerabilities_by_severity(\n    self, severity: Severity\n) -&gt; List[VulnerabilityItem]:\n    return [v for v in self.vulnerabilities if v.severity == severity]\n</code></pre>"}, {"location": "reference/models/scanner/#harborapi.models.scanner.HarborVulnerabilityReport.sort", "title": "<code>sort(descending=True, use_cvss=False)</code>", "text": "<p>Sorts the vulnerabilities by severity in place.</p> <p>A wrapper around <code>vulnerabilities.sort</code> that sorts by severity, then optionally by CVSS score to break ties.</p> <p>Parameters:</p> Name Type Description Default <code>descending</code> <code>bool</code> <p>Whether to sort in descending order, by default True Equivalent to <code>reverse=True</code> in <code>sorted()</code>.</p> <code>True</code> <code>use_cvss</code> <code>bool</code> <p>Whether to use CVSS score to determine sorting order when items have identical severity, by default False This is somewhat experimental and may be removed in the future.</p> <code>False</code> Source code in <code>harborapi/models/scanner.py</code> <pre><code>def sort(self, descending: bool = True, use_cvss: bool = False) -&gt; None:\n    \"\"\"Sorts the vulnerabilities by severity in place.\n\n    A wrapper around `vulnerabilities.sort` that sorts by severity,\n    then optionally by CVSS score to break ties.\n\n    Parameters\n    ----------\n    descending : bool, optional\n        Whether to sort in descending order, by default True\n        Equivalent to `reverse=True` in `sorted()`.\n    use_cvss : bool, optional\n        Whether to use CVSS score to determine sorting order\n        when items have identical severity, by default False\n        This is somewhat experimental and may be removed in the future.\n    \"\"\"\n\n    def cmp(v1: VulnerabilityItem, v2: VulnerabilityItem) -&gt; int:\n        if v1.severity &gt; v2.severity:\n            return 1\n        elif v1.severity &lt; v2.severity:\n            return -1\n        if not use_cvss:\n            return 0\n        diff = v1.get_cvss_score(self.scanner) - v2.get_cvss_score(self.scanner)\n        if diff &gt; 0:\n            return 1\n        elif diff &lt; 0:\n            return -1\n        return 0\n\n    self.vulnerabilities.sort(key=functools.cmp_to_key(cmp), reverse=descending)\n</code></pre>"}, {"location": "reference/models/scanner/#harborapi.models.scanner.HarborVulnerabilityReport.top_vulns", "title": "<code>top_vulns(n=5, fixable=False)</code>", "text": "<p>Returns the n most severe vulnerabilities.</p> <p>Parameters:</p> Name Type Description Default <code>n</code> <code>int</code> <p>The maximum number of vulnerabilities to return.</p> <code>5</code> <code>fixable</code> <code>bool</code> <p>If <code>True</code>, only vulnerabilities with a fix version are returned.</p> <code>False</code> <p>Returns:</p> Type Description <code>List[VulnerabilityItem]</code> <p>The n most severe vulnerabilities.</p> Source code in <code>harborapi/models/scanner.py</code> <pre><code>def top_vulns(self, n: int = 5, fixable: bool = False) -&gt; List[VulnerabilityItem]:\n    \"\"\"Returns the n most severe vulnerabilities.\n\n\n    Parameters\n    ----------\n    n : int\n        The maximum number of vulnerabilities to return.\n    fixable : bool\n        If `True`, only vulnerabilities with a fix version are returned.\n\n    Returns\n    -------\n    List[VulnerabilityItem]\n        The n most severe vulnerabilities.\n\n    \"\"\"\n    vulns: Iterable[VulnerabilityItem] = []\n    if fixable:\n        vulns = self.fixable\n    else:\n        vulns = self.vulnerabilities\n    vulns = filter(lambda v: v.get_cvss_score(self.scanner) is not None, vulns)\n    return sorted(\n        vulns, key=lambda v: v.get_cvss_score(self.scanner), reverse=True\n    )[:n]\n</code></pre>"}, {"location": "reference/models/scanner/#harborapi.models.scanner.HarborVulnerabilityReport.has_cve", "title": "<code>has_cve(cve_id, case_sensitive=False)</code>", "text": "<p>Whether or not the report contains a vulnerability with the given CVE ID.</p> <p>Parameters:</p> Name Type Description Default <code>cve_id</code> <code>str</code> <p>The CVE ID to search for.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>Report contains the a vulnerability with the given CVE ID.</p> Source code in <code>harborapi/models/scanner.py</code> <pre><code>def has_cve(self, cve_id: str, case_sensitive: bool = False) -&gt; bool:\n    \"\"\"Whether or not the report contains a vulnerability with the given CVE ID.\n\n    Parameters\n    ----------\n    cve_id : str\n        The CVE ID to search for.\n\n    Returns\n    -------\n    bool\n        Report contains the a vulnerability with the given CVE ID.\n    \"\"\"\n    return self.vuln_with_cve(cve_id, case_sensitive) is not None\n</code></pre>"}, {"location": "reference/models/scanner/#harborapi.models.scanner.HarborVulnerabilityReport.has_description", "title": "<code>has_description(description, case_sensitive=False)</code>", "text": "<p>Whether or not the report contains a vulnerability whose description contains the given string.</p> <p>Parameters:</p> Name Type Description Default <code>description</code> <code>str</code> <p>The string to search for in the descriptions.</p> required <code>case_sensitive</code> <code>bool</code> <p>Case sensitive search, by default False</p> <code>False</code> <p>Returns:</p> Type Description <code>bool</code> <p>The report contains a vulnerability whose description contains the given string.</p> Source code in <code>harborapi/models/scanner.py</code> <pre><code>def has_description(self, description: str, case_sensitive: bool = False) -&gt; bool:\n    \"\"\"Whether or not the report contains a vulnerability whose description contains the given string.\n\n    Parameters\n    ----------\n    description : str\n        The string to search for in the descriptions.\n    case_sensitive : bool\n        Case sensitive search, by default False\n\n    Returns\n    -------\n    bool\n        The report contains a vulnerability whose description contains the given string.\n    \"\"\"\n    for _ in self.vulns_with_description(description, case_sensitive):\n        return True\n    return False\n</code></pre>"}, {"location": "reference/models/scanner/#harborapi.models.scanner.HarborVulnerabilityReport.has_package", "title": "<code>has_package(package, case_sensitive=False)</code>", "text": "<p>Whether or not the report contains a vulnerability affecting the given package.</p> <p>Parameters:</p> Name Type Description Default <code>package</code> <code>str</code> <p>Name of the package to search for.</p> required <code>case_sensitive</code> <code>bool</code> <p>Case sensitive search, by default False</p> <code>False</code> <p>Returns:</p> Type Description <code>bool</code> <p>The given package is affected by a vulnerability in the report.</p> Source code in <code>harborapi/models/scanner.py</code> <pre><code>def has_package(self, package: str, case_sensitive: bool = False) -&gt; bool:\n    \"\"\"Whether or not the report contains a vulnerability affecting the given package.\n\n    Parameters\n    ----------\n    package : str\n        Name of the package to search for.\n    case_sensitive : bool\n        Case sensitive search, by default False\n\n    Returns\n    -------\n    bool\n        The given package is affected by a vulnerability in the report.\n    \"\"\"\n    for _ in self.vulns_with_package(package, case_sensitive):\n        return True\n    return False\n</code></pre>"}, {"location": "reference/models/scanner/#harborapi.models.scanner.HarborVulnerabilityReport.vuln_with_cve", "title": "<code>vuln_with_cve(cve, case_sensitive=False)</code>", "text": "<p>Returns a vulnerability with the specified CVE ID if it exists in the report.</p> <p>Parameters:</p> Name Type Description Default <code>cve</code> <code>str</code> <p>The CVE ID of the vulnerability to return.</p> required <code>case_sensitive</code> <code>bool</code> <p>Case sensitive search, by default False</p> <code>False</code> <p>Returns:</p> Type Description <code>Optional[VulnerabilityItem]</code> <p>A vulnerability with the specified CVE ID if it exists, otherwise <code>None</code>.</p> Source code in <code>harborapi/models/scanner.py</code> <pre><code>def vuln_with_cve(\n    self, cve: str, case_sensitive: bool = False\n) -&gt; Optional[VulnerabilityItem]:\n    \"\"\"Returns a vulnerability with the specified CVE ID if it exists in the report.\n\n    Parameters\n    ----------\n    cve : str\n        The CVE ID of the vulnerability to return.\n    case_sensitive : bool\n        Case sensitive search, by default False\n\n    Returns\n    -------\n    Optional[VulnerabilityItem]\n        A vulnerability with the specified CVE ID if it exists, otherwise `None`.\n    \"\"\"\n    for vuln in self.vulnerabilities:\n        if vuln.id is None:\n            continue\n        vuln_id = vuln.id\n        if not case_sensitive:\n            vuln_id = vuln.id.lower()\n            cve = cve.lower()\n        if vuln_id == cve:\n            return vuln\n    return None\n</code></pre>"}, {"location": "reference/models/scanner/#harborapi.models.scanner.HarborVulnerabilityReport.vulns_with_package", "title": "<code>vulns_with_package(package, case_sensitive=False)</code>", "text": "<p>Generator that yields all vulnerabilities that affect the given package.</p> <p>Parameters:</p> Name Type Description Default <code>package</code> <code>str</code> <p>The package name to search for.</p> required <code>case_sensitive</code> <code>bool</code> <p>Case sensitive search, by default False</p> <code>False</code> <p>Yields:</p> Type Description <code>VulnerabilityItem</code> <p>Vulnerability that affects the given package.</p> Source code in <code>harborapi/models/scanner.py</code> <pre><code>def vulns_with_package(\n    self, package: str, case_sensitive: bool = False\n) -&gt; Iterable[VulnerabilityItem]:\n    \"\"\"Generator that yields all vulnerabilities that affect the given package.\n\n    Parameters\n    ----------\n    package : str\n        The package name to search for.\n    case_sensitive : bool\n        Case sensitive search, by default False\n\n    Yields\n    ------\n    VulnerabilityItem\n        Vulnerability that affects the given package.\n    \"\"\"\n    for vuln in self.vulnerabilities:\n        if vuln.package is None:\n            continue\n        vuln_package = vuln.package\n        if not case_sensitive:\n            vuln_package = vuln.package.lower()\n            package = package.lower()\n        if vuln_package == package:\n            yield vuln\n</code></pre>"}, {"location": "reference/models/scanner/#harborapi.models.scanner.HarborVulnerabilityReport.vulns_with_description", "title": "<code>vulns_with_description(description, case_sensitive=False)</code>", "text": "<p>Generator that yields all vulnerabilities whose description contains the given string.</p> <p>Parameters:</p> Name Type Description Default <code>description</code> <code>str</code> <p>The string to search for in vulnerability descriptions.</p> required <code>case_sensitive</code> <code>bool</code> <p>Case sensitive search, by default False</p> <code>False</code> <p>Yields:</p> Type Description <code>VulnerabilityItem</code> <p>Vulnerability whose description contains the given string.</p> Source code in <code>harborapi/models/scanner.py</code> <pre><code>def vulns_with_description(\n    self, description: str, case_sensitive: bool = False\n) -&gt; Iterable[VulnerabilityItem]:\n    \"\"\"Generator that yields all vulnerabilities whose description contains the given string.\n\n    Parameters\n    ----------\n    description : str\n        The string to search for in vulnerability descriptions.\n    case_sensitive : bool\n        Case sensitive search, by default False\n\n    Yields\n    ------\n    VulnerabilityItem\n        Vulnerability whose description contains the given string.\n    \"\"\"\n    for vuln in self.vulnerabilities:\n        if vuln.description is None:\n            continue\n        vuln_description = vuln.description\n        if not case_sensitive:\n            description = description.lower()\n            vuln_description = vuln_description.lower()\n        if description in vuln_description:\n            yield vuln\n</code></pre>"}, {"location": "reference/models/scanner/#harborapi.models.scanner.most_severe", "title": "<code>most_severe(severities)</code>", "text": "<p>Returns the highest severity in a list of severities.</p> Source code in <code>harborapi/models/scanner.py</code> <pre><code>def most_severe(severities: Iterable[Severity]) -&gt; Severity:\n    \"\"\"Returns the highest severity in a list of severities.\"\"\"\n    return max(severities, key=lambda x: SEVERITY_PRIORITY[x], default=Severity.unknown)\n</code></pre>"}, {"location": "reference/models/scanner/#harborapi.models.scanner.sort_distribution", "title": "<code>sort_distribution(distribution)</code>", "text": "<p>Turn a counter of Severities into a sorted list of (severity, count) tuples.</p> Source code in <code>harborapi/models/scanner.py</code> <pre><code>def sort_distribution(distribution: \"Counter[Severity]\") -&gt; List[Tuple[Severity, int]]:\n    \"\"\"Turn a counter of Severities into a sorted list of (severity, count) tuples.\"\"\"\n    return [\n        (k, v)\n        for k, v in sorted(distribution.items(), key=lambda x: SEVERITY_PRIORITY[x[0]])\n    ]\n</code></pre>"}, {"location": "usage/", "title": "Usage", "text": "<p>The <code>harborapi</code> library provides a class called <code>HarborAsyncClient</code> that can be used to interact with the Harbor API. To use it, you need to create a <code>HarborAsyncClient</code> instance with your Harbor instance's API URL, as well as some authentication credentials.</p> <p>The endpoint methods in the <code>HarborAsyncClient</code> class are all asynchronous, which means they can only be called inside an async function using the <code>await</code> keyword. Here's an example of using the <code>get_project()</code> method:</p> <pre><code>import asyncio\nfrom harborapi import HarborAsyncClient\n\nclient = HarborAsyncClient(\n    url=\"https://harbor.example.com/api/v2.0\",\n    username=\"admin\",\n    secret=\"password\",\n)\n\nasync def main() -&gt; None:\n    project = await client.get_project(\"library\")\n    print(project)\n\nasyncio.run(main())\n</code></pre> <p>For a full list of implemented endpoints on <code>HarborAsyncClient</code>, check out the Endpoints page. If you're new to asyncio, you can find a good introduction in the FastAPI package's docs. You can also find more examples in the Recipes page. Lastly, the offical Python asyncio documentation contains the complete reference for the <code>asyncio</code> module as well as examples of how it's used.</p> <p>There are several ways to authenticate with the Harbor API, and they are documented on the Authentication page. The Methods page shows basic usage of the different types of methods exposed by the client object.</p>"}, {"location": "usage/async-sync/", "title": "Async vs sync", "text": ""}, {"location": "usage/async-sync/#async-client", "title": "Async client", "text": "<p><code>harborapi</code> is predominantly focused on providing an async API for interacting with the Harbor API. The various code snippets on these pages all assume the instantiated client is <code>HarborAsyncClient</code>, and it is running within an asynchronous function where <code>await</code> can be used.</p> <p>If you only intend to use the Async Client, skip this page.</p>"}, {"location": "usage/async-sync/#non-async-client", "title": "Non-async client", "text": "<p><code>harborapi</code> also provides <code>HarborClient</code> as a non-async alternative. <code>HarborClient</code> provides all the same methods as <code>HarborAsyncClient</code>, except it schedules the asynchronous methods to run as coroutines in the event loop by intercepting attribute access on the class.</p> <p>All* methods on <code>HarborClient</code> have the same interface as the methods on <code>HarborAsyncClient</code>, except <code>await</code> is not required.</p> <p>When using the non-async client <code>HarborClient</code>, all methods should be invoked identically to methods on <code>HarborAsyncClient</code>, except the <code>await</code> keyword in front of the method call must be omitted.</p>"}, {"location": "usage/async-sync/#example", "title": "Example", "text": "<pre><code>import asyncio\nfrom harborapi import HarborClient\n\nclient = HarborClient(\n    url=\"https://your-harbor-instance.com/api/v2.0\",\n    username=\"username\",\n    secret=\"secret\",\n)\n\nres = client.get_current_user()\n</code></pre> <p>It is not recommended to use this client, but is provided as an alternative if you absolutely don't want to deal with anything related to <code>asyncio</code> yourself. Due to the metaprogramming involved in making this non-async client, autocompletion and type hints are not available for the various methods.</p> <p>* Private methods (prefixed with <code>_</code>) and HTTP methods such as <code>get</code>, <code>post</code>, etc. cannot be called without <code>await</code>.</p>"}, {"location": "usage/authentication/", "title": "Authentication", "text": "<p>The client can be instatiated with either a username and password, a base64-encoded HTTP Basic Access Authentication Token, or a Harbor JSON credentials file.</p>"}, {"location": "usage/authentication/#username-and-password", "title": "Username and password", "text": "<p>Username and password (titled <code>secret</code> to conform with Harbor naming schemes) can be used by instantiating the client with the <code>username</code> and <code>secret</code> parameters. This is the most straight forward method of authenticating.</p> <pre><code>from harborapi import HarborAsyncClient\n\nclient = HarborAsyncClient(\n    url=\"https://your-harbor-instance.com/api/v2.0\",\n    username=\"username\",\n    secret=\"secret\"\n)\n</code></pre> <p>In order to avoid hard-coding secrets in your application, you might want to consider using environment variables to store the username and password:</p> <pre><code>import os\nfrom harborapi import HarborAsyncClient\n\nclient = HarborAsyncClient(\n    url=\"https://your-harbor-instance.com/api/v2.0\",\n    username=os.environ[\"HARBOR_USERNAME\"],\n    secret=os.environ[\"HARBOR_PASSWORD\"]\n)\n</code></pre>"}, {"location": "usage/authentication/#basic-access-authentication-aredentials", "title": "Basic access authentication aredentials", "text": "<p>In place of <code>username</code> and <code>secret</code>, a Base64-encoded HTTP Basic Access Authentication credentials string can be used to authenticate. This string is simply <code>username:secret</code> encoded to Base64, and as such is not any more secure than username and password authentication; it only obscures the text.</p> <pre><code>from harborapi import HarborAsyncClient\n\nclient = HarborAsyncClient(\n    url=\"https://your-harbor-instance.com/api/v2.0\",\n    basicauth=\"base64_basicauth_here\",\n)\n</code></pre> <p>Again, it might be pertinent to store this in your environment variables:</p> <pre><code>import os\nfrom harborapi import HarborAsyncClient\n\nclient = HarborAsyncClient(\n    url=\"https://your-harbor-instance.com/api/v2.0\",\n    basicauth=os.environ[\"HARBOR_BASICAUTH\"],\n)\n</code></pre>"}, {"location": "usage/authentication/#credentials-file", "title": "Credentials file", "text": "<p>When creating Robot accounts, the robot account's credentials can be exported as a JSON file. The <code>credentials_file</code> parameter takes an argument specifying the path to such a file.</p> <pre><code>from harborapi import HarborAsyncClient\n\nclient = HarborAsyncClient(\n    url=\"https://your-harbor-instance.com/api/v2.0\",\n    credentials_file=\"/path/to/file.json\", # can also be Path object\n)\n</code></pre> <p>For simple project-level robot accounts, using the Robot Accounts tab in the web interface for a project should be sufficient. However, if you require a Robot account with privileges that go beyond the ones offered in the Web UI, such as controlling user groups and replication, managing multiple projects, starting scans, or managing the system configuration, you will need to create a system-level Robot account through the API. See Creating Privileged Robot Accounts for information about how to create system-level Robot accounts with such extended privileges using <code>harborapi</code>.</p>"}, {"location": "usage/creating-system-robot/", "title": "Privileged robot accounts", "text": "<p>By default, the Robot account creation process in the Harbor web interface only allows for a limited permission scope when creating new Robot accounts. As of Harbor v.2.5.2, this is still the case.</p> <p>In order to circumvent this limitation, one can create robot accounts through the API with system resource permissions that go beyond the options offered in the web interface.</p> <p>Info</p> <p>This page is based on this comment by Harbor developer wy65701436. Also check out the Harbor source code for more information on all the possible resource permissions that can be granted to Robot accounts.</p>"}, {"location": "usage/creating-system-robot/#example-robot-with-project-creation-privileges", "title": "Example: Robot with project creation privileges", "text": "<p>Following the example provided in the GitHub comment above, <code>harborapi</code> provides <code>HarborAsyncClient.create_robot</code> to achieve the same functionality.</p> <p>When creating privileged robot accounts, <code>HarborAsyncClient</code> must be instantiated with a privileged user's credentials.</p> <pre><code>from harborapi.models import RobotCreate, RobotPermission, Access\n\n# Client is instantiated with administrator account.\n# This is required to create robot accounts with system resource permissions.\n\nawait client.create_robot(\n    RobotCreate(\n        name=\"from_api\",\n        description=\"Created from harborapi Python client\",\n        secret=\"Secret1234\",\n        level=\"system\",\n        duration=30,\n        permissions=[\n            RobotPermission(\n                kind=\"system\",\n                namespace=\"/\",\n                access=[\n                    Access(resource=\"project\", action=\"create\"),\n                ],\n            )\n        ],\n    )\n)\n</code></pre> <p>Produces:</p> <pre><code>RobotCreated(\n    id=11,\n    name='robot$from_api',\n    secret='tBuDZ700tPkKLNQ0z1EAYndMOFEzvgM8',\n    creation_time=datetime.datetime(2022, 7, 14, 10, 3, 40, 906000, tzinfo=datetime.timezone.utc),\n    expires_at=1660385020,\n)\n</code></pre>"}, {"location": "usage/creating-system-robot/#saving-credentials-to-a-file", "title": "Saving credentials to a file", "text": "<p>The resulting Robot account can be saved to a Harbor credentials file by providing an argument to the <code>path</code> parameter specifying the location to save the credentials to. The <code>path</code> argument can be either a string or a pathlib.Path object.</p> <pre><code>await client.create_robot(\n    RobotCreate(...),\n    path=\"/path/to/file.json\",\n)\n</code></pre> <p>By default, the file must not already exist. This can be overriden by adding <code>overwrite=True</code>, which overwrites the file if it already exists.</p> <pre><code>await client.create_robot(\n    RobotCreate(...),\n    path=\"/path/to/file.json\",\n    overwrite=True\n)\n</code></pre> <p>The resulting file can then be used when instantiating <code>HarborAsyncClient</code> to authenticate with the Robot account.</p> <pre><code>from harborapi import HarborAsyncClient\n\nclient = HarborAsyncClient(\n    url=\"https://your-harbor-instance.com/api/v2.0\",\n    credentials_file=\"/path/to/file.json\",\n)\n</code></pre> <p>For more information, see <code>HarborAsyncClient.create_robot</code> and <code>HarborAsyncClient.__init__</code></p>"}, {"location": "usage/exceptions/", "title": "Exceptions", "text": "<p>All methods that interact with the Harbor API raise exceptions derived from <code>harborapi.exceptions.StatusError</code> for responses with non-2xx status codes unless otherwise specified.</p>"}, {"location": "usage/exceptions/#response", "title": "Response", "text": "<p>Each exception contains the response that caused the exception to be raised, and the status code of the response. The response object is a <code>httpx.Response</code> object.</p> <pre><code>try:\n    await client.delete_artifact(\"project\", \"repository\", \"latest\")\nexcept StatusError as e:\n    print(e.response)\n    print(e.status_code) # or e.response.status_code\n</code></pre> <p>Through the response object, we can also get the corresponding <code>httpx.Request</code> through the <code>request</code> attribute.</p> <pre><code>e.response.request\n</code></pre>"}, {"location": "usage/exceptions/#granular-exception-handling", "title": "Granular exception handling", "text": "<p>If more granular exception handling is required, all documented HTTP exceptions in the API spec are implemented as discrete subclasses of <code>harborapi.exceptions.StatusError</code>.</p> <pre><code>from harborapi.exceptions import (\n    BadRequest,\n    Forbidden,\n    NotFound,\n    MethodNotAllowed,\n    Conflict,\n    Unauthorized,\n    PreconditionFailed,\n    UnsupportedMediaType,\n    InternalServerError,\n    StatusError\n)\n\nproject, repo, tag = \"testproj\", \"testrepo\", \"latest\"\n\ntry:\n    await client.delete_artifact(project, repo, tag)\nexcept NotFound as e:\n    print(f\"'{repo}:{tag}' not found for project '{project}'\")\nexcept StatusError as e:\n    # catch all other HTTP exceptions\n</code></pre>"}, {"location": "usage/exceptions/#inspecting-errors", "title": "Inspecting errors", "text": "<p>The <code>StatusError.errors</code> attribute is a list of <code>Error</code> objects that contains more detailed information about the error(s) that have occured.</p> <pre><code>try:\n    await client.delete_artifact(\"project\", \"repository\", \"latest\")\nexcept StatusError as e:\n    for error in e.errors:\n        print(error.code, error.message)\n</code></pre> <p>An <code>Error</code> object has the following structure:</p> <pre><code>class Error(BaseModel):\n    code: Optional[str] = Field(None, description=\"The error code\")\n    message: Optional[str] = Field(None, description=\"The error message\")\n</code></pre> <p>(It is likely that <code>code</code> and <code>message</code> are both not <code>None</code> on runtime, but the API specification states that both these fields are optional.)</p>"}, {"location": "usage/logging/", "title": "Logging", "text": "<p>The library uses the standard Python logging library for logging purposes, and provides a single logger named <code>harborapi</code>. The logger is disabled by default, but can be enabled if desired.</p>"}, {"location": "usage/logging/#enable-logging", "title": "Enable logging", "text": "<p>Logging can be enabled by passing in <code>logging=True</code> to the client constructor:</p> <pre><code>from harborapi import HarborAsyncClient\n\nclient = HarborAsyncClient(\n    url=\"https://harbor.example.com/api/v2.0\",\n    username=\"admin\",\n    secret=\"password\",\n    logging=True,\n)\n</code></pre> <p>Alternatively, it can be enabled by setting the <code>HARBORAPI_LOGGING</code> environment variable to <code>1</code>:</p> <pre><code>HARBORAPI_LOGGING=1 python myscript.py\n</code></pre> <p>When logging is enabled, the handler will be configured to log to stderr with the log level set to <code>INFO</code>.</p>"}, {"location": "usage/logging/#configure-logging", "title": "Configure logging", "text": "<p>Should you wish to configure the logger, you can import it and configure it as you would any other logger:</p> <pre><code>import logging\nfrom harborapi.log import logger\n\nlogger.setLevel(logging.DEBUG)\n# ... other changes to the logger\n</code></pre>"}, {"location": "usage/logging/#limitations", "title": "Limitations", "text": "<ul> <li>Currently, the library uses a single logger for all logging purposes. This means that it is not possible to enable logging for only a specific part of the library or individually configure loggers for multiple clients.</li> <li>Configuring logging for one <code>HarborAsyncClient</code> instance will affect all other instances, should you have multiple client instances.</li> <li>The library does not support changing the log level through the <code>HarborAsyncClient</code> constructor nor env vars. If you wish to change the log level, you must do so through the logger itself. See Configure logging for an example of how to do this.</li> <li>Logging to streams other than stderr is not directly supported through the <code>HarborAsyncClient</code> constructor. However, you can configure the logger object to change the handler or add one to log to a different stream.</li> </ul>"}, {"location": "usage/models/", "title": "Models", "text": "<p>Most client methods either return a Pydantic model or take one as an argument. You don't need to know anything about Pydantic to use the models, but it's a good idea to familiarize yourself with the basics through the Pydantic v1.x docs to get the most out of the library.</p> <p>All models are located in the <code>harborapi.models</code> module.</p> <pre><code>from harborapi.models import *\n</code></pre>"}, {"location": "usage/models/#pydantic-models", "title": "Pydantic models", "text": "<p>Through the Pydantic models, we get a lot of nice features for free, such as:</p> <ul> <li>Validation of data</li> <li>Automatic conversion of data types</li> <li>Utility functions for (de)serializing data</li> </ul> <p>We'll look at some of these features later, but first, let's look at how the models are used at a basic level.</p>"}, {"location": "usage/models/#using-models-returned-by-the-api", "title": "Using models returned by the API", "text": "<p>When calling a GET endpoint with a <code>get_*</code> method, we usually get a model instance back. For example, when calling the <code>get_project</code> method, we get a <code>Project</code> instance back:</p> <pre><code>import asyncio\nfrom harborapi import HarborAsyncClient\n\nclient = HarborAsyncClient(...)\n\nasync def main() -&gt; None:\n    project = await client.get_project(\"library\")\n\n\nasyncio.run(main())\n</code></pre> <p>In the IDE, we can see the various attributes the model instance has:</p> <p></p> <p>Also shown in the screenshot are the utility methods <code>json</code> and <code>dict</code>, which allows you to convert models to JSON and Python dictionaries, respectively.</p>"}, {"location": "usage/models/#using-models-to-create-and-update-resources", "title": "Using models to create and update resources", "text": "<p>Similar to how the <code>get_*</code> methods return models, the <code>create_*</code> and <code>update_*</code> methods take models as arguments. For example, the <code>create_project</code>method takes a <code>ProjectReq</code> model as an argument:</p> <pre><code>import asyncio\nfrom harborapi import HarborAsyncClient\nfrom harborapi.models import ProjectReq, ProjectMetadata\n\nclient = HarborAsyncClient(...)\n\nasync def main() -&gt; None:\n    location = await client.create_project(\n        ProjectReq(\n            project_name=\"test-project\",\n            public=True,\n            metadata=ProjectMetadata(\n                auto_scan=True,\n                enable_content_trust=True,\n            ),\n        )\n    )\n    print(location)\n\n\nasyncio.run(main())\n</code></pre>"}, {"location": "usage/models/#ide-autocompletion", "title": "IDE autocompletion", "text": "<p>When using the models, the IDE can help us out by showing us the available fields and their types. For example, when calling the <code>create_project</code> method, we know we need to pass a model to the method.</p> <p>The IDE tells us the name of the model to pass to the method:</p> <p></p> <p>Since we know all models can be imported from <code>harborapi.models</code>, all we have to do is to add:</p> <pre><code>from harborapi.models import ProjectReq\n</code></pre> <p>Again, we are assisted by the IDE when creating the model instance we pass to the method:</p> <p></p> <p>We get IDE autocompletion for the different fields when constructing the model instance:</p> <p></p> <p>When assigning a value to a field, we can see the type of the field:</p> <p></p> <p>Certain models contain fields that are of a different model type. For example, the <code>ProjectReq</code> model has a field named <code>metadata</code> which expects a <code>ProjectMetadata</code> instance. When assigning a value to such a field, we can see the type of the field:</p> <p></p> <p>First we need to import the model we want to use:</p> <pre><code>from harborapi.models import ProjectMetadata\n</code></pre> <p>After which, the IDE will help us construct the model instance:</p> <p></p> <p>The IDE used for demonstration (VSCode) does not show the Pydantic model field descriptions, however. So it's recommended to always check the documentation to gain a more complete understanding of the models:</p> <ul> <li><code>ProjectReq</code></li> <li><code>ProjectMetadata</code></li> </ul> <p>Unfortunately, the documentation does not yet generate clickable links to other models referenced in a model's field type, so you'll have to search for the model name in the sidebar or use the search field if a field type is not immediately clear to you. CTRL+F is your friend.</p>"}, {"location": "usage/models/#model-validation", "title": "Model validation", "text": "<p>Pydantic models validate the data they are given. This can take the form of checking that a given argument is of the correct type, or that it is within a certain range of values. Other validation methods include checking that a string matches a certain regular expression, or it is a valid URL, or is of a certain length. See the Pydantic docs for more information. The Data validation page also contains more in-depth information about validation.</p>"}, {"location": "usage/models/#validation", "title": "Validation", "text": "<p>When we fetch data from the API, it is validated through the models. For example, when we call the <code>get_project</code> method, we get a <code>Project</code> instance back. The model provides certain guarantees about the type of the data it contains. For example, the <code>project_id</code> field is guaranteed to be an <code>int</code> or <code>None</code>:</p> models.py (excerpt)<pre><code>class Project(BaseModel):\n    project_id: Optional[int] = Field(None, description=\"Project ID\")\n</code></pre> <p>Meaning that when we access the <code>project_id</code> field, we can be sure it is an <code>int</code> or <code>None</code>:</p> <pre><code>project = await client.get_project(\"library\")\nif project.project_id is not None:\n    new_id = project.project_id + 1 # Guaranteed to be an int\n</code></pre> <p>This guards against unexpected values returned by the API, and it allows us to write code that is more robust. Furtermore, should the API change in the future, the validation will fail and we will get an error. This is a good thing, as it allows us to catch breaking changes early. If you need to use a method that return a model that fails validation, you can use the <code>no_validation()</code> context manager to disable validation for that specific request.</p>"}, {"location": "usage/models/#type-coercion", "title": "Type coercion", "text": "<p>Fields will generally attempt to coerce a value to its target type if possible. By default, the <code>ProjectReq.registry_id</code> field expects an <code>int</code> argument:</p> <pre><code>&gt;&gt;&gt; from harborapi.models import ProjectReq\n&gt;&gt;&gt; ProjectReq(registry_id=\"123\")\nProjectReq(..., registry_id=123)\n</code></pre> <p>However, Pydantic provides some leniency with regards to types that fields accept as inputs, so we can pass in not only an <code>int</code>, but also a <code>str</code>, which is then converted to an <code>int</code>:</p> <pre><code>&gt;&gt;&gt; ProjectReq(registry_id=\"123\")\nProjectReq(..., registry_id=123)\n</code></pre> <p><code>str</code> fields such as <code>project_name</code> cannot convert <code>int</code> to <code>str</code>, however, so if we try to pass an integer value to the field, we get an error:</p> <pre><code>&gt;&gt;&gt; ProjectReq(project_name=123)\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n  File \"/Users/pederhan/Library/Application Support/hatch/env/virtual/harborapi/Utij2nsk/harborapi/lib/python3.10/site-packages/pydantic/main.py\", line 164, in __init__\n    __pydantic_self__.__pydantic_validator__.validate_python(data, self_instance=__pydantic_self__)\npydantic_core._pydantic_core.ValidationError: 1 validation error for ProjectReq\nproject_name\n  Input should be a valid string [type=string_type, input_value=123, input_type=int]\n    For further information visit https://errors.pydantic.dev/2.4/v/string_type\n</code></pre> <p>The same goes for passing arbitrary objects:</p> <pre><code>&gt;&gt;&gt; ProjectReq(project_name=object())\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n  File \"/Users/pederhan/Library/Application Support/hatch/env/virtual/harborapi/Utij2nsk/harborapi/lib/python3.10/site-packages/pydantic/main.py\", line 164, in __init__\n    __pydantic_self__.__pydantic_validator__.validate_python(data, self_instance=__pydantic_self__)\npydantic_core._pydantic_core.ValidationError: 1 validation error for ProjectReq\nproject_name\n  Input should be a valid string [type=string_type, input_value=&lt;object object at 0x1047fa280&gt;, input_type=object]\n    For further information visit https://errors.pydantic.dev/2.4/v/string_type\n</code></pre> <p>See the Pydantic docs on standard library types for more information about how coercion works.</p>"}, {"location": "usage/models/#string-fields-with-true-and-false-values-in-api-spec", "title": "String fields with 'true' and 'false' values in API spec", "text": "<p>Info</p> <p>This section only refers to the <code>ProjectMetadata</code> model. The other models are not affected by this as of Harbor API schema version 403b616</p> <p>For some reason, some model fields in the API spec that by all accounts should have been bools are actually string fields that accept <code>'true'</code> and <code>'false'</code>.</p> swagger.yaml (excerpt)<pre><code># ...\n  ProjectMetadata:\n    type: object\n    properties:\n      public:\n        type: string\n        description: 'The public status of the project. The valid values are \"true\", \"false\".'\n</code></pre> <p>This only affects the <code>ProjectMetadata</code> model, which contains a whopping 6 fields following this pattern:</p> <ul> <li><code>public</code></li> <li><code>enable_content_trust</code></li> <li><code>enable_content_trust_cosign</code></li> <li><code>prevent_vul</code></li> <li><code>auto_scan</code></li> <li><code>reuse_sys_cve_allowlist</code></li> </ul> <p>For compatibility with the API, the type of these fields in the model have not  been changed to <code>bool</code>. When you access these fields, their value will be one of the strings <code>'true'</code> or <code>'false'</code>:</p> <pre><code>project = await client.get_project(\"test-project\")\nassert project.metadata.public in [\"true\", \"false\"]\n</code></pre> <p>However, you can instantiate these fields with bools, and they will be converted to the appropriate strings once the model is created:</p> <pre><code>&gt;&gt;&gt; from harborapi.models import ProjectMetadata\n&gt;&gt;&gt; ProjectMetadata(\n    public=False,\n    enable_content_trust=True,\n)\nProjectMetadata(public='false', enable_content_trust='true', enable_content_trust_cosign=None, prevent_vul=None, severity=None, auto_scan=None, reuse_sys_cve_allowlist=None, retention_id=None)\n</code></pre> <p>With the model's custom field validator, the arguments are coerced into the strings <code>'true'</code> and <code>'false'</code>. This maintains compatibility with the API while allowing you to use bools in your code.</p> <p>So in general, when you assign to these fields, you don't need to think about this at all. Just use bools as you normally would:</p> <pre><code>&gt;&gt;&gt; metadata = ProjectMetadata()\n&gt;&gt;&gt; metadata.public = True\n&gt;&gt;&gt; metadata.enable_content_trust = False\n&gt;&gt;&gt; metadata\nProjectMetadata(public='true', enable_content_trust='false', enable_content_trust_cosign=None, prevent_vul=None, severity=None, auto_scan=None, reuse_sys_cve_allowlist=None, retention_id=None)\n</code></pre> <p>However, when you access them, you need to be aware that they are strings:</p> <pre><code>project = await client.get_project(\"test-project\")\n\nif project.metadata.public: # WRONG - will match 'false' too\n    print(\"Project is public\")\n\nif project.metadata.public == \"true\": # CORRECT\n    print(\"Project is public\")\n</code></pre> <p>This is an inconvenient API and very unpythonic, but it's the best we can do<sup>1</sup> without breaking compatibility with the Harbor API.</p> <p>Author's note</p> <p>It was decided to keep the offending fields as strings to maintain consistency with the API spec and avoid obscure bugs stemming from improper (de)serialization and validation.</p> <p>It's probably also a good idea to keep the models as close to the API spec as possible, so that the library doesn't diverge too much from the spec over time. There are, after all, a lot of endpoints and models to keep track of.</p> <ol> <li> <p>With the introduction of custom model serializers in Pydantic V2, we could convert the values to bools in Python, while still serializing them as strings in JSON format. However, this breaks compatibility with previous versions of <code>harborapi</code>, and would likely just lead to more confusion among users.\u00a0\u21a9</p> </li> </ol>"}, {"location": "usage/responselog/", "title": "Response log", "text": "<p>The <code>HarborAsyncClient</code> keeps track of all responses it receives in a response log. This is a <code>ResponseLog</code> object, which contains a list of <code>ResponseLogEntry</code> objects, and can be accessed via the <code>response_log</code> attribute of the client. Each entry contains the request URL, the request method, the response status code, the response duration, and the size of the response body.</p> <pre><code>from harborapi import HarborAsyncClient\n\nclient = HarborAsyncClient(...)\n\nawait client.get_system_info()\nawait client.get_system_info()\nawait client.get_system_info()\n\nprint(client.response_log)\n</code></pre> <pre><code>[\n    &lt;ResponseLogEntry [GET https://demo.goharbor.io/api/v2.0/systeminfo 200]&gt;,\n    &lt;ResponseLogEntry [GET https://demo.goharbor.io/api/v2.0/systeminfo 200]&gt;,\n    &lt;ResponseLogEntry [GET https://demo.goharbor.io/api/v2.0/systeminfo 200]&gt;,\n]\n</code></pre> <p><code>ResponseLog</code> behaves like a sized iterable and supports indexing, iteration and sizing:</p> <pre><code>client.response_log[0]\nclient.response_log[-1]\nclient.response_log[1:3]\nlen(client.response_log)\nfor response in client.response_log:\n    pass\n</code></pre>"}, {"location": "usage/responselog/#last-response", "title": "Last response", "text": "<p>The last response can be accessed via the <code>last_response</code> attribute of the client:</p> <pre><code>print(client.last_response)\n</code></pre> <pre><code>&lt;ResponseLogEntry [GET https://demo.goharbor.io/api/v2.0/systeminfo 200]&gt;\n</code></pre> <p>If no responses are stored, this returns <code>None</code>.</p>"}, {"location": "usage/responselog/#limiting-log-size", "title": "Limiting log size", "text": "<p>By specifying the <code>max_logs</code> parameter when constructing the client, the response log will be limited to the specified number of responses.</p> <pre><code>from harborapi import HarborAsyncClient\n\nclient = HarborAsyncClient(..., max_logs=2)\n\nawait client.get_system_info()\nawait client.get_system_info()\nawait client.get_system_info()\n\nprint(client.response_log)\n</code></pre> <pre><code>[\n    &lt;ResponseLogEntry [GET https://demo.goharbor.io/api/v2.0/systeminfo 200]&gt;,\n    &lt;ResponseLogEntry [GET https://demo.goharbor.io/api/v2.0/systeminfo 200]&gt;,\n]\n</code></pre> <p>The response log operates with a FIFO (first in, first out) policy, meaning that the oldest response will be removed when the log is full.</p>"}, {"location": "usage/responselog/#adjusting-the-limit", "title": "Adjusting the limit", "text": "<p>The maximum size of the response log can be adjusted on the fly with the <code>ResponseLog.resize()</code> method:</p> <pre><code>assert len(client.response_log) &gt; 3\nclient.response_log.resize(3)\nassert len(client.response_log) == 3\n</code></pre> <p><code>ResponseLog.resize()</code> accepts a single integer argument which specifies the new maximum size of the log. If the new size is smaller than the current size, the log discards the oldest responses until the new size is reached.</p>"}, {"location": "usage/responselog/#clear-the-log", "title": "Clear the log", "text": "<p>The response log can be cleared with the <code>ResponseLog.clear()</code> method:</p> <pre><code>client.response_log.clear()\nassert len(client.response_log) == 0\n</code></pre>"}, {"location": "usage/retry/", "title": "Retry", "text": "<p>The client supports retrying requests that fail due to network errors or server errors. This is useful for handling intermittent network issues or server issues. The retry functionality is powered by backoff. Most of the retry functionality is exposed through the <code>RetrySettings</code> class, which is used to configure the retry behavior.</p>"}, {"location": "usage/retry/#basic-configuration", "title": "Basic configuration", "text": "<p>Retrying is enabled by default and uses exponential backoff to retry requests for up to a minute. The behavior of the retry functionality can be customized by passing a <code>RetrySettings</code> object to the client constructor.</p> <pre><code>from harborapi import HarborAsyncClient\nfrom harborapi.retry import RetrySettings\n\nclient = HarborAsyncClient(\n    ...,\n    retry=RetrySettings(\n        max_tries=5,\n        max_time=120,\n    ),\n)\n</code></pre> <p>The default waiting strategy uses exponential backoff (Wikipedia, Google), which is represented internally by the <code>backoff.expo</code> function. See Advanced configuration for how to modify and/or replace the waiting strategy.</p>"}, {"location": "usage/retry/#changing-configuration", "title": "Changing configuration", "text": "<p>The configuration can be changed at any time by modifying the <code>retry</code> attribute on the client object.</p> <pre><code>client.retry.max_tries = 10\nclient.retry.max_time = 300\n</code></pre> <p>Or by replacing it altogether:</p> <pre><code>client.retry = RetrySettings(\n    max_tries=10,\n    max_time=300,\n)\n</code></pre>"}, {"location": "usage/retry/#validation", "title": "Validation", "text": "<p>Pydantic will attempt to validate the assignments, so invalid values will raise a <code>ValidationError</code>.</p> <pre><code>client.retry.max_tries = -1\n</code></pre> <p>Results in the following error:</p> <pre><code>pydantic.error_wrappers.ValidationError: 1 validation error for RetrySettings\nmax_tries\n  ensure this value is greater than 0 (type=value_error.number.not_gt; limit_value=0)\n</code></pre>"}, {"location": "usage/retry/#disabling-retry", "title": "Disabling retry", "text": "<p>Retrying can be disabled entirely by passing <code>retry=None</code> to the client constructor.</p> <pre><code>from harborapi import HarborAsyncClient\n\nclient = HarborAsyncClient(\n    ...,\n    retry=None,\n)\n</code></pre>"}, {"location": "usage/retry/#no_retry-context-manager", "title": "<code>no_retry()</code> context manager", "text": "<p>We can also temporarily disable retry without having to discard the current retry settings by using the <code>no_retry()</code> context manager. The context manager lets us disable retry for just a single block of code.</p> <pre><code>from harborapi import HarborAsyncClient\n\nclient = HarborAsyncClient(...)\n\nwith client.no_retry():\n    # do something that should not be retried\n    ...\n\n# retry settings are restored outside the block\n</code></pre>"}, {"location": "usage/retry/#advanced-configuration", "title": "Advanced configuration", "text": "<p><code>RetrySettings</code> supports a wide range of configuration options:</p> <pre><code>from typing import Any, Generator\n\nimport backoff\nfrom backoff._typing import Details\n\nfrom harborapi import HarborAsyncClient\nfrom harborapi.exceptions import InternalServerError, MethodNotAllowed, StatusError\nfrom harborapi.retry import RetrySettings\n\n\ndef adder(\n    base: float = 1,\n    value: float = 1,\n) -&gt; Generator[float, Any, None]:\n    \"\"\"Generator that yields a number that increases by a constant value.\"\"\"\n    # Advance past initial .send() call\n    yield  # type: ignore[misc]\n\n    # increment by value for each iteration\n    while True:\n        yield base\n        base += value\n\n\ndef giveup_predicate(e: Exception) -&gt; bool:\n    # give up on 404 errors\n    if isinstance(e, StatusError):\n        return e.status_code == 404\n    return False  # don't give up otherwise\n\n\ndef on_success(details: Details) -&gt; None:\n    print(f\"Success after {details['tries']} tries. Elapsed: {details['elapsed']}s\")\n\n\ndef on_giveup(details: Details) -&gt; None:\n    print(f\"Giving up calling {details['target']} after {details['tries']} tries.\")\n    # can (and should) raise here\n\n\ndef on_backoff(details: Details) -&gt; None:\n    # NOTE: only on_backoff has the \"wait\" key in details\n    print(\n        f\"Backing off calling {details['target']} after {details['tries']} tries for {details['wait']}s.\"\n    )\n\n\nclient = HarborAsyncClient(\n    ...,\n    retry=RetrySettings(\n        max_tries=5,\n        max_time=20,\n        exception=(InternalServerError, MethodNotAllowed),\n        wait_gen=adder,\n        base=1,  # kwarg passed to adder\n        value=2,  # kwarg passed to adder\n        jitter=backoff.full_jitter,  # default jitter function\n        giveup=giveup_predicate,\n        on_success=on_success,\n        on_backoff=on_backoff,\n        on_giveup=on_giveup,\n        raise_on_giveup=True,\n    ),\n)\n</code></pre>"}, {"location": "usage/retry/#exception-types", "title": "Exception types", "text": "<p>The <code>exception</code> field takes a single exception type or a tuple of exception types. If an exception raised by a request is an instance of one of the given exception types, the request will be retried. Other exception types are raised immediately.</p> <p>By default, all network and timeout errors are retried, but no HTTP errors (such as 301, 404, 500, etc.) are retried. This behavior can be modified by passing a tuple of HTTP error types to the <code>exception</code> field, specifying the HTTP status code errors to be retried.</p> <pre><code>from harborapi.exceptions import InternalServerError, MethodNotAllowed\n\nRetrySettings(\n    exception=(InternalServerError, MethodNotAllowed),\n)\n</code></pre>"}, {"location": "usage/retry/#status-errors", "title": "Status errors", "text": "<p>If we want to retry all HTTP errors, we can pass <code>StatusError</code> to the <code>exception</code> field:</p> <pre><code>from harborapi.exceptions import StatusError\n\nRetrySettings(\n    exception=StatusError,\n)\n</code></pre>"}, {"location": "usage/retry/#status-and-network-errors", "title": "Status and network errors", "text": "<p>If we also want to retry all status errors and network errors, we can import <code>NetworkError</code> and <code>TimeoutException</code> from httpx and use them too:</p> <pre><code>from httpx import NetworkError, TimeoutException\nfrom harborapi.exceptions import StatusError\n\nRetrySettings(\n    exception=(StatusError, NetworkError, TimeoutException),\n)\n</code></pre>"}, {"location": "usage/retry/#wait-generators", "title": "Wait generators", "text": "<p>The <code>wait_gen</code> field takes a <code>_WaitGenerator</code>, which is a callable that takes any number of keyword arguments and returns a generator that yields floats. The generator is used to generate the wait time between retries. The default wait generator is <code>backoff.expo</code>.</p> <p>In the example, we define the custom wait generator function <code>adder</code>, which takes the arguments <code>base</code> and <code>value</code>. These parameters both have the default value <code>1</code>. If we want to, we can override the default arguments by passing them to the <code>RetrySettings</code> constructor as keyword arguments.</p> <p>Any extra keyword arguments passed to the <code>RetrySettings</code> constructor will in turn be passed to the wait generator function:</p> <pre><code>RetrySettings(\n    wait_gen=adder,\n    base=1,\n    value=2,\n)\n</code></pre> <p>Internally, <code>adder</code> uses the extra kwargs and is called like this:</p> <pre><code>adder(base=1, value=2)\n</code></pre> <p>Note</p> <p>In the custom wait generator function <code>adder</code>, we account for the fact that <code>backoff</code> pumps the generator once before using it by yielding an initial value of <code>None</code>. This is consistent with the internal wait generator functions in <code>backoff</code> itself, such as <code>backoff.expo</code> and <code>backoff.fibo</code>.</p>"}, {"location": "usage/retry/#jitter", "title": "Jitter", "text": "<p>The <code>jitter</code> field takes a _Jitterer, which is callable that takes a wait value (float) generated by the wait generator and returns a float. The default jitter function is <code>backoff.full_jitter</code>, which jitters the wait value between 0 and the original wait value.</p> <p>A custom jitter function could look like this:</p> <pre><code>import random\n\ndef custom_jitter(wait: float) -&gt; float:\n    return wait * random.random()\n\n\nclient = HarborAsyncClient(\n    ...,\n    retry=RetrySettings(\n        jitter=custom_jitter,\n    ),\n)\n</code></pre>"}, {"location": "usage/retry/#event-handlers", "title": "Event handlers", "text": "<p>Furthermore, we can define custom event handlers for the <code>on_success</code>, <code>on_backoff</code> and <code>on_giveup</code> events. Event handlers are callback functions that take an argument of type <code>Details</code>, which is a dictionary containing information about the current retry attempt. It has the following keys:</p> <ul> <li><code>target</code>: reference to the function or method being invoked</li> <li><code>args</code>: positional arguments to func</li> <li><code>kwargs</code>: keyword arguments to func</li> <li><code>tries</code>: number of invocation tries so far</li> <li><code>elapsed</code>: elapsed time in seconds so far</li> <li><code>wait</code>: seconds to wait (<code>on_backoff</code> handler only)</li> </ul> <p>Check Backoff's event handler documentation for more information on how to use the <code>on_backoff</code>, <code>on_giveup</code> and <code>on_success</code> parameters, and the <code>details</code> dict.</p>"}, {"location": "usage/rich/", "title": "Rich support", "text": "<p>All data models in harborapi support the Rich <code>__rich_console__</code> protocol, which allows these models to be specially rendered in Rich consoles.</p> <p>In order to use this feature, you must first install <code>rich</code>:</p> <pre><code>pip install rich\n</code></pre> <p>The <code>__rich_console__</code> method on a model creates a Rich Panel containing one or more Rich Tables representing the model. This method is automatically called when the model is printed to a Rich console.</p>"}, {"location": "usage/rich/#printing-models", "title": "Printing models", "text": "<p>Printing a model to a Rich console will automatically render the model as a table:</p> <pre><code>from rich import print\nfrom harborapi.models import Repository\n\nr = Repository(\n    ..., # omitted for brevity\n)\nprint(r)\n</code></pre> <p>Produces:</p> <pre><code>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Repository                                                    \u2502\n\u2502 \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u2502\n\u2502 \u2503 Field             \u2503 Value                                 \u2503 \u2502\n\u2502 \u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529 \u2502\n\u2502 \u2502 id                \u2502 1234                                  \u2502 \u2502\n\u2502 \u2502 project_id        \u2502 1                                     \u2502 \u2502\n\u2502 \u2502 name              \u2502 library/foo                           \u2502 \u2502\n\u2502 \u2502 description       \u2502 Foo application repository            \u2502 \u2502\n\u2502 \u2502 artifact_count    \u2502 123                                   \u2502 \u2502\n\u2502 \u2502 pull_count        \u2502 456                                   \u2502 \u2502\n\u2502 \u2502 creation_time     \u2502 2020-01-01 13:20:46.230000+00:00      \u2502 \u2502\n\u2502 \u2502 update_time       \u2502 2023-01-01 13:20:46.230000+00:00      \u2502 \u2502\n\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> <p>Nested models are rendered as individual tables within the panel:</p> <pre><code>from rich import print\n\nfrom harborapi.models import Schedule, ScheduleObj\n\ns = Schedule(\n    ..., # omitted for brevity\n    schedule=ScheduleObj(\n        ...,\n    ),\n)\nprint(s)\n</code></pre> <p>Produces:</p> <pre><code>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Schedule                                                      \u2502\n\u2502 \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u2502\n\u2502 \u2503 Field            \u2503 Value                                  \u2503 \u2502\n\u2502 \u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529 \u2502\n\u2502 \u2502 id               \u2502 1234                                   \u2502 \u2502\n\u2502 \u2502 status           \u2502 None                                   \u2502 \u2502\n\u2502 \u2502 creation_time    \u2502 2020-01-01 13:20:46.230000+00:00       \u2502 \u2502\n\u2502 \u2502 update_time      \u2502 2023-01-01 13:20:46.230000+00:00       \u2502 \u2502\n\u2502 \u2502 schedule         \u2502 See below (Schedule.schedule)          \u2502 \u2502\n\u2502 \u2502 parameters       \u2502 None                                   \u2502 \u2502\n\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2502 Schedule.schedule                                             \u2502\n\u2502 \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u2502\n\u2502 \u2503 Field                              \u2503 Value                \u2503 \u2502\n\u2502 \u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529 \u2502\n\u2502 \u2502 type                               \u2502 Type.daily           \u2502 \u2502\n\u2502 \u2502 cron                               \u2502 0 0 0 * * *          \u2502 \u2502\n\u2502 \u2502 next_scheduled_time                \u2502 None                 \u2502 \u2502\n\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"}, {"location": "usage/rich/#get-model-tables", "title": "Get model tables", "text": "<p>If you want to retrieve the table representation(s) of a model, you can use the <code>as_table</code> method. This method returns a generator of Rich Table objects.</p> <p>Since the returned object is a generator, we must either iterate over it manually, or consume it by passing it to a container type, such as a list or tuple.</p> <p>By calling this function ourselves, we can pass parameters such as <code>max_depth</code> to customize the recursion depth of the table, as well as <code>with_description</code> to include the description of each field in the table.</p> <pre><code>from rich import print\n\na = Artifact(...)\n\n# We can print each table individually\nfor table in a.as_table():\n    print(table)\n\n# Or print them all at once\nprint(*(a.as_table()))\n\n# We can use the parameters of `as_table` to customize the table:\ntables = a.as_table(max_depth=0) # don't recurse into nested models\n\n# We can consume the generator by passing it to a list\ntables = list(a.as_table())\ntables = tables[:2]\nfor table in tables:\n    print(table)\n</code></pre> <p>The same kwargs that can be passed to <code>as_table</code> can also be passed to <code>as_panel</code>, which is the method that <code>__rich_console__</code> calls under the hood to wrap the tables in a panel.</p>"}, {"location": "usage/validation/", "title": "Data validation", "text": "<p>By default, data validation is enabled for all requests, which means the data in HTTP responses are validated by passing them to Pydantic models defined for each specific endpoint. This process ensures that the data returned from the API is both valid and in the correct format. In turn, we get a Pydantic model instance (or a list of them), that we can use to access the data through attributes (dot notation). See <code>harborapi.models</code> for a list of all available models and their fields. The Models page contains more information about how models are used in <code>harborapi</code>.</p> <p>By having access to the data through instance attributes intead of dictionary keys, users are provided with auto-completion and type hints in their IDEs, which makes it easier to work with and reason about the data. Furthermore, the data is already validated, so we can be sure that it is in the correct format when working with it.</p> <p>Despite all this, users might want to disable validation for various reasons, such as:</p> <ul> <li>The version of Harbor they are using is not yet supported by the latest version of <code>harborapi</code></li> <li>A model fails to validate due to a bug in the library or the API spec</li> <li>They want to use the data in a way that is not supported by the models</li> </ul>"}, {"location": "usage/validation/#disable-validation", "title": "Disable validation", "text": "<p>We can disable validation of data from the API by setting the <code>validate</code> attribute on <code>HarborAsyncClient</code> to <code>False</code> either when instantiating the client or directly on the client object itself:</p> <pre><code>from harborapi import HarborAsyncClient\n\nclient = HarborAsyncClient(..., validate=False)\n# or\nclient = HarborAsyncClient(...)\nclient.validate = False\n</code></pre> <p>This will cause the client to skip validation of data from the API, and instead return the data as a Pydantic model where none of the fields have been validated.</p> <p>This can be useful if using a version of Harbor that is not yet supported by the latest version of <code>harborapi</code> and/or a model fails to validate due to a bug in the library or the API spec.</p> <p>Warning</p> <p>Nested models will not be constructed when <code>validate=False</code> is set. The type of any submodel fields will be <code>dict</code> or <code>list</code>, depending on the type of the field in the API response. This will effectively break any code that relies on the submodels being constructed.</p> <p>Pydantic does not support constructing nested models without validation. This is a limitation of Pydantic, and not <code>harborapi</code>.</p>"}, {"location": "usage/validation/#no_validation-context-manager", "title": "<code>no_validation()</code> context manager", "text": "<p><code>HarborAsyncClient</code> also provides the <code>no_validation()</code> context manager, which temporarily disables validation inside the <code>with</code> block:</p> <pre><code>from harborapi import HarborAsyncClient\n\nclient = HarborAsyncClient(...)\n\nwith client.no_validation():\n    projects = await client.get_projects()\n</code></pre>"}, {"location": "usage/validation/#example", "title": "Example", "text": "<p>Without validation, the data is still returned as a <code>GeneralInfo</code> model, but none of the fields are validated:</p> <p><pre><code>import asyncio\nfrom harborapi import HarborAsyncClient\nfrom harborapi.models import GeneralInfo\n\nclient = HarborAsyncClient()\n\nasync def main():\n    # temporarily disable validation\n    with client.no_validation():\n        info = await client.get_system_info()\n        assert isinstance(info, dict)\n\n    print(info)\n\n\nasyncio.run(main())\n</code></pre> <pre><code>GeneralInfo.model_construct(\n    current_time=\"2023-02-06T14:34:42.449000+00:00\",\n    with_chartmuseum=True,\n    registry_url=\"demo.goharbor.io\",\n    external_url=\"https://demo.goharbor.io\",\n    auth_mode=\"db_auth\",\n    project_creation_restriction=\"everyone\",\n    self_registration=True,\n    has_ca_root=False,\n    harbor_version=\"v2.7.0-864aca34\",\n    registry_storage_provider_name=\"filesystem\",\n    read_only=False,\n    notification_enable=2,\n    authproxy_settings=None,\n)\n</code></pre> In the example, the <code>GeneralInfo</code> model is constructed, but the values of the fields aren't validated and/or coereced into the types specified on model's fields. <code>current_time</code> is still a string, even though the model says this is a datetime field. When validation is enabled, this field is converted into a datetime object.</p> <p>Furthermore, in this fictional example, the API returned the value <code>2</code> for the <code>notification_enable</code> field, even though the spec says this is a boolean field. With validation disabled, the model is still constructed successfully, and the value of <code>notification_enable</code> remains <code>2</code>.</p> <p>If we had enabled validation, and the API returned the value <code>2</code> for the field <code>notification_enable</code>, we would get an error, because <code>2</code> cannot be parsed as a boolean value:</p> <pre><code>pydantic.error_wrappers.ValidationError: 1 validation error for GeneralInfo\nnotification_enable\n  value could not be parsed to a boolean (type=type_error.bool)\n</code></pre>"}, {"location": "usage/validation/#getting-raw-data", "title": "Getting Raw Data", "text": "<p>In certain cases, we might want to access the raw JSON response from the API, and completely skip the conversion to Pydantic models altogether. In such cases, we can set the <code>raw</code> attribute on the client object.</p> <p>This means that the return type of the various API endpoint methods will be <code>dict</code> or <code>list</code> (or a primitive type like <code>str</code>, <code>int</code>, <code>float</code>, <code>bool</code>, <code>None</code>) instead of a Pydantic model.</p> <p>Note</p> <p>In cases where an endpoint stops returning JSON responses altogether, <code>raw</code> will not help. In such cases, you will have to use a different tool to interact with the API.</p> <pre><code>from harborapi import HarborAsyncClient\n\nclient = HarborAsyncClient(..., raw=True)\n# or\nclient = HarborAsyncClient(...)\nclient.raw = True\n</code></pre>"}, {"location": "usage/validation/#raw_mode-context-manager", "title": "<code>raw_mode()</code> context manager", "text": "<p>We can also use the <code>raw_mode()</code> context manager to temporarily enable raw mode for a single request:</p> <pre><code>from harborapi import HarborAsyncClient\n\nclient = HarborAsyncClient(...)\n\nwith client.raw_mode():\n    projects = await client.get_projects()\n    # projects is a list of dicts\n</code></pre>"}, {"location": "usage/validation/#example_1", "title": "Example", "text": "<p>With raw mode enabled, the client returns the parsed JSON data as a dict:</p> <p><pre><code>import asyncio\nfrom harborapi import HarborAsyncClient\n\nclient = HarborAsyncClient(...)\n\nasync def main():\n    # temporarily enable raw mode\n    with client.raw_mode():\n        info = await client.get_system_info()\n        assert isinstance(info, dict)\n\n    print(info)\n\nasyncio.run(main())\n</code></pre> <pre><code>{\n  \"current_time\": \"2023-02-06T14:34:42.449000+00:00\",\n  \"with_chartmuseum\": True,\n  \"registry_url\": \"demo.goharbor.io\",\n  \"external_url\": \"https://demo.goharbor.io\",\n  \"auth_mode\": \"db_auth\",\n  \"project_creation_restriction\": \"everyone\",\n  \"self_registration\": True,\n  \"has_ca_root\": False,\n  \"harbor_version\": \"v2.7.0-864aca34\",\n  \"registry_storage_provider_name\": \"filesystem\",\n  \"read_only\": False,\n  \"notification_enable\": 2,\n  \"authproxy_settings\": None\n}\n</code></pre></p>"}, {"location": "usage/validation/#the-difference-between-raw-and-validate", "title": "The difference between <code>raw</code> and <code>validate</code>", "text": "<p>Raw mode will cause the client to return the raw JSON data from the API, while no validation will cause the client to skip validation of the data from the API, but still return the expected Pydantic model.</p> <p>Info</p> <p><code>validate=False</code> is equivalent to constructing Pydantic models with <code>BaseModel.model_construct()</code> instead of the usual <code>BaseModel.model_validate()</code>. The latter method will validate the data and construct submodels, while the former will not.</p> <p><code>raw</code> always takes precedence over <code>validate</code> if it is set. By default, <code>raw</code> is set to <code>False</code> and <code>validate</code> is set to <code>True</code>. I.e.:</p> <pre><code>client = HarborAsyncClient(\n    ...,\n    raw=False,\n    validate=True\n)\n</code></pre>"}, {"location": "usage/validation/#skipping-validation-for-request-models", "title": "Skipping validation for request models", "text": "<p>An undocumented feature of the various endpoint methods that take Pydantic models as one of their arguments, is that they also accept dict representations of that model. Even though the type hints specify that a method expects a model of a specific type, any dict can technically be passed in.</p> <p>This functionality is useful if an endpoint changes in a backwards-incompatible way that <code>harborapi</code> hasn't been updated to reflect yet, or <code>harborapi</code> has an error in a model that causes it to fail to validate against the API.</p> <pre><code>import asyncio\nfrom harborapi import HarborAsyncClient\n\nclient = HarborAsyncClient(...)\n\n\nasync def main() -&gt; None:\n    project_path = await client.create_project(\n        {\n            \"project_name\": \"test-project\",\n            \"metadata\": {\n                \"public\": \"false\",\n                \"enable_content_trust\": \"false\",\n                \"prevent_vul\": \"false\",\n                \"auto_scan\": \"false\",\n                \"severity\": \"low\",\n            },\n        }\n    )\n    print(f\"Project created: {project_path}\")\n\nasyncio.run(main())\n</code></pre> <p>In the future, the type hints will be updated to reflect this behavior, but for now it remains undocumented in the code itself.</p> <p>Note</p> <p>If you are using a static type checker in your CI or pre-commit config, you will need to add a <code># type: ignore</code> comment to the line where you pass in the dict to prevent the type checker from complaining about the type mismatch.</p>"}, {"location": "usage/ext/", "title": "<code>harborapi.ext</code>: Extended functionality", "text": "<p>Note</p> <p>This module is for advanced users only. It's highly recommended to become familiar with the regular endpoint methods first, then come back to <code>harborapi.ext</code> if you need more advanced functionality such as concurrent requests, bulk operations, and aggregation of artifact vulnerabilities.</p> <p>For the vast majority of use cases, the regular endpoint methods are sufficient.</p> <p>The <code>harborapi.ext</code> module contains extensions and utility functions that are not part of the Harbor API spec. It expands the functionality of <code>harborapi</code> by providing additional functionality for common task such as fetching artifacts in bulk from multiple repositories. These functions are primarily found in <code>harborapi.ext.api</code>.</p> <p><code>harborapi.ext</code> also provides models used to combine multiple Harbor API models and aggregate their data. See:</p> <ul> <li><code>harborapi.ext.artifact.ArtifactInfo</code></li> <li><code>harborapi.ext.report.ArtifactReport</code></li> </ul> <p>To get a practical understanding of the module, check out some recipes that use it:</p> <ul> <li>Fetch artifacts concurrently</li> <li>Get artifact owner</li> <li>Get vulnerabilities for all artifacts</li> <li>Fetch repositories concurrently</li> </ul> <p>!!!warning The <code>harborapi.ext</code> module is not part of the Harbor API specification and is not guaranteed to be stable. It may change in future versions of <code>harborapi</code>.</p> <p>Importing <code>harborapi.ext</code> is optional and does not require any additional dependencies.</p> <pre><code>import harborapi.ext\n# or\nfrom harborapi import ext\n# or\nfrom harborapi.ext import api, artifact, cve, report\n# or\nfrom harborapi.ext.api import get_artifact_info, get_artifact_vulnerabilities #, ...\n</code></pre> <p>Your IDE should provide auto-completion for the various imports available from the <code>harborapi.ext</code> module. Otherwise, check the Reference</p>"}, {"location": "usage/ext/api/", "title": "API", "text": "<p>The <code>ext.api</code> module contains helper functions that take in a <code>HarborAsyncClient</code> and use it to provide new or extended functionality. In most cases, the functions return <code>ArtifactInfo</code> objects, which is composed of an artifact, its repository and optionally also the artifact's complete vulnerability report.</p> <p>The module makes heavy use of concurrent requests to speed up the process of fetching information from the Harbor API. This is done using the <code>asyncio</code> module, which is part of the Python standard library.</p>"}, {"location": "usage/ext/api/#handling-exceptions-in-bulk-operations", "title": "Handling exceptions in bulk operations", "text": "<p>Certain functions, such as <code>get_artifacts</code> and <code>get_artifact_vulnerabilities</code> send a large number of requests. In order to not fail the entire operation if a single request fails, exceptions are ignored by default.</p> <p>To handle these exceptions, a <code>callback</code> parameter is available for these functions, which takes a function that receives a list of exceptions as its only argument. This callback function can be used to handle exceptions that occur during the concurrent requests. The function always fires even if there are no exceptions. If no callback function is specified, exceptions are ignored.</p>"}, {"location": "usage/ext/api/#example", "title": "Example", "text": "<pre><code>import asyncio\nimport os\nfrom typing import List\n\nfrom harborapi import HarborAsyncClient\nfrom harborapi.ext import api\nfrom httpx._exceptions import HTTPError\n\nclient = HarborAsyncClient(\n    url=os.getenv(\"HARBOR_URL\"),\n    basicauth=os.getenv(\"HARBOR_CREDENTIALS\"),\n)\n\n\ndef handle_exceptions(exceptions: List[Exception]) -&gt; None:\n    if not exceptions:\n        return\n    print(\"The following exceptions occurred:\")\n    for e in exceptions:\n        if isinstance(e, HTTPError):\n            print(f\"HTTPError: {e.request.method} {e.request.url}\")\n        else:\n            print(e)\n\n\nasync def main() -&gt; None:\n    artifacts = await api.get_artifacts(\n        client,\n        projects=[\"library\"],\n        callback=handle_exceptions,\n    )\n    for artifact in artifacts:\n        print(artifact.artifact.digest)\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"}, {"location": "usage/ext/api/#fetch-multiple-artifacts-concurrently", "title": "Fetch multiple artifacts concurrently", "text": "<p>The previous error handling example showcased the <code>harborapi.ext.api.get_artifacts</code> function in some capacity. By default this function fetches all artifacts in all repositories in all projects and returns a list of <code>ArtifactInfo</code> objects.</p> <p>Using the <code>project</code>, <code>repository</code> and <code>tag</code> parameters, we can limit the artifacts that are fetched.</p> <ul> <li>The <code>project</code> parameter can be a list of one or more project names.</li> <li>The <code>repository</code> parameter can be a list of one or more repositories (without the project name, e.g. <code>foo</code> instead of <code>library/foo</code>).</li> <li>The <code>tag</code> parameter is a single tag name to filter on.</li> </ul>"}, {"location": "usage/ext/api/#example_1", "title": "Example", "text": "<pre><code>import asyncio\nimport os\n\nfrom harborapi import HarborAsyncClient\nfrom harborapi.ext import api\n\nclient = HarborAsyncClient(\n    url=os.getenv(\"HARBOR_URL\"),\n    basicauth=os.getenv(\"HARBOR_CREDENTIALS\"),\n)\n\nasync def main() -&gt; None:\n    artifacts = await api.get_artifacts(\n        client,\n        projects=[\"library\", \"mirrors\"],\n        repositories=[\"alpine\", \"busybox\", \"debian\", \"internal-repo\"],\n        tag=\"latest\",\n    )\n    for artifact in artifacts:\n        print(artifact.artifact.digest)\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre> <p>The <code>query</code> parameter, found on most <code>HarborAsyncClient</code> methods, can also be passed to <code>harborapi.ext.api.get_artifacts</code> for a more granular filtering of artifacts.</p> <p>See HarborAsyncClient.get_artifacts for more information on the <code>query</code> parameter.</p>"}, {"location": "usage/ext/artifact/", "title": "Artifact info", "text": "<p>The <code>harborapi.ext.artifact</code> module defines the <code>ArtifactInfo</code> class, which is a class that is composed of multiple Harbor API models:</p> <ul> <li><code>Artifact</code></li> <li><code>Repository</code></li> <li><code>HarborVulnerabilityReport</code></li> </ul> <p>Which in simplified Python code looks like this:</p> <pre><code>class ArtifactInfo:\n    artifact: Artifact\n    repository: Repository\n    report: HarborVulnerabilityReport\n</code></pre> <p>The <code>ArtifactInfo</code> class thus provides the complete information for a given artifact, including its repository and its vulnerability report. This makes all the information about an artifact available in one place.</p> <p>Several helper methods are defined to make use of the information available in the <code>ArtifactInfo</code> object. See the <code>ArtifactInfo</code>  object reference for more information.</p> <p>Most functions defined in <code>harborapi.ext.api</code> return <code>ArtifactInfo</code>  objects (or lists of them), unless otherwise specified.</p>"}, {"location": "usage/ext/artifact/#why-artifactinfo", "title": "Why <code>ArtifactInfo</code>?", "text": "<p>The <code>ArtifactInfo</code> class exists because the full information about an artifact is not returned by <code>HarborAsyncClient.get_artifact</code> due to the way the API specification is written. The API specification for an <code>Artifact</code> does not include its repository name (the name by which you usally refer to the artifact, e.g. library/hello-world), nor its vulnerabilities.</p> <p>To that end, we also need to fetch the artifact's <code>Repository</code> in a separate API call. This gives us the project name and the repository name for the artifact, among other things.</p> <p>Furthermore, if we wish to fetch the vulnerabilities of an Artifact, we need to fetch its <code>HarborVulnerabilityReport</code>. This is, again, a separate API call. The report we get from <code>HarborAsyncClient.get_artifact(..., with_scan_overview=True)</code> is not sufficient, as it is merely an overview of the vulnerabilities, not the full report. Hence the need for this separate API call.</p> <p>Together, these 3 models combine to make an <code>ArtifactInfo</code> object.</p> <p>Through functions such as <code>harborapi.ext.get_artifacts</code> and <code>harborapi.ext.get_artifact_vulnerabilities</code>, we can fetch multiple artifacts and their associated repo and report with a single function call, which also executes the requests concurrently. This is much more efficient than fetching each artifact, repo, and report individually and in sequence.</p>"}, {"location": "usage/ext/report/", "title": "Report", "text": "<p>The <code>ext.report</code> module defines the <code>ArtifactReport</code> class, which aggregates several <code>ArtifactInfo</code> objects. Through this class, one can query the aggregated data for all artifacts affected by a given vulnerability, all artifacts who have a given vulnerable package, etc.</p> <p>This allows for a deeper analysis of the vulnerabilities affecting your artifacts, and can be used to generate reports, or to take action on the artifacts that are affected by a given vulnerability.</p> <p>Given a list of ArtifactInfo objects, we can query the aggregated data to find all artifacts affected by a given vulnerability:</p> <pre><code>from harborapi import HarborAsyncClient\nfrom harborapi.ext.api import get_artifact_vulnerabilities\nfrom harborapi.ext.report import ArtifactReport\n\nclient = HarborAsyncClient(...)\n\nartifacts = await get_artifact_vulnerabilities(client)\n\n# Instantiate the ArtifactReport from the fetched artifacts\nreport = ArtifactReport(artifacts)\nfiltered_report = report.with_cve(\"CVE-2020-0001\")\n\n# iterating on ArtifactReport yields ArtifactInfo objects\nfor artifact in filtered_report:\n    print(artifact.repository.name, artifact.artifact.digest)\n</code></pre> <p>All <code>ArtifactReport.with_*</code> methods return new ArtifactReport objects.</p>"}, {"location": "usage/ext/report/#more-granular-package-filtering", "title": "More granular package filtering", "text": "<p>We can also query the report for all artifacts who have a given vulnerable package:</p> <pre><code>filtered_report = report.with_package(\"openssl\")\n</code></pre> <p>The search is case-insensitive by default, but can be made case-sensitive by setting the <code>case_sensitive</code> argument to <code>True</code>:</p> <pre><code>filtered_report = report.with_package(\n    \"OpenSSL\", # WARNING: package is likely named openssl!\n    case_sensitive=True,\n)\n</code></pre> <p>We can further narrow down the results by specifying minimum and/or maximum versions of the package:</p> <pre><code>filtered_report = report.with_package(\n    \"openssl\",\n    min_version=(3, 0, 0),\n    max_version=(3, 0, 2)\n)\n</code></pre> <p>All text-based queries support regular expressions. For example, to find all artifacts with a package name that starts with <code>openssl</code>:</p> <pre><code>filtered_report = report.with_package(\"openssl.*\")\n</code></pre>"}, {"location": "usage/ext/report/#chaining-filters", "title": "Chaining filters", "text": "<p>As previously mentioned, all <code>ArtifactReport.with_*</code> methods return new <code>ArtifactReport</code> objects, so they can be chained together to easily filter a report with multiple criteria.</p> <pre><code>filtered_report = (\n    report.with_package(\"openssl\")\n    .with_cve(\"CVE-2020-0001\")\n    .with_repository(\"my-repo\")\n)   .with_tag(\"latest\")\n</code></pre>"}, {"location": "usage/methods/", "title": "Methods", "text": "<p>The following sections demonstrate basic usage of the three main categories of methods exposed by the client object.</p> <ul> <li>Reading</li> <li>Creating/updating</li> <li>Deleting</li> </ul> <p>For a complete list of methods, see the Endpoints Overview.</p> <p>See Recipes for concrete examples of how to use the methods to perform common tasks.</p>"}, {"location": "usage/methods/create-update/", "title": "Create/update", "text": "<p>Methods that create and update resources make use of Pydantic models that have been generated from the official Harbor REST API Swagger schema.</p> <p>The endpoint methods themselves have no parameters beyond the single model instance that is passed as the request body. This is done so that models can be updated in the future without breaking the methods that use them. We are at all times beholden to the official Swagger schema, and the models are generated from that schema. To see how to disable this validation and pass arbitrary data to the API, see the Validation page.</p>"}, {"location": "usage/methods/create-update/#create", "title": "Create", "text": "<p>Creating resources is done by calling one of the <code>create_*</code> methods on the client object. The model type expected for these methods is usually subtly different from the ones returned by <code>get_*</code> methods, and generally has the suffix <code>*Req</code> (e.g. <code>ProjectReq</code> instead of <code>Project</code>).</p> <pre><code>import asyncio\nfrom harborapi import HarborAsyncClient\nfrom harborapi.models import ProjectReq, ProjectMetadata\n\nclient = HarborAsyncClient(...)\n\n\nasync def main() -&gt; None:\n    project_path = await client.create_project(\n        ProjectReq(\n            project_name=\"test-project2\",\n            metadata=ProjectMetadata(\n                public=True,\n            ),\n        )\n    )\n    print(f\"Project created: {project_path}\")\n\n\nasyncio.run(main())\n</code></pre>"}, {"location": "usage/methods/create-update/#update", "title": "Update", "text": "<p>The various <code>update_*</code> methods on the client object expect a <code>*Req</code> model similar to the <code>create_*</code> methods. However, one important distinction is that these methods also expect one or more identifiers for the resource to update the as the first argument(s) and then the model as the following argument:</p> <pre><code>client.update_project(\"name-of-project\", ProjectReq(...))\n</code></pre> <p>Generally, only a single identifier is required to uniquely identify the resource to update, but some endpoints require multiple identifiers, such as the <code>update_project_member_role</code> method which expects both a project name/ID and a member ID:</p> <pre><code>import asyncio\nfrom harborapi import HarborAsyncClient\nfrom harborapi.models import ProjectReq, ProjectMetadata\n\nclient = HarborAsyncClient(...)\n\n\nasync def main() -&gt; None:\n    # Update the project\n    await client.update_project(\n        \"test-project\",\n        ProjectReq(\n            metadata=ProjectMetadata(\n                enable_content_trust=True,\n            ),\n        ),\n    )\n\n\nasyncio.run(main())\n</code></pre> <p>In a departure from traditional REST semantics, the API updates only the fields that are explicitly defined on the model instance, preserving the undefined values as-is. This approach, while not aligning with the idiomatic use of HTTP PUT requests in REST, provides a measure of convenience from a user's perspective, since it allows us to update only the fields we care about, and leave the rest unchanged.</p> <p>In the example, we only set the <code>metadata.enable_content_trust</code> field on the <code>ProjectReq</code> model, which means that only that one setting will be updated on the project. The rest of the project settings will be left unchanged.</p> <p>See the Idiomatic REST updating section for more information on why this might not be the correct way to do things, and why it could change in the future if Harbor changes the API.</p>"}, {"location": "usage/methods/create-update/#idiomatic-rest-updating", "title": "Idiomatic REST updating", "text": "<p>Note</p> <p>The following sections are optional reading, and are only relevant if you want to following idiomatic REST principles when updating resources. If you don't care about that, you can safely ignore the following sections.</p> <p>The update endpoints are HTTP PUT endpoints that should expect a full resource definition according to RFC 7231<sup>1</sup>. However, as described above, testing has shown that the API supports updating with partial models. By default, <code>harborapi</code> will only include the fields that are present in the request model, and leave out the rest, which enables us to take advantage of this behavior in the API:</p> <pre><code>from harborapi.models import ProjectReq, ProjectMetadata\n\nproject = ProjectReq(\n    public=True,\n    metadata=ProjectMetadata(\n        auto_scan=True,\n    ),\n)\n</code></pre> <p>Will send the following over the wire, where unset fields are excluded:</p> <pre><code>{\n  \"public\": true,\n  \"metadata\": {\n    \"auto_scan\": \"true\"\n  }\n}\n</code></pre> <p>Even though the internal representation of the model is:</p> <pre><code>ProjectReq(\n    project_name=None,\n    public=True,\n    metadata=ProjectMetadata(\n        public=None,\n        enable_content_trust=None,\n        enable_content_trust_cosign=None,\n        prevent_vul=None,\n        severity=None,\n        auto_scan='true',\n        reuse_sys_cve_allowlist=None,\n        retention_id=None\n    ),\n    cve_allowlist=None,\n    storage_limit=None,\n    registry_id=None\n)\n</code></pre> <p>This is because Pydantic knows which fields have been set and which have not on the model instance, and only serializes the fields that have been set. This way, we ensure that we don't send any data the user hasn't explicitly set.</p> <p>Note</p> <p>The reason for <code>\"auto_scan\": \"true\"</code> instead of <code>\"auto_scan\": true</code> can be found here.</p> <p>Despite this behavior, it might a good idea to pass the full resource definition to the <code>update_*</code> methods, as the support for partial updates through the API may change in the future independently of this library without notice. The following sections demonstrate how to do this.</p>"}, {"location": "usage/methods/create-update/#converting-get-models-to-put-models", "title": "Converting GET models to PUT models", "text": "<p>As outlined in Update, <code>update_*</code> methods expect subtly different models from the ones returned by <code>get_*</code> methods. By using the method <code>convert_to()</code> which is available on all models, we can easily convert a model we receive from a <code>get_*</code> method to the model type that the corresponding <code>update_*</code> method expects.</p> <p>The method expects a model type as its first argument, and returns an instance of that model type: ../../reference/index.md' <pre><code>from harborapi.models import Project, ProjectReq\n\nproject = Project(...)\nreq = project.convert_to(ProjectReq)\nassert isinstance(req, ProjectReq)\n\nprint(req.metadata) # OK\nprint(req.owner_id) # FAIL - ProjectReq does not have an owner_id field\n</code></pre></p> <p>Note</p> <p>The <code>extra</code> parameter is mainly available to ensure compatibility with future API changes, so unless you know you need to use it, you can safely ignore it.</p> <p>If we want to, we can also pass in <code>extra=True</code> to include all fields of the original model on converted model, even if they are not defined in the schema of the model type we are converting to:</p> <pre><code>from harborapi.models import Project, ProjectReq\n\nproject = Project(owner_id=1, ...)\nreq = project.convert_to(ProjectReq, extra=True)\nassert isinstance(req, ProjectReq)\n\nprint(req.metadata) # OK\nprint(req.owner_id) # OK - Inherited from Project via extra=True\n</code></pre> <p>Even though the <code>ProjectReq</code> model does not have an <code>owner_id</code> field in its schema, the resulting model instance received it from the <code>Project</code> model that it was converted from because we used <code>convert_to(..., extra=True)</code>.</p>"}, {"location": "usage/methods/create-update/#updating-a-resource-using-convert_to", "title": "Updating a resource using <code>convert_to()</code>", "text": "<p>Below is an example demonstrating how to fetch the existing resource (<code>Project</code>) and convert it to the model type the update method expects (<code>ProjectReq</code>):</p> <pre><code>import asyncio\nfrom harborapi import HarborAsyncClient\nfrom harborapi.models import ProjectReq\n\nclient = HarborAsyncClient(...)\n\nasync def main() -&gt; None:\n    # Get the project\n    project = await client.get_project(\"test-project\")\n\n    # Convert to ProjectReq\n    req = project.convert_to(ProjectReq)\n\n    # Change the field we want to update\n    req.metadata.enable_content_trust = True\n\n    # Update the project\n    await client.update_project(\"test-project\", req)\n\n\nasyncio.run(main())\n</code></pre> <ol> <li> <p>You can defend this behavior with certain interpretations of this quote from the RFC: \"When a PUT    representation is inconsistent with the target resource, the origin    server SHOULD either make them consistent, by transforming the    representation or changing the resource configuration [...]\". However, this implicit behavior is not documented anywhere by Harbor, so we have no way of knowing if it is intentional or not.\u00a0\u21a9</p> </li> </ol>"}, {"location": "usage/methods/delete/", "title": "Delete", "text": "<p>Endpoints that delete resources usually require a resource identifier or name as the first argument. Most of these endpoints return <code>None</code> on success. Failure to delete a resource will raise an exception.</p> <pre><code>import asyncio\nfrom harborapi import HarborAsyncClient\n\nclient = HarborAsyncClient(...)\n\n\nasync def main() -&gt; None:\n    await client.delete_project(\"test-project\")\n\n\nasyncio.run(main())\n</code></pre>"}, {"location": "usage/methods/read/", "title": "Read", "text": ""}, {"location": "usage/methods/read/#fetch-a-single-resource", "title": "Fetch a single resource", "text": "<p>When fetching a single resource, the method usually expects a resource identifier or name as the first parameter, and returns a single instance of the Pydantic model corresponding to the resource type.</p> <p>Each method's return type is documented in the Endpoints Overview</p> <pre><code>import asyncio\nfrom harborapi import HarborAsyncClient\n\nclient = HarborAsyncClient(...)\n\nasync def main() -&gt; None:\n    project = await client.get_project(\"test-project\")\n    print(project)\n\n\nasyncio.run(main())\n</code></pre> <p>In this case we pass in a project name to <code>get_project</code> and receive a <code>Project</code> object.</p>"}, {"location": "usage/methods/read/#fetch-multiple-resources", "title": "Fetch multiple resources", "text": "<p>Certain methods fetch multiple resources and return a list of Pydantic models. Below is a basic example of how to use these methods.</p> <pre><code>import asyncio\nfrom harborapi import HarborAsyncClient\n\nclient = HarborAsyncClient(...)\n\n\nasync def main() -&gt; None:\n    projects = await client.get_projects()\n    for project in projects:\n        print(project)\n\n\nasyncio.run(main())\n</code></pre> <p>In this case we call <code>get_projects</code> with no arguments, and receive a list of <code>Project</code> objects.</p> <p>Methods that fetch multiple resources have a number of optional arguments that can be passed in to filter, sort and limit the results. These arguments are documented below.</p>"}, {"location": "usage/methods/read/#query", "title": "<code>query</code>", "text": "<p>A query string to filter the results by.</p>"}, {"location": "usage/methods/read/#syntax", "title": "Syntax", "text": "<p><code>field1[operator][value],[field2[operator][value]],...</code></p>"}, {"location": "usage/methods/read/#query-patterns", "title": "Query patterns", "text": "<ul> <li>exact match(<code>\"k=v\"</code>)</li> <li>fuzzy match(<code>\"k=~v\"</code>)</li> <li>range(<code>\"k=[min~max]\"</code>)</li> <li>list with union releationship(<code>\"k={v1 v2 v3}\"</code>)</li> <li>list with intersection relationship(<code>\"k=(v1 v2 v3)\"</code>).</li> </ul>"}, {"location": "usage/methods/read/#value-types", "title": "Value types", "text": "<ul> <li>string(enclosed by <code>\"</code> or <code>'</code>)</li> <li>integer</li> <li>time(in format <code>\"2020-04-09 02:36:00\"</code>)</li> </ul> <p>Example</p> <p>Fetch all projects with a name containing <code>test</code>, owned by the user <code>admin</code>, and created between 2020-01-01 and 2023-12-31</p> <pre><code>await client.get_projects(\n    query=\"name=~test,owner=admin,created_at=[2020-01-01~2023-12-31]\",\n)\n</code></pre> <p>Warning</p> <p>The field we query for owner name is called <code>owner</code> despite the field on the <code>Project</code> model being called <code>owner_name</code>. This is one of many examples of divergences in the API spec that we have no control over.</p> <p>As you work with the API, it is likely you will encounter more of these inconsistencies.</p> <p>To get an idea of the fields you can query, call <code>get_model_fields()</code> on the model the method returns. This will return a set of field names that you can use in your query. As the warning above states, the actual field names the API expects might be subtly different than the field names on the actual model, but the list should give you a good idea of what is available:</p> <pre><code>from harborapi.models import Project\n\nprint(Project.get_model_fields())\n# or\nprint(Project().get_model_fields())\n</code></pre> Result<pre><code>{'project_id', 'owner_id', 'name', 'registry_id', 'creation_time', 'update_time', 'deleted', 'owner_name', 'togglable', 'current_user_role_id', 'current_user_role_ids', 'repo_count', 'metadata', 'cve_allowlist'}\n</code></pre> <p>The method can be called on both the class itself or an instance of the class.</p>"}, {"location": "usage/methods/read/#sort", "title": "<code>sort</code>", "text": "<p>The field(s) to sort the results by. Must match the field names of the API response model.</p>"}, {"location": "usage/methods/read/#syntax_1", "title": "Syntax", "text": "<p><code>field1,field2,...</code></p> <p>Prepend fields with <code>-</code> to sort in descending order.</p> <p>Example</p> <pre><code>await client.get_projects(\n    sort=\"name,-created_at\",\n)\n</code></pre> <p>Warning</p> <p>Not all fields support sorting. This is not documented anywhere by Harbor, and the only way to know which fields work is to try them out. Unsortable/unknown field names are ignored by the API. The same naming logic for field names apply to <code>sort</code> as they do to <code>query</code>. Some field names diverge from the names in the spec when used in this manner. See query for more information.</p>"}, {"location": "usage/methods/read/#limit", "title": "<code>limit</code>", "text": "<p>The maximum number of results to return. By default unlimited (<code>None</code>).</p> <p>For certain methods, such as <code>HarborAsyncClient.get_audit_logs()</code>, it is highly advised to set a limit to avoid fetching every single entry in the database.</p> <p>Example</p> <pre><code>await client.get_projects(\n    limit=10,\n)\n</code></pre>"}, {"location": "usage/methods/read/#page", "title": "<code>page</code>", "text": "<p>The page number to start fetching from. This is a parameter that is used in conjunction with <code>page_size</code> to control how results are fetched from the API. In the vast majority of cases, this specific parameter does not need to be changed.</p> <p>Example</p> <pre><code>await client.get_projects(\n    page=2,\n)\n</code></pre>"}, {"location": "usage/methods/read/#page_size", "title": "<code>page_size</code>", "text": "<p>The number of results to return per page. This is a parameter that is used in conjunction with <code>page</code> to control how results are fetched from the API. Used in situtations where you want to either reduce or increase the number of requests to the API, and conversely the size of each response. (Higher page size = fewer requests, but larger responses).</p> <p>As with <code>page</code>, this specific parameter does not need to be changed in the vast majority of cases.</p> <p>Example</p> <pre><code>await client.get_projects(\n    page_size=20,\n)\n</code></pre>"}, {"location": "usage/methods/read/#example-with-all-parameters", "title": "Example (with all parameters)", "text": "<p>We can use all of the above parameters together to fetch a specific set of resources. In this case, we want to fetch all projects that have a name containing <code>test</code>, and were created between 2020-01-01 and 2023-12-31. We want to sort the results by name, and limit the results to 100 projects.</p> <pre><code>import asyncio\nfrom harborapi import HarborAsyncClient\n\nclient = HarborAsyncClient(...)\n\n\nasync def main() -&gt; None:\n    projects = await client.get_projects(\n        query=\"name=~test,created_at=[2020-01-01~2023-12-31]\",\n        sort=\"name\",\n        page=1,\n        page_size=10,\n        limit=100,\n    )\n    for project in projects:\n        print(project)\n\n\nasyncio.run(main())\n</code></pre>"}]}