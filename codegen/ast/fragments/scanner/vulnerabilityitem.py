from __future__ import annotations

from typing import Dict
from typing import Iterable
from typing import Optional
from typing import Union

from pydantic import field_validator
from pydantic import ValidationInfo

from ..log import logger
from ..version import get_semver
from ..version import SemVer


class VulnerabilityItem(BaseModel):
    # Changed type: List[AnyUrl] -> List[str]
    links: Optional[List[str]] = Field(
        None,
        description="The list of links to the upstream databases with the full description of the vulnerability.\n",
        example=["https://security-tracker.debian.org/tracker/CVE-2017-8283"],
    )

    @field_validator("severity", mode="before")
    @classmethod
    def _severity_none_is_default(
        cls, v: Optional[Severity], info: ValidationInfo
    ) -> Severity:
        if not info.field_name:
            raise ValueError("Validator is not attached to a field.")
        return v or cls.model_fields[info.field_name].default

    @property
    def semver(self) -> SemVer:
        return get_semver(self.version)

    @property
    def fixable(self) -> bool:
        return bool(self.fix_version)  # None and empty string are False

    def get_cvss_score(
        self,
        scanner: Union[Optional[Scanner], str] = "Trivy",
        version: int = 3,
        vendor_priority: Optional[Iterable[str]] = None,
        default: float = 0.0,
    ) -> float:
        """The default scanner Trivy, as of version 0.29.1, does not use the
        preferred_cvss field.

        In order to not tightly couple this method with a specific scanner,
        we use the scanner name to determine how to retrieve the CVSS score.

        Forward compatibility is in place in the event that Trivy starts
        conforming to the spec.
        """
        if vendor_priority is None:
            vendor_priority = DEFAULT_VENDORS
        if self.preferred_cvss is not None:
            if version == 3 and self.preferred_cvss.score_v3 is not None:
                return self.preferred_cvss.score_v3
            elif version == 2 and self.preferred_cvss.score_v2 is not None:
                return self.preferred_cvss.score_v2

        # fallback to the scanner-specific CVSS score

        # Scanner is an optional field in the spec,
        # but it's likely that it will always be present,
        # since there is no vulnerability without a scanner.
        if not scanner:
            return default

        if isinstance(scanner, str):
            scanner_name = scanner
        elif isinstance(scanner, Scanner):
            scanner_name = scanner.name or ""

        if scanner_name.lower() == "trivy":
            return self._get_trivy_cvss_score(
                version=version, vendor_priority=vendor_priority, default=default
            )

        # Other scanners here
        # ...

        return default

    def _get_trivy_cvss_score(
        self,
        version: int,
        vendor_priority: Iterable[str],
        default: float = 0.0,
    ) -> float:
        # TODO: add logging when we hit defaults
        if self.vendor_attributes is None:
            return default

        cvss_data = self.vendor_attributes.get("CVSS", {})
        if not cvss_data:
            return default

        for prio in vendor_priority:
            # Trivy uses the vendor name as the key for the CVSS data
            vendor_cvss = cvss_data.get(prio, {})  # type: Dict[str, float]
            if not vendor_cvss:
                continue
            elif not isinstance(vendor_cvss, dict):
                logger.warning("Received malformed vendor CVSS data: %s", vendor_cvss)
                continue

            score = vendor_cvss.get(f"V{version}Score", default)
            if isinstance(score, (int, float)):
                return float(score)
            else:
                logger.error(
                    "Received non-float value for vendor CVSS V%dScore: %s",
                    version,
                    score,
                )

        return default

    def get_severity(
        self,
        scanner: Union[Optional[Scanner], str] = "Trivy",
        vendor_priority: Optional[Iterable[str]] = None,
    ) -> Severity:
        """Returns the CVSS V3 severity of the vulnerability based on a specific vendor.
        If no vendor is specified, the default vendor priority is used (NVD over RedHat).

        With Trivy 0.29.1, the `severity` field is based on the Red Hat vulnerability rating.
        This attempts to return the severity based on a user-provided vendor priority.

        TODO: improve documentation for the what and why of this method
        """
        cvss_score = self.get_cvss_score(
            scanner=scanner, vendor_priority=vendor_priority
        )
        if cvss_score >= 9.0:
            return Severity.critical
        elif cvss_score >= 7.0:
            return Severity.high
        elif cvss_score >= 4.0:
            return Severity.medium
        elif cvss_score >= 0.1:
            return Severity.low
        else:
            return Severity.negligible  # this is called "None" in the CVSSv3 spec
        # can never return Severity.unknown

    def get_severity_highest(
        self,
        scanner: Union[Optional[Scanner], str] = "Trivy",
        vendors: Optional[Iterable[str]] = None,
    ) -> Severity:
        """Attempts to find the highest severity of the vulnerability based on a specific vendor."""
        if vendors is None:
            vendors = DEFAULT_VENDORS
        severities = [
            self.get_severity(scanner=scanner, vendor_priority=[v]) for v in vendors
        ]
        if self.severity is not None:
            severities.append(self.severity)
        return most_severe(severities)


DEFAULT_VENDORS = ("nvd", "redhat")
