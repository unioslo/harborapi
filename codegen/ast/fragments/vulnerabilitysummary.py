from typing import Any, Dict

from pydantic import BaseModel, Field, root_validator


class VulnerabilitySummary(BaseModel):
    # Summary dict keys added as fields
    critical: int = Field(
        0,
        alias="Critical",
        description="The number of critical vulnerabilities detected.",
    )
    high: int = Field(
        0, alias="High", description="The number of critical vulnerabilities detected."
    )
    medium: int = Field(
        0,
        alias="Medium",
        description="The number of critical vulnerabilities detected.",
    )
    low: int = Field(
        0, alias="Low", description="The number of critical vulnerabilities detected."
    )
    unknown: int = Field(
        0,
        alias="Unknown",
        description="The number of critical vulnerabilities detected.",
    )

    @root_validator(pre=True)
    def _assign_severity_breakdown(cls, values: Dict[str, Any]) -> Dict[str, Any]:
        summary = values.get("summary") or {}  # account for None
        if not isinstance(summary, dict):
            raise ValueError("'summary' must be a dict")
        return {**values, **summary}
